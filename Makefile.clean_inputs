SUPPRESS_FLAG_ARTIFACTS=$(PROPINQUITY_OUT_DIR)/cleaned_ott/cleaned_ott.tre \
	$(PROPINQUITY_OUT_DIR)/cleaned_ott/cleaned_ott.json \
	$(PROPINQUITY_OUT_DIR)/cleaned_ott/cleaned_ott_1.json \
	$(PROPINQUITY_OUT_DIR)/cleaned_ott/cleaned_ott_pruned_nonflagged.json \
	$(PROPINQUITY_OUT_DIR)/cleaned_ott/ott_version.txt \
	$(PROPINQUITY_OUT_DIR)/cleaned_ott/cleaned_ott_with_hiddenbarren.tre \
	$(PROPINQUITY_OUT_DIR)/cleaned_ott/cleaning_flags.txt

ARTIFACTS += $(SUPPRESS_FLAG_ARTIFACTS) \
	$(PROPINQUITY_OUT_DIR)/phylo_snapshot/git_shas.txt \
	$(PROPINQUITY_OUT_DIR)/phylo_snapshot/collections_git_shas.txt \
	$(PROPINQUITY_OUT_DIR)/phylo_snapshot/concrete_rank_collection.json \
	$(PROPINQUITY_OUT_DIR)/cleaned_ott/cleaning_flags.txt \
	$(PROPINQUITY_OUT_DIR)/cleaned_ott/root_ott_id.txt \
	$(PROPINQUITY_OUT_DIR)/cleaned_phylo/cleaning_flags.txt \
	$(PROPINQUITY_OUT_DIR)/cleaned_phylo/root_ott_id.txt \
	$(PROPINQUITY_OUT_DIR)/cleaned_phylo/phylo_inputs_cleaned.txt \
	$(PROPINQUITY_OUT_DIR)/cleaned_phylo/needs_updating.txt \
	$(PROPINQUITY_OUT_DIR)/exemplified_phylo/taxonomy.tre \
	$(PROPINQUITY_OUT_DIR)/exemplified_phylo/args.txt \
	$(PROPINQUITY_OUT_DIR)/exemplified_phylo/pruned_taxonomy_degree_distribution.txt \
	$(PROPINQUITY_OUT_DIR)/phylo_induced_taxonomy/taxonomy.tre \
	$(PROPINQUITY_OUT_DIR)/phylo_input/rank_collection.json \
	$(PROPINQUITY_OUT_DIR)/phylo_input/collections.txt

# use find + xargs for wildcard expansion to guard against arg list too long
clean1:
	rm -f $(PROPINQUITY_OUT_DIR)/cleaned_phylo/needs_updating.txt
	rm -f $(PROPINQUITY_OUT_DIR)/phylo_snapshot/git_shas.txt
	rm -f $(PROPINQUITY_OUT_DIR)/phylo_snapshot/collections_git_shas.txt
	rm -f $(PROPINQUITY_OUT_DIR)/phylo_snapshot/stdouterr.txt
	rm -f $(PROPINQUITY_OUT_DIR)/phylo_input/collections.txt
	find $(PROPINQUITY_OUT_DIR)/cleaned_phylo/ -name "*.tre" | xargs rm -f
	find $(PROPINQUITY_OUT_DIR)/cleaned_phylo/ -name "*.json" | xargs rm -f
	find $(PROPINQUITY_OUT_DIR)/exemplified_phylo/ -name "*.tre" | xargs rm -f
	find $(PROPINQUITY_OUT_DIR)/phylo_snapshot/ -name "*.json" | xargs rm -f

# "cleaned_ott" has dubious taxa pruned off. should check against treemachine and smasher versions
$(PROPINQUITY_OUT_DIR)/cleaned_ott/root_ott_id.txt: $(CONFIG_FILENAME)
	@if ! test -d $(PROPINQUITY_OUT_DIR)/cleaned_ott ; then mkdir -p $(PROPINQUITY_OUT_DIR)/cleaned_ott ; fi
	if ! ./bin/config_checker.py synthesis.root_ott_id $(CONFIG_FILENAME) > $(PROPINQUITY_OUT_DIR)/cleaned_ott/.raw_root_ott_id.txt 2>/dev/null ; then \
	   otc-taxonomy-parser --config $(PROPINQUITY_OUT_DIR)/config -R | sed 's/[ \t].*//' > $(PROPINQUITY_OUT_DIR)/cleaned_ott/.raw_root_ott_id.txt ; \
	fi ; \
	if ! diff $(PROPINQUITY_OUT_DIR)/cleaned_ott/.raw_root_ott_id.txt $(PROPINQUITY_OUT_DIR)/cleaned_ott/root_ott_id.txt 2>/dev/null; then mv $(PROPINQUITY_OUT_DIR)/cleaned_ott/.raw_root_ott_id.txt $(PROPINQUITY_OUT_DIR)/cleaned_ott/root_ott_id.txt ; fi

$(PROPINQUITY_OUT_DIR)/cleaned_ott/cleaning_flags.txt: $(CONFIG_FILENAME)
	@if ! test -d $(PROPINQUITY_OUT_DIR)/cleaned_ott ; then mkdir -p $(PROPINQUITY_OUT_DIR)/cleaned_ott ; fi
	./bin/config_checker.py taxonomy.cleaning_flags $(CONFIG_FILENAME) > $(PROPINQUITY_OUT_DIR)/cleaned_ott/.raw_cleaning_flags.txt
	if ! diff $(PROPINQUITY_OUT_DIR)/cleaned_ott/.raw_cleaning_flags.txt $(PROPINQUITY_OUT_DIR)/cleaned_ott/cleaning_flags.txt 2>/dev/null; then mv $(PROPINQUITY_OUT_DIR)/cleaned_ott/.raw_cleaning_flags.txt $(PROPINQUITY_OUT_DIR)/cleaned_ott/cleaning_flags.txt ; fi

$(PROPINQUITY_OUT_DIR)/cleaned_ott/ott_version.txt: $(OTT_DIR)/version.txt
	@if ! test -d $(PROPINQUITY_OUT_DIR)/cleaned_ott ; then mkdir -p $(PROPINQUITY_OUT_DIR)/cleaned_ott ; fi
	if ! diff $(OTT_DIR)/version.txt $(PROPINQUITY_OUT_DIR)/cleaned_ott/ott_version.txt >/dev/null 2>&1 ; then cp $(OTT_DIR)/version.txt $(PROPINQUITY_OUT_DIR)/cleaned_ott/ott_version.txt ; fi

$(PROPINQUITY_OUT_DIR)/cleaned_ott/cleaned_ott_with_hiddenbarren.tre: $(OTT_FILEPATHS) \
													$(PROPINQUITY_OUT_DIR)/cleaned_ott/ott_version.txt \
													$(PROPINQUITY_OUT_DIR)/cleaned_ott/cleaning_flags.txt \
													$(PROPINQUITY_OUT_DIR)/cleaned_ott/root_ott_id.txt
	$(PEYOTL_ROOT)/scripts/ott/suppress_by_flag.py \
	    --ott-dir=$(OTT_DIR) \
	    --output=$(PROPINQUITY_OUT_DIR)/cleaned_ott/cleaned_ott_with_hiddenbarren.tre \
	    --log=$(PROPINQUITY_OUT_DIR)/cleaned_ott/cleaned_ott_1.json \
	    --flags="$(shell cat $(PROPINQUITY_OUT_DIR)/cleaned_ott/cleaning_flags.txt)" \
	    --root="$(shell cat $(PROPINQUITY_OUT_DIR)/cleaned_ott/root_ott_id.txt)"
#	Maybe replace python program with C++ program below after we can generate the necessary log files.
#	otc-taxonomy-parser $(OTT_DIR) --config=$(CONFIG_FILENAME) -T > cleaned_ott/.raw_cleaned_ott.tre

$(PROPINQUITY_OUT_DIR)/cleaned_ott/cleaned_ott.tre: $(PROPINQUITY_OUT_DIR)/cleaned_ott/cleaned_ott_with_hiddenbarren.tre
	cp $(PROPINQUITY_OUT_DIR)/cleaned_ott/cleaned_ott_with_hiddenbarren.tre $(PROPINQUITY_OUT_DIR)/cleaned_ott/cleaned_ott.tre
	echo '{}' > $(PROPINQUITY_OUT_DIR)/cleaned_ott/cleaned_ott_pruned_nonflagged.json
	#otc-relabel-tree \
	#	$(PROPINQUITY_OUT_DIR)/cleaned_ott/cleaned_ott_with_hiddenbarren.tre \
	#	--del-higher-taxon-tips \
	#	-j$(PROPINQUITY_OUT_DIR)/cleaned_ott/cleaned_ott_pruned_nonflagged.json > $(PROPINQUITY_OUT_DIR)/cleaned_ott/cleaned_ott.tre

$(PROPINQUITY_OUT_DIR)/cleaned_ott/cleaned_ott.json: $(PROPINQUITY_OUT_DIR)/cleaned_ott/cleaned_ott_1.json $(PROPINQUITY_OUT_DIR)/cleaned_ott/cleaned_ott_pruned_nonflagged.json
	./bin/combine_ott_cleaning_logs.py \
		$(PROPINQUITY_OUT_DIR)/cleaned_ott/cleaned_ott_1.json \
		$(PROPINQUITY_OUT_DIR)/cleaned_ott/cleaned_ott_pruned_nonflagged.json \
		$(PROPINQUITY_OUT_DIR)/cleaned_ott/cleaned_ott.json


$(PROPINQUITY_OUT_DIR)/phylo_input/studies.txt: $(PROPINQUITY_OUT_DIR)/phylo_input/rank_collection.json
	@if ! test -d $(PROPINQUITY_OUT_DIR)/phylo_input ; then mkdir -p $(PROPINQUITY_OUT_DIR)/phylo_input ; fi
	$(PEYOTL_ROOT)/scripts/collection_export.py \
		--export=studyID \
		$(PROPINQUITY_OUT_DIR)/phylo_input/rank_collection.json \
		 >$(PROPINQUITY_OUT_DIR)/phylo_input/studies.txt

$(PROPINQUITY_OUT_DIR)/phylo_input/study_tree_pairs.txt: $(PROPINQUITY_OUT_DIR)/phylo_input/rank_collection.json
	@if ! test -d $(PROPINQUITY_OUT_DIR)/phylo_input ; then mkdir -p $(PROPINQUITY_OUT_DIR)/phylo_input ; fi
	$(PEYOTL_ROOT)/scripts/collection_export.py \
		--export=studyID_treeID \
		$(PROPINQUITY_OUT_DIR)/phylo_input/rank_collection.json \
		>$(PROPINQUITY_OUT_DIR)/phylo_input/study_tree_pairs.txt

# Snapshots of the NexSON are more efficient to produce in bulk (hence the export of the entire
# collection as a part of the concrete_rank_collection target
$(PROPINQUITY_OUT_DIR)/phylo_snapshot/git_shas.txt:
	@if ! test -d $(PROPINQUITY_OUT_DIR)/phylo_snapshot ; then mkdir -p $(PROPINQUITY_OUT_DIR)/phylo_snapshot ; fi
	./bin/shard_shas.sh > $(PROPINQUITY_OUT_DIR)/.tmp_git_shas.txt
	if ! diff $(PROPINQUITY_OUT_DIR)/phylo_snapshot/git_shas.txt $(PROPINQUITY_OUT_DIR)/.tmp_git_shas.txt >/dev/null 2>&1 ; then mv $(PROPINQUITY_OUT_DIR)/.tmp_git_shas.txt $(PROPINQUITY_OUT_DIR)/phylo_snapshot/git_shas.txt ; else rm $(PROPINQUITY_OUT_DIR)/.tmp_git_shas.txt ; fi


$(PROPINQUITY_OUT_DIR)/phylo_snapshot/collections_git_shas.txt:
	@if ! test -d $(PROPINQUITY_OUT_DIR)/phylo_snapshot ; then mkdir -p $(PROPINQUITY_OUT_DIR)/phylo_snapshot ; fi
	./bin/collections_shard_shas.sh > $(PROPINQUITY_OUT_DIR)/.tmp_collections_git_shas.txt
	if ! diff $(PROPINQUITY_OUT_DIR)/phylo_snapshot/git_shas.txt $(PROPINQUITY_OUT_DIR)/.tmp_collections_git_shas.txt >/dev/null 2>&1 ; then mv $(PROPINQUITY_OUT_DIR)/.tmp_collections_git_shas.txt $(PROPINQUITY_OUT_DIR)/phylo_snapshot/collections_git_shas.txt ; else rm $(PROPINQUITY_OUT_DIR)/.tmp_collections_git_shas.txt ; fi

$(PROPINQUITY_OUT_DIR)/phylo_snapshot/concrete_rank_collection.json: $(PROPINQUITY_OUT_DIR)/phylo_snapshot/git_shas.txt \
								     $(PROPINQUITY_OUT_DIR)/phylo_input/rank_collection.json
	@if ! test -d $(PROPINQUITY_OUT_DIR)/phylo_snapshot ; then mkdir -p $(PROPINQUITY_OUT_DIR)/phylo_snapshot ; fi
	$(PEYOTL_ROOT)/scripts/phylesystem/export_studies_from_collection.py \
	  --phylesystem-par=$(PHYLESYSTEM_ROOT)/shards \
	  --output-dir=$(PROPINQUITY_OUT_DIR)/phylo_snapshot \
	  $(PROPINQUITY_OUT_DIR)/phylo_input/rank_collection.json \
	  -v 2>&1 | tee $(PROPINQUITY_OUT_DIR)/phylo_snapshot/stdouterr.txt

$(PROPINQUITY_OUT_DIR)/cleaned_phylo/needs_updating.txt: $(PROPINQUITY_OUT_DIR)/phylo_input/study_tree_pairs.txt \
														 $(PROPINQUITY_OUT_DIR)/cleaned_ott/cleaning_flags.txt \
														 $(PROPINQUITY_OUT_DIR)/cleaned_ott/root_ott_id.txt
	@if ! test -d $(PROPINQUITY_OUT_DIR)/cleaned_phylo ; then mkdir -p $(PROPINQUITY_OUT_DIR)/cleaned_phylo ; fi
	if ! diff $(PROPINQUITY_OUT_DIR)/cleaned_ott/cleaning_flags.txt $(PROPINQUITY_OUT_DIR)/cleaned_phylo/cleaning_flags.txt >/dev/null 2>&1 && \
	   ! diff $(PROPINQUITY_OUT_DIR)/cleaned_ott/root_ott_id.txt $(PROPINQUITY_OUT_DIR)/cleaned_phylo/root_ott_id.txt >/dev/null 2>&1 ; \
	then \
		sed -e "s:\(.*\):$(PROPINQUITY_OUT_DIR)/phylo_snapshot/\1.json:" < $(PROPINQUITY_OUT_DIR)/phylo_input/study_tree_pairs.txt > $(PROPINQUITY_OUT_DIR)/cleaned_phylo/x ; \
		bin/convert-space-to-newline $(PROPINQUITY_OUT_DIR)/cleaned_phylo/x > $(PROPINQUITY_OUT_DIR)/cleaned_phylo/needs_updating.txt ;\
		rm -f $(PROPINQUITY_OUT_DIR)/cleaned_phylo/x ;\
	else \
		./bin/write-needs-updating $(PROPINQUITY_OUT_DIR)/cleaned_phylo $$(sed -e 's:\(.*\):phylo_snapshot/\1.json:' < $(PROPINQUITY_OUT_DIR)/phylo_input/study_tree_pairs.txt) > $(PROPINQUITY_OUT_DIR)/cleaned_phylo/needs_updating.txt ;\
	fi
	cp $(PROPINQUITY_OUT_DIR)/cleaned_ott/cleaning_flags.txt $(PROPINQUITY_OUT_DIR)/cleaned_phylo/cleaning_flags.txt
	cp $(PROPINQUITY_OUT_DIR)/cleaned_ott/root_ott_id.txt $(PROPINQUITY_OUT_DIR)/cleaned_phylo/root_ott_id.txt

# Could we make the cleaned_phylo/*.tre files depend on INDIVIDUAL phylo_snapshot/*.json files?
$(PROPINQUITY_OUT_DIR)/cleaned_phylo/phylo_inputs_cleaned.txt: $(PROPINQUITY_OUT_DIR)/cleaned_phylo/needs_updating.txt \
															   $(PROPINQUITY_OUT_DIR)/cleaned_ott/cleaning_flags.txt \
															   $(PROPINQUITY_OUT_DIR)/cleaned_ott/root_ott_id.txt \
															   $(PROPINQUITY_OUT_DIR)/phylo_snapshot/concrete_rank_collection.json \
															   $(OTT_FILEPATHS)
	@if ! test -d $(PROPINQUITY_OUT_DIR)/cleaned_phylo ; then mkdir -p $(PROPINQUITY_OUT_DIR)/cleaned_phylo ; fi
	cd $(PROPINQUITY_OUT_DIR) ; $(PEYOTL_ROOT)/scripts/nexson/prune_to_clean_mapped.py \
	  --ott-dir=$(OTT_DIR) \
	  --input-files-list=$(PROPINQUITY_OUT_DIR)/cleaned_phylo/needs_updating.txt \
	  --out-dir=$(PROPINQUITY_OUT_DIR)/cleaned_phylo \
	  --ott-prune-flags="$(shell cat $(PROPINQUITY_OUT_DIR)/cleaned_ott/cleaning_flags.txt)" \
	  --ott-prune-nonflagged-json=$(PROPINQUITY_OUT_DIR)/cleaned_ott/cleaned_ott_pruned_nonflagged.json \
	  --root="$(shell cat $(PROPINQUITY_OUT_DIR)/cleaned_ott/root_ott_id.txt)"
	touch $(PROPINQUITY_OUT_DIR)/cleaned_phylo/phylo_inputs_cleaned.txt

$(PROPINQUITY_OUT_DIR)/exemplified_phylo/args.txt : $(PROPINQUITY_OUT_DIR)/phylo_input/study_tree_pairs.txt
	@if ! test -d $(PROPINQUITY_OUT_DIR)/exemplified_phylo ; then mkdir -p $(PROPINQUITY_OUT_DIR)/exemplified_phylo ; fi
	sed -e "s:\(.*\):$(PROPINQUITY_OUT_DIR)/cleaned_phylo/\1.tre:" $(PROPINQUITY_OUT_DIR)/phylo_input/study_tree_pairs.txt > $(PROPINQUITY_OUT_DIR)/exemplified_phylo/args.txt

# Could we make the exemplified_phylo/*.tre files depend on INDIVIDUAL cleaned_phylo/*.tre files?
$(PROPINQUITY_OUT_DIR)/exemplified_phylo/nonempty_trees.txt : $(PROPINQUITY_OUT_DIR)/exemplified_phylo/args.txt \
															  $(PROPINQUITY_OUT_DIR)/cleaned_ott/cleaned_ott.tre \
															  $(PROPINQUITY_OUT_DIR)/cleaned_phylo/phylo_inputs_cleaned.txt
	@if ! test -d $(PROPINQUITY_OUT_DIR)/exemplified_phylo ; then mkdir -p $(PROPINQUITY_OUT_DIR)/exemplified_phylo ; fi
	cd $(PROPINQUITY_OUT_DIR) ; otc-nonterminals-to-exemplars \
	  -e$(PROPINQUITY_OUT_DIR)/exemplified_phylo \
	  $(PROPINQUITY_OUT_DIR)/cleaned_ott/cleaned_ott.tre \
	  -f$(PROPINQUITY_OUT_DIR)/exemplified_phylo/args.txt \
	  -j$(PROPINQUITY_OUT_DIR)/exemplified_phylo/exemplified_log.json \
	  -n$(PROPINQUITY_OUT_DIR)/exemplified_phylo/.nonempty_trees.txt && mv \
	  $(PROPINQUITY_OUT_DIR)/exemplified_phylo/.nonempty_trees.txt \
	  $(PROPINQUITY_OUT_DIR)/exemplified_phylo/nonempty_trees.txt

$(PROPINQUITY_OUT_DIR)/exemplified_phylo/taxonomy.tre: $(PROPINQUITY_OUT_DIR)/exemplified_phylo/nonempty_trees.txt

$(PROPINQUITY_OUT_DIR)/exemplified_phylo/pruned_taxonomy_degree_distribution.txt : $(PROPINQUITY_OUT_DIR)/exemplified_phylo/taxonomy.tre
	@if ! test -d $(PROPINQUITY_OUT_DIR)/exemplified_phylo ; then mkdir -p $(PROPINQUITY_OUT_DIR)/exemplified_phylo ; fi
	cd $(PROPINQUITY_OUT_DIR) ; otc-degree-distribution \
		$(PROPINQUITY_OUT_DIR)/exemplified_phylo/taxonomy.tre \
		> $(PROPINQUITY_OUT_DIR)/exemplified_phylo/pruned_taxonomy_degree_distribution.txt

$(PROPINQUITY_OUT_DIR)/phylo_induced_taxonomy/taxonomy.tre : $(PROPINQUITY_OUT_DIR)/exemplified_phylo/taxonomy.tre
	@if ! test -d $(PROPINQUITY_OUT_DIR)/phylo_induced_taxonomy ; then mkdir -p $(PROPINQUITY_OUT_DIR)/phylo_induced_taxonomy ; fi
	ln -s $(PROPINQUITY_OUT_DIR)/exemplified_phylo/taxonomy.tre $(PROPINQUITY_OUT_DIR)/phylo_induced_taxonomy/taxonomy.tre

# phylo_input holds the lists of study+tree pairs to be used during the supertree construction
$(PROPINQUITY_OUT_DIR)/phylo_input/collections.txt: $(CONFIG_FILENAME)
	@if ! test -d $(PROPINQUITY_OUT_DIR)/phylo_input ; then mkdir -p $(PROPINQUITY_OUT_DIR)/phylo_input ; fi
	bin/config_checker.py synthesis.collections $(CONFIG_FILENAME) > $(PROPINQUITY_OUT_DIR)/phylo_input/.raw_collections.txt
	if ! diff \
			$(PROPINQUITY_OUT_DIR)/phylo_input/collections.txt \
			$(PROPINQUITY_OUT_DIR)/phylo_input/.raw_collections.txt 2>/dev/null ; \
	then \
		mv $(PROPINQUITY_OUT_DIR)/phylo_input/.raw_collections.txt \
		$(PROPINQUITY_OUT_DIR)/phylo_input/collections.txt ; \
	else rm $(PROPINQUITY_OUT_DIR)/phylo_input/.raw_collections.txt ; \
	fi

$(PROPINQUITY_OUT_DIR)/phylo_input/rank_collection.json: $(PROPINQUITY_OUT_DIR)/phylo_input/collections.txt \
													     $(addsuffix .json, $(addprefix $(COLLECTIONS_ROOT)/shards/collections-1/collections-by-owner/, $(SYNTHESIS_COLLECTIONS)))
	@if ! test -d $(PROPINQUITY_OUT_DIR)/phylo_input ; then mkdir -p $(PROPINQUITY_OUT_DIR)/phylo_input ; fi
	bin/reaggregate-synth-collections.sh $(PROPINQUITY_OUT_DIR)/phylo_input/.raw_rank_collection.json
	if ! diff \
			$(PROPINQUITY_OUT_DIR)/phylo_input/rank_collection.json \
			$(PROPINQUITY_OUT_DIR)/phylo_input/.raw_rank_collection.json \
			2>/dev/null ; \
	then \
		mv $(PROPINQUITY_OUT_DIR)/phylo_input/.raw_rank_collection.json \
		   $(PROPINQUITY_OUT_DIR)/phylo_input/rank_collection.json ; \
	else \
		rm $(PROPINQUITY_OUT_DIR)/phylo_input/.raw_rank_collection.json ; \
	fi

from snakemake.utils import min_version
from snakemake.logging import logger
import subprocess
import sys
import os
from propinquity import validate_config, write_if_needed
import json
from peyutil import write_as_json


min_version("5.30.1")

CFG = validate_config(config, logger)
content = json.dumps(config, sort_keys=True, indent=2) + '\n'
write_if_needed(content=content, fp="config.json", CFG=CFG)

subworkflow s00_tool_config:
    workdir: CFG.out_dir
    snakefile: "rules/s00_tool_config.smk"
    configfile: "config.json"

subworkflow s01_snapshot:
    workdir: CFG.out_dir
    snakefile: "rules/s01_snapshot.smk"
    configfile: "config.json"

subworkflow s02_clean_ott:
    workdir: CFG.out_dir
    snakefile: "rules/s02_clean_ott.smk"
    configfile: "config.json"

subworkflow s03_clean_phylo:
    workdir: CFG.out_dir
    snakefile: "rules/s03_clean_phylo.smk"
    configfile: "config.json"

subworkflow s04_modify_taxonomy:
    workdir: CFG.out_dir
    snakefile: "rules/s04_modify_taxonomy.smk"
    configfile: "config.json"

subworkflow s05_exemplify:
    workdir: CFG.out_dir
    snakefile: "rules/s05_exemplify.smk"
    configfile: "config.json"

subworkflow s06_subproblems:
    workdir: CFG.out_dir
    snakefile: "rules/s06_subproblems.smk"
    configfile: "config.json"

rule all:
    input: s00_tool_config("config"), 
           s00_tool_config("otc-config"),
           s01_snapshot("phylo_input/blob_shas.txt"), 
           s02_clean_ott("cleaned_ott/cleaned_not_updated_ott.tre"),
           s03_clean_phylo("exemplified_phylo/args.txt"),
           s03_clean_phylo("cleaned_phylo/phylo_inputs_cleaned.txt"),
           s04_modify_taxonomy("bumped_ott/cleaned_ott.tre"),
           s05_exemplify("exemplified_phylo/nonempty_trees.txt"),
           s06_subproblems("subproblems/dumped_subproblem_ids.txt")

# # End Phylo cleaning
# ################################################################################

# rule exemplify:
#     input: "otc-config", \
#            args="exemplified_phylo/args.txt", \
#            cott="cleaned_ott/cleaned_ott.tre"
#     output: extaxa="exemplified_phylo/taxonomy.tre", \
#             nonempty="exemplified_phylo/nonempty_trees.txt", \
#             jsonout="exemplified_phylo/exemplified_log.json"
#     shell:
#         """otc-nonterminals-to-exemplars \
#             -e{out_dir}/exemplified_phylo {input.cott} -f{input.args} \
#             -j{output.jsonout} -n{output.nonempty}"""

# rule exemplify_for_regraft:
#     input: "otc-config", \
#            "phylo_snapshot/ps_shard_shas.txt", \
#            "phylo_snapshot/collections_shard_shas.txt", \
#            config="config", \
#            extaxa="exemplified_phylo/taxonomy.tre"
#     output: regott="exemplified_phylo/regraft_cleaned_ott.tre", \
#             regjson="exemplified_phylo/pruned_for_regraft_cleaned_ott.json"
#     shell:
#         """otc-regraft-taxonomy-generator \
#             --in-tree={input.extaxa} \
#             --config={input.config} \
#             {ott_dir} \
#             --json={output.regjson} \
#             >{output.regott}
#         """

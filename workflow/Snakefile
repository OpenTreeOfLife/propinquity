from snakemake.utils import min_version
from snakemake.logging import logger
import subprocess
import sys
import os
from propinquity import validate_config, write_if_needed
import json
from peyutil import write_as_json


min_version("5.30.1")

CFG = validate_config(config, logger)
content = json.dumps(config, sort_keys=True, indent=2) + '\n'
write_if_needed(content=content, fp="config.json")

subworkflow tool_config:
    workdir: CFG.out_dir
    snakefile: "rules/tool_config.smk"
    configfile: "config.json"

subworkflow snapshot:
    workdir: CFG.out_dir
    snakefile: "rules/snapshot.smk"
    configfile: "config.json"

subworkflow clean_ott:
    workdir: CFG.out_dir
    snakefile: "rules/clean_ott.smk"
    configfile: "config.json"

rule all:
    input: tool_config("config"), tool_config("otc-config"),
           snapshot("phylo_input/blob_shas.txt"), 
           clean_ott("cleaned_ott/cleaned_ott.tre")

# # End Phylo cleaning
# ################################################################################

# rule exemplify:
#     input: "otc-config", \
#            args="exemplified_phylo/args.txt", \
#            cott="cleaned_ott/cleaned_ott.tre"
#     output: extaxa="exemplified_phylo/taxonomy.tre", \
#             nonempty="exemplified_phylo/nonempty_trees.txt", \
#             jsonout="exemplified_phylo/exemplified_log.json"
#     shell:
#         """otc-nonterminals-to-exemplars \
#             -e{out_dir}/exemplified_phylo {input.cott} -f{input.args} \
#             -j{output.jsonout} -n{output.nonempty}"""

# rule exemplify_for_regraft:
#     input: "otc-config", \
#            "phylo_snapshot/ps_shard_shas.txt", \
#            "phylo_snapshot/collections_shard_shas.txt", \
#            config="config", \
#            extaxa="exemplified_phylo/taxonomy.tre"
#     output: regott="exemplified_phylo/regraft_cleaned_ott.tre", \
#             regjson="exemplified_phylo/pruned_for_regraft_cleaned_ott.json"
#     shell:
#         """otc-regraft-taxonomy-generator \
#             --in-tree={input.extaxa} \
#             --config={input.config} \
#             {ott_dir} \
#             --json={output.regjson} \
#             >{output.regott}
#         """

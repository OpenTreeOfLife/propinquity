# This Makefile contains the rules for generating the input NexSON files for the
#	the rest of the pipeline. It does not do any of the cleaning of inputs
# This Makefile fills the phylo_input and phylo_snapshot directories.
# If you are populating the phylo_snapshot without using the phylesystem to fill it 
#	with NexSON, the you'll want to move your $(PROPINQUITY_OUT_DIR)/phylo_snapshot/concrete_rank_collection.json
#	and the appropriate $(PROPINQUITY_OUT_DIR)/phylo_snapshot/*.json files into
#	place and then run the "fakephylesystem" target


ARTIFACTS += $(PROPINQUITY_OUT_DIR)/phylo_snapshot/git_shas.txt \
	$(PROPINQUITY_OUT_DIR)/phylo_snapshot/collections_git_shas.txt \
	$(PROPINQUITY_OUT_DIR)/phylo_snapshot/concrete_rank_collection.json \
	$(PROPINQUITY_OUT_DIR)/phylo_input/rank_collection.json \
	$(PROPINQUITY_OUT_DIR)/phylo_input/collections.txt

# use find + xargs for wildcard expansion to guard against arg list too long
cleanpre:
	rm -f $(PROPINQUITY_OUT_DIR)/phylo_snapshot/git_shas.txt
	rm -f $(PROPINQUITY_OUT_DIR)/phylo_snapshot/collections_git_shas.txt
	rm -f $(PROPINQUITY_OUT_DIR)/phylo_snapshot/stdouterr.txt
	rm -f $(PROPINQUITY_OUT_DIR)/phylo_input/collections.txt
	find $(PROPINQUITY_OUT_DIR)/phylo_snapshot/ -name "*.json" | xargs rm -f

# Used if you 
fakephylesystem:
	@if ! test -d $(PROPINQUITY_OUT_DIR)/phylo_input ; then mkdir -p $(PROPINQUITY_OUT_DIR)/phylo_input ; fi
	@if ! test -d $(PROPINQUITY_OUT_DIR)/phylo_snapshot ; then mkdir -p $(PROPINQUITY_OUT_DIR)/phylo_snapshot ; fi
	touch $(PROPINQUITY_OUT_DIR)/phylo_input/collections.txt
	touch $(PROPINQUITY_OUT_DIR)/phylo_input/rank_collection.json
	touch $(PROPINQUITY_OUT_DIR)/phylo_snapshot/git_shas.txt
	touch $(PROPINQUITY_OUT_DIR)/phylo_snapshot/collections_git_shas.txt
	touch $(PROPINQUITY_OUT_DIR)/phylo_snapshot/concrete_rank_collection.json

$(PROPINQUITY_OUT_DIR)/phylo_input/study_tree_pairs.txt: $(PROPINQUITY_OUT_DIR)/phylo_snapshot/concrete_rank_collection.json
	@if ! test -d $(PROPINQUITY_OUT_DIR)/phylo_input ; then mkdir -p $(PROPINQUITY_OUT_DIR)/phylo_input ; fi
	$(PEYOTL_ROOT)/scripts/collection_export.py \
		--export=studyID_treeID \
		$(PROPINQUITY_OUT_DIR)/phylo_snapshot/concrete_rank_collection.json \
		>$(PROPINQUITY_OUT_DIR)/phylo_input/study_tree_pairs.txt

# Snapshots of the NexSON are more efficient to produce in bulk (hence the export of the entire
# collection as a part of the concrete_rank_collection target
$(PROPINQUITY_OUT_DIR)/phylo_snapshot/git_shas.txt:
	@if ! test -d $(PROPINQUITY_OUT_DIR)/phylo_snapshot ; then mkdir -p $(PROPINQUITY_OUT_DIR)/phylo_snapshot ; fi
	./bin/shard_shas.sh > $(PROPINQUITY_OUT_DIR)/.tmp_git_shas.txt
	if ! diff $(PROPINQUITY_OUT_DIR)/phylo_snapshot/git_shas.txt $(PROPINQUITY_OUT_DIR)/.tmp_git_shas.txt >/dev/null 2>&1 ; then mv $(PROPINQUITY_OUT_DIR)/.tmp_git_shas.txt $(PROPINQUITY_OUT_DIR)/phylo_snapshot/git_shas.txt ; else rm $(PROPINQUITY_OUT_DIR)/.tmp_git_shas.txt ; fi


$(PROPINQUITY_OUT_DIR)/phylo_snapshot/collections_git_shas.txt:
	@if ! test -d $(PROPINQUITY_OUT_DIR)/phylo_snapshot ; then mkdir -p $(PROPINQUITY_OUT_DIR)/phylo_snapshot ; fi
	./bin/collections_shard_shas.sh > $(PROPINQUITY_OUT_DIR)/.tmp_collections_git_shas.txt
	if ! diff $(PROPINQUITY_OUT_DIR)/phylo_snapshot/git_shas.txt $(PROPINQUITY_OUT_DIR)/.tmp_collections_git_shas.txt >/dev/null 2>&1 ; then mv $(PROPINQUITY_OUT_DIR)/.tmp_collections_git_shas.txt $(PROPINQUITY_OUT_DIR)/phylo_snapshot/collections_git_shas.txt ; else rm $(PROPINQUITY_OUT_DIR)/.tmp_collections_git_shas.txt ; fi

$(PROPINQUITY_OUT_DIR)/phylo_snapshot/concrete_rank_collection.json: $(PROPINQUITY_OUT_DIR)/phylo_snapshot/git_shas.txt \
								     $(PROPINQUITY_OUT_DIR)/phylo_input/rank_collection.json
	@if ! test -d $(PROPINQUITY_OUT_DIR)/phylo_snapshot ; then mkdir -p $(PROPINQUITY_OUT_DIR)/phylo_snapshot ; fi
	$(PEYOTL_ROOT)/scripts/phylesystem/export_studies_from_collection.py \
	  --phylesystem-par=$(PHYLESYSTEM_ROOT)/shards \
	  --output-dir=$(PROPINQUITY_OUT_DIR)/phylo_snapshot \
	  $(PROPINQUITY_OUT_DIR)/phylo_input/rank_collection.json \
	  -v 2>&1 | tee $(PROPINQUITY_OUT_DIR)/phylo_snapshot/stdouterr.txt

# phylo_input holds the lists of study+tree pairs to be used during the supertree construction
$(PROPINQUITY_OUT_DIR)/phylo_input/collections.txt: $(CONFIG_FILENAME)
	@if ! test -d $(PROPINQUITY_OUT_DIR)/phylo_input ; then mkdir -p $(PROPINQUITY_OUT_DIR)/phylo_input ; fi
	bin/config_checker.py synthesis.collections $(CONFIG_FILENAME) > $(PROPINQUITY_OUT_DIR)/phylo_input/.raw_collections.txt
	if ! diff \
			$(PROPINQUITY_OUT_DIR)/phylo_input/collections.txt \
			$(PROPINQUITY_OUT_DIR)/phylo_input/.raw_collections.txt 2>/dev/null ; \
	then \
		mv $(PROPINQUITY_OUT_DIR)/phylo_input/.raw_collections.txt \
		$(PROPINQUITY_OUT_DIR)/phylo_input/collections.txt ; \
	else rm $(PROPINQUITY_OUT_DIR)/phylo_input/.raw_collections.txt ; \
	fi

$(PROPINQUITY_OUT_DIR)/phylo_input/rank_collection.json: $(PROPINQUITY_OUT_DIR)/phylo_input/collections.txt \
													     $(addsuffix .json, $(addprefix $(COLLECTIONS_ROOT)/shards/collections-1/collections-by-owner/, $(SYNTHESIS_COLLECTIONS)))
	@if ! test -d $(PROPINQUITY_OUT_DIR)/phylo_input ; then mkdir -p $(PROPINQUITY_OUT_DIR)/phylo_input ; fi
	bin/reaggregate-synth-collections.sh $(PROPINQUITY_OUT_DIR)/phylo_input/.raw_rank_collection.json
	if ! diff \
			$(PROPINQUITY_OUT_DIR)/phylo_input/rank_collection.json \
			$(PROPINQUITY_OUT_DIR)/phylo_input/.raw_rank_collection.json \
			2>/dev/null ; \
	then \
		mv $(PROPINQUITY_OUT_DIR)/phylo_input/.raw_rank_collection.json \
		   $(PROPINQUITY_OUT_DIR)/phylo_input/rank_collection.json ; \
	else \
		rm $(PROPINQUITY_OUT_DIR)/phylo_input/.raw_rank_collection.json ; \
	fi

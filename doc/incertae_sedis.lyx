#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\sloppy
%\setlength{\parskip}{6pt}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine natbib
\cite_engine_type authoryear
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip 6pt
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\taxonomy}{\mbox{\mathbb{T}}}
{\mbox{\mathbb{T}}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\prunedTaxonomy}{\taxonomy_{P}}
{\taxonomy_{P}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\phyloinputs}{\mathcal{T}}
{\mathcal{T}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\expandedPhylo}{\phyloinputs_{E}}
{\phyloinputs_{E}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\summaryTree}{\mathbb{S}}
{\mathbb{S}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\prunedSummary}{\summaryTree_{P}}
{\summaryTree_{P}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\collections}{\mathcal{C}}
{\mathcal{C}}
\end_inset


\end_layout

\begin_layout Title

\family typewriter
Handling 
\emph on
incertae sedis
\emph default
 taxa in propinquity
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
The phrase “
\emph on
incertae sedis
\emph default
”, which is a Latin phrase meaning 
\begin_inset Quotes eld
\end_inset

uncertain seat
\begin_inset Quotes erd
\end_inset

, is used in classifications to indicate that a group is of uncertain taxonomic
 placement.
 Such groups arise in practice when they are classified within a parent
 group, such as Fungi, but the precise location within the parent group
 is uncertain.
 Such a taxon would then be attached as a child of the parent group, but
 labeled as 
\emph on
incertae sedis
\emph default

\begin_inset Quotes erd
\end_inset

.
 
\end_layout

\begin_layout Standard
Currently 
\emph on
incertae sedis
\emph default
 taxa and their descendants are excluded from the OpenTree synthetic tree.
 This is problematic, because the OpenTree project seeks to build a comprehensiv
e tree covering all of life.
 However, including unplaced taxa within the current synthesis framework
 would be equally problematic, since placement of taxa within groups is
 currently considered to be a conflict with those groups.
 This conflict causes both a loss of the taxon name for the conflicting
 taxon, and a loss of structure in the synthesis tree.
 
\end_layout

\begin_layout Subsection
Some examples in OTT
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
This paragraph pulled from intro to otcetera/doc/handling-incertae-sedis.pdf
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The problem is becoming more acute because NCBI is putting a larger number
 of taxa into groups that are marked as “unclassified.” For example, when
 OTT 2.9 was created NCBI’s clasification of the bird family Sylvidae included
 a group five genera that were placed within “
\begin_inset CommandInset href
LatexCommand href
name "unclassified Sylviidae"
target "http://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?mode=Undef&id=36270&lvl=3&lin=f&keep=1&srchmode=1&unlock"

\end_inset

.” This includes the genus Regulus.
 Thus in OTT 2.9 Regulus (ott ID = 3599326) is placed inside the family Silvidae
 (OTT ID = 259942).
 The “unclassified Sylviidae” does not appear in OTT; instead Regulus is
 flagged as “unclassified,sibling higher” and all of the species within
 Regulus are flagged as “unclassified inherited.”
\end_layout

\begin_layout Standard
The taxonomy (as of version 2.9) also contains 685 cases of taxa that are
 flagged as both “unclassified inherited” and “unclassified”
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
based on 
\family typewriter
grep unclass.*unclassified
\backslash
_inherited taxonomy.tsv
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
We would like to stop suppressing (pruning) incertae sedis taxa, so that
 groups such as Regulus can appear appear in the synthetic tree.
\end_layout

\begin_layout Subsection
Handling incertae sedis taxa
\end_layout

\begin_layout Standard
To solve this problem, we describe an extension of our previous supertree
 synthesis procedure that can use phylogeny information to place 
\emph on
incertae sedis
\emph default
 taxa into containing taxa without considering the containing taxa to be
 broken.
 This extension requires that we first describe an extended semantics for
 taxa in the presences of 
\emph on
incertae sedis
\emph default
, which is not a trivial problem.
 We describe both an updated semantics for conflict with taxonomy edges,
 and an updated semantics for assigning taxonomy names to nodes in the synthetic
 tree.
 
\end_layout

\begin_layout Standard
The ability to place taxa within the taxonomy without breaking their containing
 taxa enables us to include thousands of new taxa that were previously filtered
 out to avoid broken taxa.
 It also enables us to use phylogenetic trees to update the taxonomy by
 extending taxa to include 
\emph on
incertae sedis
\emph default
 taxa placed within them.
 This makes substantial progress towards our goal of complete representation
 of taxa.
 It also enables us to include extinct taxa, since many of these taxa are
 incertae sedis.
\end_layout

\begin_layout Subsection
Incertae sedis taxa in taxonomies
\end_layout

\begin_layout Standard

\series bold
Flags.

\series default
 The Open Tree’s reference taxonomy is produced by a tool called smasher
 that notices hints that a taxon is incertae sedis and labels that taxon
 with one of five flags
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
see 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://github.com/OpenTreeOfLife/reference-taxonomy/wiki/Taxon-flags
\end_layout

\end_inset

.This document is not concerned with the flagging system 
\emph on
per se
\emph default
, so “
\emph on
incertae sedis
\emph default
” will be used here to refer to all of the flags that denote taxa with uncertain
 placement.
\end_layout

\end_inset

.
 While a taxonomist may intend to use incertae sedis to indicate a limited
 number of possible positions for a taxon to go in the taxonomy, we do not
 retain any such details.
\end_layout

\begin_layout Standard

\series bold
Container nodes.

\series default
 Some taxonomies have nodes with names like 
\begin_inset Quotes eld
\end_inset

Incertae sedis (Bacteria)
\begin_inset Quotes erd
\end_inset

.
 Such nodes are called containers.
 They indicate that each child node is an 
\emph on
incertae sedis
\emph default
 child of the container node's parent.
 The OTT retains container nodes with the 
\emph on
was_container
\emph default
 flag, but seems to have already moved all of the container's children to
 the container's parent.
\end_layout

\begin_layout Standard

\series bold
Taxonomy merging.

\series default
 Not all 
\emph on
incertae sedis
\emph default
 taxa in our taxonomy are directly labeled 
\emph on
incertae sedis
\emph default
 by taxonomists.
 
\emph on
Incertae sedis
\emph default
 taxa can also result from automatic merging of taxonomies to create the
 OpenTree taxonomy.
 For example, in Figure 3 of 
\begin_inset CommandInset citation
LatexCommand citet
key "rees2017automated"

\end_inset

, cases #4 and #6 illustrate examples where merging of two taxonomies leads
 to a taxonomy with a taxon of uncertain placement.
 The reason is primarily that if taxonomy 
\begin_inset Formula $\taxonomy_{1}$
\end_inset

 contains more levels of hierarchy than taxonomy 
\begin_inset Formula $\taxonomy_{2}$
\end_inset

, then we must add internal nodes to 
\begin_inset Formula $\taxonomy_{2}$
\end_inset

 to align it to 
\begin_inset Formula $\taxonomy_{1}$
\end_inset

.
 However, if taxonomy 
\begin_inset Formula $\taxonomy_{2}$
\end_inset

 contains more leaves than 
\begin_inset Formula $\taxonomy_{1}$
\end_inset

, then it is unclear if these extra leaves should be nested inside the additiona
l internal nodes, or not.
 Thus, the extra leaves are marked 
\emph on
incertae sedis
\emph default
.
\end_layout

\begin_layout Standard
For example, if 
\begin_inset Formula $\taxonomy_{1}=((a,b)x,(c,d)y)z$
\end_inset

 and 
\begin_inset Formula $\taxonomy_{2}=(a,b,c,d,e)z$
\end_inset

 then 
\begin_inset Formula $a$
\end_inset

 and 
\begin_inset Formula $b$
\end_inset

 in 
\begin_inset Formula $\taxonomy_{2}$
\end_inset

 should be nested within 
\begin_inset Formula $x$
\end_inset

, but we do not know if 
\begin_inset Formula $e$
\end_inset

 should be nested within 
\begin_inset Formula $x$
\end_inset

 or not.
 Thus we obtain 
\begin_inset Formula $((a,b)x,(c,d)y,?e)z$
\end_inset

, where 
\begin_inset Formula $?$
\end_inset

 indicates that taxon 
\begin_inset Formula $e$
\end_inset

 is marked 
\emph on
incertae sedis
\emph default
.
\end_layout

\begin_layout Subsection
Formalism
\end_layout

\begin_layout Standard
We consider a ranked collection 
\begin_inset Formula $\phyloinputs=\left\{ T_{1},\ldots,T_{n}\right\} $
\end_inset

 of input trees and a single taxonomy tree 
\begin_inset Formula $\taxonomy$
\end_inset

.
 We have a set of labels 
\begin_inset Formula $\mathcal{L}$
\end_inset

 that correspond to taxon names.
 Therefore taxonomy node has a label, and every label correspond to a unique
 taxonomy node.
\end_layout

\begin_layout Standard
In contrast, input phylogenies only have labels on their leaf nodes.
 Furthermore, and the set of labels 
\begin_inset Formula $\mathcal{L}(i)$
\end_inset

 on input tree 
\begin_inset Formula $T_{i}$
\end_inset

 need not include all leaf labels, and in practice always contains only
 a relatively small part of 
\begin_inset Formula $\mathcal{L}$
\end_inset

.
\end_layout

\begin_layout Standard
We extend this framework by adding a set 
\begin_inset Formula $\mathcal{I}\subseteq\mathcal{L}$
\end_inset

 of labels that have the 
\emph on
incertae sedis 
\emph default
property.
 The taxonomy consists of the labels 
\begin_inset Formula $\mathcal{L}$
\end_inset

, the taxonomy tree 
\begin_inset Formula $\taxonomy$
\end_inset

, and the 
\emph on
incertae sedis
\emph default
 property 
\begin_inset Formula $\mathcal{I}$
\end_inset

 of taxon names.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Semantics-of-incertae"

\end_inset

Semantics of 
\emph on
incertae sedis
\emph default
 taxa
\end_layout

\begin_layout Standard
Incertae sedis taxa affect the synthesis procedure in two ways: they affect
 what it means for a taxonomy edge to conflict with the synthesis tree,
 and they affect what it means to place a taxon name on a particular node
 in the synthesis tree.
 We examine each of these effects in turn.
\end_layout

\begin_layout Subsection
Splits
\end_layout

\begin_layout Standard
Each edge of a standard tree divides the tip taxa 
\begin_inset Formula $\mathcal{L}$
\end_inset

 into two groups: the include set 
\begin_inset Formula $\mathcal{I}(e)$
\end_inset

 which does not contain the root, and the exclude set 
\begin_inset Formula $\mathcal{E}(e)$
\end_inset

 which does contain the root.
 Such a split may be written
\begin_inset Formula 
\[
\mathcal{I}(e)|\bullet\mathcal{E}(e),
\]

\end_inset

with the exclude set always on the right.
 If no taxa are 
\emph on
incertae sedis
\emph default
, then the exclude set for a node is just the total tip set minus the include
 set for the node:
\begin_inset Formula 
\begin{align*}
\mathcal{E}(n) & =\mathcal{L}-\mathcal{I}(n).
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
For a node 
\begin_inset Formula $n$
\end_inset

 on the tipward side of an edge 
\begin_inset Formula $e$
\end_inset

, we may also write 
\begin_inset Formula $\mathcal{I}(n)$
\end_inset

 for 
\begin_inset Formula $\mathcal{I}(e)$
\end_inset

, and 
\begin_inset Formula $\mathcal{E}(n)$
\end_inset

 for 
\begin_inset Formula $\mathcal{E}(e)$
\end_inset

.
 We consider the exclude set of the root node to be empty, and the include
 set of the root node to contain all tip taxa:
\begin_inset Formula 
\begin{align*}
\mathcal{E}(root) & =\{\}\\
\mathcal{I}(root) & =\mathcal{L}.
\end{align*}

\end_inset

In this case the root node stands for an edge that connects the root to
 the root's parent.
\end_layout

\begin_layout Subsubsection
Reduced exclude sets for 
\emph on
incertae sedis
\emph default
 taxa
\end_layout

\begin_layout Standard
Marking a taxon as 
\emph on
incertae sedis
\emph default
 changes the meaning of its sibling taxa.
 Since the 
\emph on
incertae sedis
\emph default
 taxon can be placed inside its sibling subtrees, the exclude sets of the
 sibling subtrees should not include the 
\emph on
incertae sedis 
\emph default
taxon.
 Although exclude sets of sibling taxa are shrunk, the include sets of the
 sibling taxa are unaffected.
\end_layout

\begin_layout Standard
An 
\emph on
incertae sedis
\emph default
 taxon can be moved into any of the descendants of its siblings.
 Therefore, the exclude 
\begin_inset Formula $\mathcal{E}(n)$
\end_inset

 set for a node 
\begin_inset Formula $n$
\end_inset

 contains the children of all the ancestors of 
\begin_inset Formula $n$
\end_inset

, unless those children are incertae sedis.
 We can compute exclude sets recursively by writing the exclude set of a
 node 
\begin_inset Formula $n$
\end_inset

 in terms of the exclude set of its parent.
 If we use the terminology that the include and exclude sets for a node
 
\begin_inset Formula $n$
\end_inset

 are 
\begin_inset Formula $\mathcal{I}(n)$
\end_inset

 and 
\begin_inset Formula $\mathcal{E}(n)$
\end_inset

, then we have 
\begin_inset Formula 
\begin{align}
\mathcal{E}(n) & =\mathcal{E}(parent(n))\cup\left[\mathcal{I}(m)\big|m\in siblings(n),m\text{ not \emph{incertae} \emph{sedis}}\right],\label{eq:exclude-set-formula}
\end{align}

\end_inset

This leads to a pre-order recursion that terminates if the exclude set for
 the root note is set to 
\begin_inset Formula $\{\}$
\end_inset

 as a boundary condition.
\end_layout

\begin_layout Subsubsection
Alternative formulation
\end_layout

\begin_layout Standard
Consider an I.S.
 clade 
\begin_inset Formula $A$
\end_inset

 that is more rootward than an I.S.
 clade 
\begin_inset Formula $B$
\end_inset

.
 With the above formulation, we could not place 
\begin_inset Formula $A$
\end_inset

 as sister to 
\begin_inset Formula $B$
\end_inset

 and then place 
\begin_inset Formula $B$
\end_inset

 within 
\begin_inset Formula $A$
\end_inset

, because 
\begin_inset Formula $A$
\end_inset

 excludes 
\begin_inset Formula $B$
\end_inset

.
 To solve this problem, we could modify formula (
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:exclude-set-formula"

\end_inset

) above to avoid excluding 
\family typewriter
incertae_sedis_inherited
\family default
 tips of a sister taxon 
\begin_inset Formula $m$
\end_inset

.
 Thus, we could modify formula (
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:exclude-set-formula"

\end_inset

) to refer to 
\begin_inset Formula $\mathcal{I}^{\prime}(m)$
\end_inset

 instead of 
\begin_inset Formula $\mathcal{I}(m)$
\end_inset

, where 
\begin_inset Formula 
\begin{align*}
\mathcal{I}^{\prime}(m) & =\begin{cases}
m & \text{if }m\text{ is a leaf}\\
\left[\mathcal{I}^{\prime}(c)\big|c\in children(m),c\text{ not \emph{incertae sedis}}\right] & \text{otherwise.}
\end{cases}
\end{align*}

\end_inset

This would not rule out placing 
\begin_inset Formula $B$
\end_inset

 as sister to 
\begin_inset Formula $A$
\end_inset

 and then placing 
\begin_inset Formula $A$
\end_inset

 within 
\begin_inset Formula $B$
\end_inset

.
\end_layout

\begin_layout Subsection
Naming 
\end_layout

\begin_layout Standard
After solving a supertree (sub) problem, we need to assign taxon names to
 the supertree nodes based on the taxonomy tree in the problem.
 Each taxon name 
\begin_inset Formula $n$
\end_inset

 corresponds to a split 
\begin_inset Formula $S(n)=S(n)_{1}|S(n)_{2}$
\end_inset

 on the corresponding branch of the taxonomy tree.
 Without 
\emph on
incertae sedis
\emph default
, such splits are always of the form 
\begin_inset Formula $S(n)_{1}|\mathcal{L}-S(n)_{1}$
\end_inset

, but with 
\emph on
incertae sedis
\emph default
 taxa 
\begin_inset Formula $S_{2}(n)$
\end_inset

 may be smaller than 
\begin_inset Formula $\mathcal{L}-S(n)_{1}$
\end_inset

.
\end_layout

\begin_layout Standard
Without 
\emph on
incertae sedis
\emph default
, each name applies to at most one node, and each node can take at most
 one name, with the exception of monotypic taxa.
 Thus, we may simply search the solution tree for a node that has the same
 cluster 
\begin_inset Formula $S(n)_{1}$
\end_inset

 and apply the name 
\begin_inset Formula $n$
\end_inset

 to that node.
\end_layout

\begin_layout Standard
However, in the 
\emph on
incertae sedis 
\emph default
framework we must raise the question of whether one name could apply to
 multiple nodes, or whether multiple names could apply to one node.
 
\end_layout

\begin_layout Standard

\series bold
BDR:
\series default
 
\emph on
It is well known that monotypic taxa are indistinguishable if you consider
 only splits on leaf labels, but are distinguishable if you consider splits
 on all node labels.
 It seems that some (all?) of the problems with assigning multiple names
 to the same nodes actually comes from the fact that moving IS taxa can
 leave the parent as a degree-2 node.
 The fact that propinquity handles monotypic taxa indicates that we actually
 implicitly consider all taxa to have labels.
 It is possible that a trivial extension to the sub-problem solved could
 thus handle monotypic taxa and issues with mapping 2 names to one node
 with incertae sedis taxa.
\end_layout

\begin_layout Subsubsection
Multiple nodes that fit one name
\end_layout

\begin_layout Standard
Suppose the taxonomy is (((A1,A2)A,B)AB,C,D*) and the solution tree is (((A1,A2)
x,D*)y,B)AB,C).
 In this case the name 
\begin_inset Formula $A$
\end_inset

 leads to the split S(A) = A1 A2 | B C root.
 This name can apply to both the node x and the node y.
\end_layout

\begin_layout Standard

\series bold
Solution:
\series default
 In this case, we find the most tipward node and attach the name to this
 node.
\end_layout

\begin_layout Subsubsection
Multiple names fit a single node
\end_layout

\begin_layout Paragraph
Example 1
\end_layout

\begin_layout Standard
Suppose the taxonomy is (((B1,B2)B,C*)A,Y) and the input tree is (((B1,C),B2)x,Y
) then the names A and B both to the node x.
 In this case the names A and B are ordered.
\end_layout

\begin_layout Standard

\series bold
Case 1:
\series default
 If a taxon contains 2 non-IS taxa, then it cannot be identical with any
 of its children in the synthesis tree.
\end_layout

\begin_layout Standard

\series bold
Case 2:
\series default
 If a taxon contains 1 non-IS taxon and 
\begin_inset Formula $\ge1$
\end_inset

 IS taxa, then the taxon could be identical with is non-IS child in the
 synthesis tree, if the IS taxa are placed within the child.
\end_layout

\begin_layout Standard

\series bold
Case 3:
\series default
 If a node contains 0 non-IS taxa and 1 IS taxon, then the IS taxa behaves
 no differently than a non-IS taxa, since is has no siblings it could be
 placed into.
\end_layout

\begin_layout Standard

\series bold
Case 4:
\series default
 If a node contains 0 non-IS taxa and 
\begin_inset Formula $\ge2$
\end_inset

 IS taxa, then then taxon 
\emph on
could
\emph default
 be identical with a non-IS child in the synthesis tree, if all but one
 IS children are placed with in one of the IS children.
\end_layout

\begin_layout Standard

\series bold
Solution:
\series default
 When we assign multiple names to the same node, then we expand the node
 with multiple names to have monotypic parents, and assign the series of
 names to the monotypic parents.
 Another way of saying this is that when a node has 
\begin_inset Formula $\le1$
\end_inset

 non-IS taxon and 
\begin_inset Formula $\ge2$
\end_inset

 taxa then the node could become monotypic by placement of the IS taxa.
\end_layout

\begin_layout Standard

\series bold
Example 2
\end_layout

\begin_layout Standard
If ((A1,A2)A,(B1,B2)B*,(C1,C2)C*); is the taxonomy with asterisks denoting
 incertae sedis taxa, then the solution ((A1,A2)A,((B1,C1)mrcaB1C1,(B2,C2)mrcaB2
C2)x); has a node x that could be called B* or C*.
\end_layout

\begin_layout Standard

\series bold
Case:
\series default
 If a taxa B* and C* are IS, then their tips can be intermingled in a new
 clade x.
 Both names would then apply.
\end_layout

\begin_layout Standard

\series bold
Solution:
\series default
 ??
\end_layout

\begin_layout Standard
In summary, a taxon with split 
\begin_inset Formula $A_{1}|\bullet B_{1}$
\end_inset

 attaches to the most tipward node 
\begin_inset Formula $n$
\end_inset

 where 
\begin_inset Formula $A_{1}\subseteq S_{1}(n)$
\end_inset

 and 
\begin_inset Formula $B_{1}\subseteq S_{2}(n)$
\end_inset

.
 If multiple names end up on the same node, we try to resolve the problem
 by creating a monotypic node for a name that is more rootward than all
 other names at that node.
 If this fails to resolve the problem, we arbitrarily choose one of the
 names.
 
\end_layout

\begin_layout Section
Synthesis and conflict resolution with incertae sedis taxa
\end_layout

\begin_layout Subsection
Placement causes broken taxa
\end_layout

\begin_layout Standard
Synthesis with 
\emph on
incertae sedis
\emph default
 taxa has the potential to resolve uncertain taxon placements using information
 from phylogenies.
 The propinquity pipeline has always been able to do this kind of resolution.
 However, without special consideration given to 
\emph on
naming
\emph default
, placing a taxon 
\begin_inset Formula $A$
\end_inset

 within a taxon 
\begin_inset Formula $B$
\end_inset

 results in conflict with taxon 
\begin_inset Formula $B$
\end_inset

 in the taxonomy.
 In order to avoid a situation where input phylogenies conflict with a large
 number of taxa when 
\emph on
incertae sedis
\emph default
 taxa are placed within them, we have filtered 
\emph on
incertae sedis
\emph default
 taxa from the taxonomy when constructing all prior synthesis trees.
\end_layout

\begin_layout Standard
When the synthesis tree conflicts with a taxonomy node, we way that the
 taxon 
\begin_inset Formula $B$
\end_inset

 at that node is a broken taxon.
 Broken taxa have two main effects, both of which are negative.
 First, the name 
\begin_inset Formula $B$
\end_inset

 of the broken taxon is removed from the synthesis tree.
 Second, the conflicting edge for taxon 
\begin_inset Formula $B$
\end_inset

 is not included in the synthesis tree.
 This means that any children of 
\begin_inset Formula $B$
\end_inset

 that are taxonomy-only will not be placed with the children of 
\begin_inset Formula $B$
\end_inset

 that are mentioned in input phylogenies.
 Instead the taxonomy-only children of a broken taxon move towards the root
 of the synthesis tree and attach at the first higher-ranked taxon that
 is an ancestor of 
\begin_inset Formula $B$
\end_inset

 but is not broken.
\end_layout

\begin_layout Subsection
Correctly handling placement
\end_layout

\begin_layout Standard
Thus, we seek a synthesis method that can correctly place taxa within containing
 taxa without breaking the containing taxa.
 We change the semantics of names to imply, not the exclusion of all non-include
d taxa, but only some non-included taxa, as described in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Semantics-of-incertae"

\end_inset

.
 As a result of this change in semantics, placing an IS taxon 
\begin_inset Formula $A$
\end_inset

 within a sister taxon 
\begin_inset Formula $B$
\end_inset

 no longer results in conflict with 
\begin_inset Formula $B$
\end_inset

.
 This allows us to retain the split for 
\begin_inset Formula $B$
\end_inset

 within the synthesis tree, so that taxonomy-only children of 
\begin_inset Formula $B$
\end_inset

 are correctly grouped with their siblings that are referenced by the input
 trees.
 We may then retain the name for the no-longer-broken taxon.
 Finally, we are then able to stop filtering 
\emph on
incertae sedis
\emph default
 taxa, so that they appear in the synthesis tree.
 Thus, the synthesis tree is able to represent substantially more species,
 without suffering the loss of taxa and the loss of structure.
\end_layout

\begin_layout Subsection
Conflict with incertae sedis taxa
\end_layout

\begin_layout Subsubsection
Conflicting placement among input trees
\end_layout

\begin_layout Standard
The addition of 
\emph on
incertae sedis
\emph default
 taxa allows new types of conflict between input trees.
 For example, different input trees might place an incertae sedis taxon
 in conflicting locations.
 This is illustrated in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:placement-example1"

\end_inset

, where the IS taxon (ott7,ott6)ott10 is placed as sister to ott1 by phylogeny
 
\begin_inset Formula $\tau_{1}$
\end_inset

 and as sister ott3 by phylogeny 
\begin_inset Formula $\tau_{2}$
\end_inset

.
 
\end_layout

\begin_layout Standard
When this happens, the placement of the IS taxon is not influenced by its
 being marked IS on the taxonomy.
 Thus, in Example 1, the higher ranked tree 
\begin_inset Formula $\tau_{1}$
\end_inset

 will be reflected in the synthesis tree, ott10 will be placed as sister
 to ott1.
 In contrast, the conflicting placement in 
\begin_inset Formula $\tau_{2}$
\end_inset

 will not be reflected in the synth tree.
 
\end_layout

\begin_layout Standard
All this would occur in the previous version of propinquity.
 Where the updated version differs that (a) the names ott9 and ott8 are
 retained instead of being dropped.
 (b) as a result of not breaking ott8 and ott9, we do not move ott3 and
 ott2 up to ott11.
 [BDR: Extend more figures!]
\end_layout

\begin_layout Subsubsection
Example B
\end_layout

\begin_layout Standard
However, incertae sedis taxa are not always tip nodes, but may themselves
 contain other taxa.
 In such cases, it is possible for input trees to conflict with the incertae
 sedis taxon itself.
 For example, consider the following example
\end_layout

\begin_layout Itemize
\begin_inset Formula $T_{1}=((w_{1},w_{2},z_{1}),y_{1})$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $T_{2}=((y_{1},y_{2},z_{2}),w_{1})$
\end_inset


\end_layout

\begin_layout Itemize
Taxonomy tree 
\begin_inset Formula $((w_{1},w_{2})w,(y_{1},y_{2})y,(z_{1},z_{2},z_{3})z)$
\end_inset

 with 
\begin_inset Formula $z$
\end_inset

 marked 
\emph on
incertae sedis
\emph default
.
\end_layout

\begin_deeper
\begin_layout Itemize
splits 
\begin_inset Formula $w_{1}w_{2}|\bullet y_{1}y_{2}$
\end_inset

, 
\begin_inset Formula $y_{1}y_{2}|\bullet w_{1}w_{2}$
\end_inset

 and 
\begin_inset Formula $z_{1}z_{2}|\bullet w_{1}w_{2}y_{1}y_{2}$
\end_inset


\end_layout

\end_deeper
\begin_layout Standard
In this case, tree 
\begin_inset Formula $T_{1}$
\end_inset

 places 
\begin_inset Formula $z_{1}$
\end_inset

 within 
\begin_inset Formula $w$
\end_inset

, while 
\begin_inset Formula $T_{2}$
\end_inset

 places 
\begin_inset Formula $z_{2}$
\end_inset

 within 
\begin_inset Formula $y$
\end_inset

.
 Since different members of 
\begin_inset Formula $z$
\end_inset

 are placed, neither placement for 
\begin_inset Formula $z$
\end_inset

 is rejected.
 Instead the taxon 
\begin_inset Formula $z$
\end_inset

 is broken, the name 
\begin_inset Formula $z$
\end_inset

 disappears, and 
\begin_inset Formula $z_{3}$
\end_inset

 floats to the top level.
 
\end_layout

\begin_layout Standard
Furthermore, since taxon 
\begin_inset Formula $z$
\end_inset

 is a broken 
\emph on
incertae sedis 
\emph default
taxon, all of its children are effectively incertae sedis independently,
 with the difference that they cannot be placed within each other.
 Therefore, the names 
\begin_inset Formula $w$
\end_inset

 and 
\begin_inset Formula $y$
\end_inset

 are not lost, since the taxa placed within them are 
\emph on
incertae sedis
\emph default
 names.
 Note that 
\begin_inset Formula $z_{3}$
\end_inset

 maybe therefore be placed in a third location, since it is also 
\emph on
incertae sedis
\emph default
.
\end_layout

\begin_layout Standard
The situation here would be different if the monophyly of 
\begin_inset Formula $z$
\end_inset

 was supported by an input phylogeny.
\end_layout

\begin_layout Standard

\emph on
Note that the synthesis of all input trees before the taxonomy is unaffected
 by incertae sedis information.
\end_layout

\begin_layout Subsubsection
Example C - Nested 
\emph on
incertae sedis
\emph default
 taxa
\end_layout

\begin_layout Standard
In addition to incertae sedis taxa containing other taxa, it is also possible
 for incertae sedis taxa to contain nested 
\emph on
incertae sedis
\emph default
 taxa.
 
\series bold
What issues might this raise?
\end_layout

\begin_layout Subsection
Placement
\end_layout

\begin_layout Standard
After a synthesis tree is constructed, we attach taxon names for to the
 synthesis tree for each non-conflicting taxon.
 These names attach at the MRCA of the include group.
 Then, for each taxon 
\begin_inset Formula $A$
\end_inset

 on the synth tree, we associate with the first taxon 
\begin_inset Formula $B$
\end_inset

 found in a rootward walk on the synthesis tree.
 If 
\begin_inset Formula $A$
\end_inset

 is not a descendant of 
\begin_inset Formula $B$
\end_inset

 on the taxonomy, then we say that 
\begin_inset Formula $A$
\end_inset

 is 
\emph on
placed
\emph default
 within 
\begin_inset Formula $B$
\end_inset

 by the synthesis tree.
 While this may occur if 
\begin_inset Formula $A$
\end_inset

 is 
\emph on
incertae sedis
\emph default
, more complex scenarios are possible.
 We note that if method does not handle 
\emph on
incertae sedis
\emph default
 taxa, then this scenario could not occur because any taxa 
\begin_inset Formula $B$
\end_inset

 that 
\begin_inset Formula $A$
\end_inset

 is placed within would be considered incompatible with the synthesis tree
 and so their names would not be applied.
\end_layout

\begin_layout Standard
In order to fully describe a placement of 
\begin_inset Formula $A$
\end_inset

 within 
\begin_inset Formula $B$
\end_inset

 we consider the sequence of taxa encountered on a walk from 
\begin_inset Formula $A$
\end_inset

 or 
\begin_inset Formula $B$
\end_inset

 up to their MRCA 
\begin_inset Formula $M$
\end_inset

 on the taxonomy tree.
 Let us denote the sequence of taxa encountered from 
\begin_inset Formula $A$
\end_inset

 as 
\begin_inset Formula $A_{1},\ldots,A_{n},M$
\end_inset

 where 
\begin_inset Formula $A_{1}=A$
\end_inset

.
 Let 
\begin_inset Formula $B_{1},\ldots,B_{m},M$
\end_inset

 be the sequence of taxa encountered from 
\begin_inset Formula $B$
\end_inset

 where 
\begin_inset Formula $B_{1}=B$
\end_inset

.
 Then 
\begin_inset Formula $A_{n}$
\end_inset

 must be 
\emph on
incertae sedis
\emph default
, and 
\begin_inset Formula $A_{2},\ldots,A_{n}$
\end_inset

 must be incompatible with the synthesis tree (i.e.
 broken taxa).
 We then have that 
\begin_inset Formula $A$
\end_inset

 is placed successively within 
\begin_inset Formula $B_{m},B_{m-1},\ldots,B_{2},B_{1}$
\end_inset

, and 
\begin_inset Formula $m$
\end_inset

 is the depth of the placement of 
\begin_inset Formula $A$
\end_inset

.
\end_layout

\begin_layout Standard
One question is whether this approach is able to handle nested incertae
 sedis taxa.
\end_layout

\begin_layout Standard
Placement of incertae sedis taxa by input trees is unfortunately not quite
 as simple as finding a single location where an I.S.
 taxon should attach.
 For example, when an incertae sedis taxon is broken, its children need
 to be 
\begin_inset Quotes eld
\end_inset

placed
\begin_inset Quotes erd
\end_inset

 separately.
\end_layout

\begin_layout Standard
Each input tree can relate to an 
\emph on
incertae sedis
\emph default
 taxon 
\begin_inset Formula $(A,B,C)D$
\end_inset

 in a number of ways
\end_layout

\begin_layout Itemize
it could resolve 
\begin_inset Formula $A$
\end_inset

, 
\begin_inset Formula $B$
\end_inset

, 
\begin_inset Formula $C$
\end_inset

, or 
\begin_inset Formula $D$
\end_inset

.
\end_layout

\begin_layout Itemize
it could place 
\begin_inset Formula $D$
\end_inset

 on a degree-2 (=out-degree-1) node that bisects a branch
\end_layout

\begin_layout Itemize
it could place a descendant taxon of 
\begin_inset Formula $D$
\end_inset

 
\end_layout

\begin_layout Itemize
it could place a descendant taxon of 
\begin_inset Formula $D$
\end_inset

 in a 
\emph on
different place
\emph default
 than another input tree.
\end_layout

\begin_layout Itemize
it could place children of 
\begin_inset Formula $D$
\end_inset

 in multiple places, thus conflicting with the branch.
 If the 
\emph on
incertae sedis
\emph default
 taxon 
\begin_inset Formula $(A,B,C)$
\end_inset

 is broken, then 
\begin_inset Formula $A$
\end_inset

, 
\begin_inset Formula $B$
\end_inset

 and 
\begin_inset Formula $C$
\end_inset

 become 
\emph on
incertae sedis
\emph default
 clades in their own right, that may attach separately, except that they
 .
 This is because none of 
\begin_inset Formula $A$
\end_inset

, 
\begin_inset Formula $B$
\end_inset

, or 
\begin_inset Formula $C$
\end_inset

 is in the exclude set of the siblings of 
\begin_inset Formula $D$
\end_inset

.
\end_layout

\begin_layout Section
Handling 
\emph on
incertae sedis
\emph default
 taxa in the propinquity pipeline
\end_layout

\begin_layout Standard
In order to handle 
\emph on
incertae sedis
\emph default
 taxa within propinquity, we must modify some of the stages of the propinquity
 pipeline.
 Subproblem decomposition must place 
\emph on
incertae sedis
\emph default
 taxa in the correct subproblem.
 Subproblem files must indicate which taxa are incertae sedis.
 The subproblem solver must read this information, account for 
\emph on
incertae sedis
\emph default
 taxa when solving subproblems, and correctly name taxa that have been modified
 by having 
\emph on
incertae sedis
\emph default
 taxa place inside them.
 The unpruner must be aware of 
\emph on
incertae sedis
\emph default
 taxa.
 Annotations of the tree must be aware of 
\emph on
incertae sedis
\emph default
 taxa so that it does not consider taxa broken when they have an incertae
 sedis taxon placed inside them.
\end_layout

\begin_layout Subsection
Exemplifying taxa
\end_layout

\begin_layout Standard
One current problem is that well-known taxa like Fungi or Mammalia tend
 to have a very large number of incertae sedis children, making browsing
 in the tree viewer difficult.
 This can happen when, for example, fossils or other hard-to-place taxa
 get classified only to the level of these well-known nodes and no further.
 This leads to a situation where well-known taxa serve as a dumping ground
 for unplaced taxa.
\end_layout

\begin_layout Standard
Our current approach to this problem is to perform a second round of pruning,
 or 
\begin_inset Quotes eld
\end_inset

cleaning
\begin_inset Quotes erd
\end_inset

, during the exemplification step.
 Incertae sedis taxa are pruned at this stage if they do not occur in any
 input trees.
 We thus generate a second 
\begin_inset Quotes eld
\end_inset

cleaned taxonomy
\begin_inset Quotes erd
\end_inset

 that has undergone this further round of cleaning.
 This approach improves on the previous approach in that 
\emph on
incertae sedis
\emph default
 taxa in input trees are no longer pruned.
 This approach also removes tons of 
\emph on
incertae sedis
\emph default
 children from nodes like 
\begin_inset Quotes eld
\end_inset

Fungi
\begin_inset Quotes erd
\end_inset

, where a lot of unplaced fossils with few observable characters have been
 dumped.
 
\end_layout

\begin_layout Standard
However, this approach has the negative effect of pruning some incertae
 sedis taxa that need not be pruned.
 For example, suppose 
\emph on
incertae sedis
\emph default
 taxon 
\begin_inset Formula $A$
\end_inset

 contains 5 children, of which only 1 child 
\begin_inset Formula $A_{1}$
\end_inset

 occurs in an input tree.
 If the taxon 
\begin_inset Formula $A$
\end_inset

 is not broken, then it should be possible to attach the other 4 members
 of 
\begin_inset Formula $A$
\end_inset

 next to 
\begin_inset Formula $A_{1}$
\end_inset

, without cluttering up the synthesis tree.
 Such taxa have been successfully placed even though they are not in any
 input tree.
 This can only be discovered after synthesis is complete, though.
\end_layout

\begin_layout Standard
Additionally, it should also be possible to filter unplaced taxa in the
 tree viewer instead of in the synthesis pipeline.
\end_layout

\begin_layout Subsection
Sub-problem decomposition
\end_layout

\begin_layout Standard
The presence of 
\emph on
incertae sedis 
\emph default
taxa poses a problem to sub-problem decomposition, since taxonomy edges
 no longer completely separate subproblems.
 Instead, 
\emph on
incertae sedis
\emph default
 taxa may attach on either side of a taxonomy edge.
 We seek to place 
\emph on
incertae sedis
\emph default
 taxa into subproblems in such a way that the subproblem solver can perform
 the placement inside the subproblem.
 This approach postpones handling of conflict in 
\emph on
incertae sedis
\emph default
 taxa to the subproblem solver, where the problem is well formulated in
 terms of splits.
 However, it does have the effect of creating larger subproblems.
\end_layout

\begin_layout Standard
We must also handle conflicting placements of 
\emph on
incertae sedis
\emph default
 taxa by different input trees.
 Thus, if one input tree places the 
\emph on
incertae sedis
\emph default
 taxon 
\begin_inset Formula $X$
\end_inset

 in 
\begin_inset Formula $((X)B)A$
\end_inset

 and another places 
\begin_inset Formula $X$
\end_inset

 in 
\begin_inset Formula $((X)C)A$
\end_inset

 then we must mark both edges 
\begin_inset Formula $B$
\end_inset

 and 
\begin_inset Formula $C$
\end_inset

 as contested edges, even if these edges would 
\emph on
not
\emph default
 be contested were taxon 
\begin_inset Formula $X$
\end_inset

 to be removed.
 This results in a new way to contest edges that involves the interaction
 of two input trees, and not just the interaction of each input tree with
 the taxonomy.
\end_layout

\begin_layout Standard
We choose to solve these problems by merging any subproblems that an 
\emph on
incertae sedis
\emph default
 taxon might be placed in.
 The simplest way to achieve this is simply to regard any taxon that has
 an 
\emph on
incertae sedis 
\emph default
taxon placed within it as contested.
 This results in marking both 
\begin_inset Formula $B$
\end_inset

 and 
\begin_inset Formula $C$
\end_inset

 as contested edges in the example above.
 In fact, this is the current behaviour of the non-
\emph on
incertae-sedis
\emph default
 aware subproblem decomposer.
 One downside of this approach is that, if we have 
\begin_inset Formula $((X)B)A)$
\end_inset

 in one input tree, and 
\begin_inset Formula $X$
\end_inset

 is mentioned nowhere else, then by marking 
\begin_inset Formula $B$
\end_inset

 as contested, we are merging subproblems unnecessarily.
 We could instead placed 
\begin_inset Formula $X$
\end_inset

 in 
\begin_inset Formula $B$
\end_inset

 and avoid contesting the edge 
\begin_inset Formula $B$
\end_inset

.
 However, this approach is more complex and does not seem necessary in practice.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename Figures/placement1/tax.tre.svg
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Taxonomy 
\begin_inset Formula $\taxonomy$
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename Figures/placement1/input1.tre.svg
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Formula $\tau_{1}$
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename Figures/placement1/input2.tre.svg
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Formula $\tau_{2}$
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:placement-example1"

\end_inset

Example.
 An incertae sedis clade (ott6,ott7) is placed in different subtrees by
 input trees 
\begin_inset Formula $\tau_{1}$
\end_inset

 and 
\begin_inset Formula $\tau_{2}$
\end_inset

.
 In 
\begin_inset Formula $\tau_{1}$
\end_inset

, two nodes that correspond to the taxonomy their ingroup extended to include
 (ott6,ott7), and the branches leading to these nodes have been colored
 blue.
 The dashed blue edge leads to a node that is a newly-introduced degree-2
 node which does not correspond to any taxonomy node.
 In 
\begin_inset Formula $\tau_{2}$
\end_inset

, only one node that corresponds to a taxonomy node needs to have its ingroup
 extended.
 The placement of (ott6,ott7) into ott8 toward ott1 by 
\begin_inset Formula $\tau_{1}$
\end_inset

 conflicts with the placement of (ott6,ott7) into ott9 toward ott3 by 
\begin_inset Formula $\tau_{2},$
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

 For example, in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:placement-example1"

\end_inset

, input tree 
\begin_inset Formula $\tau_{1}$
\end_inset

 contests ott9 and input tree 
\begin_inset Formula $\tau_{2}$
\end_inset

 contests ott9 and ott8.
 Thus ott1, ott2, ott3, ott6, and ott7 end up in the same sub-problem.
\end_layout

\begin_layout Subsection
Subproblem solution
\end_layout

\begin_layout Standard
Our sub-problem solver naturally handles 
\emph on
incertae sedis
\emph default
 taxa.
 This is because we define the semantics of 
\emph on
incertae sedis
\emph default
 taxa in terms of partial splits, and our solver natively supports building
 trees from partial splits through its use of the BUILD algorithm.
 Handling 
\emph on
incertae sedis
\emph default
 taxa thus requires loading incertae sedis information and computing partial
 splits for 
\emph on
incertae sedis
\emph default
 taxa before solving a sub-problem.
 After solving a sub-problem, we must apply taxon names from the taxonomy
 tree to the sub-problem solution tree.
 The solution tree is considered to a fixed tree and not to have any 
\emph on
incertae sedis
\emph default
 nodes, or any other forms of uncertainty.
\end_layout

\begin_layout Subsubsection
Reading incertae sedis information
\end_layout

\begin_layout Standard
Currently, we read the 
\emph on
incertae sedis
\emph default
 information as a list of OTT ids for 
\emph on
incertae sedis
\emph default
 taxa.
 This does not require adding further annotations to the node names.
 Only taxonomy nodes can be 
\emph on
incertae sedis
\emph default
 at the moment, and only the taxonomy tree for the subproblem contains OTT
 ids for internal nodes.
 Therefore we handle 
\emph on
incertae sedis
\emph default
 information by constructing modified split sets for the lowest-ranked tree
 when the list of 
\emph on
incertae sedis
\emph default
 nodes is not empty.
\end_layout

\begin_layout Subsubsection
Exclude sets modified by 
\emph on
incertae sedis
\emph default
 marks
\end_layout

\begin_layout Standard
Equation (
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:exclude-set-formula"

\end_inset

) leads to the following algorithm to compute the exclude set for all nodes
 in a tree.
\end_layout

\begin_layout Enumerate
Set the exclude set of the root node to be empty
\end_layout

\begin_layout Enumerate
For each 
\emph on
node
\emph default
 (except the root) in preorder
\end_layout

\begin_deeper
\begin_layout Itemize
combine the 
\emph on
exclude
\emph default
 set of the parent node with the 
\emph on
include
\emph default
 set of non-
\emph on
incertae-sedis
\emph default
 siblings.
\end_layout

\begin_layout Itemize
store this set in a hash, with key 
\emph on
node
\end_layout

\end_deeper
\begin_layout Standard
This algorithm is currently implemented in 
\emph on
otc-solve-subproblem
\emph default
.
 We store the sets as 
\emph on
std::set
\emph default
.
\begin_inset Note Note
status collapsed

\begin_layout Subsubsection
Should the solution tree 
\emph on
also
\emph default
 have incertae sedis taxa?
\end_layout

\begin_layout Plain Layout
It would be nice if the solution tree could have 
\emph on
incertae sedis
\emph default
 taxa.
 Specifically, it would be nice to be able to reproduce the input in the
 case where the input consists only of a taxonomy (subproblem) with 
\emph on
incertae sedis
\emph default
 taxa.
\end_layout

\begin_layout Plain Layout
In general, we should be able to assign splits from the subproblem trees
 to edges in the solution tree, although this assignment will not be unique.
 Labeling solution edges with splits in this way will identify cases where
 the split associated with an edge is a partial split, and we can float
 sibling subtrees across the edge.
 When a node can float all the way to the tips of all of its siblings
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Or, all of its non-
\emph on
incertae sedis
\emph default
 siblings, if we disallow floating across 
\emph on
incertae sedis
\emph default
 branches
\end_layout

\end_inset

, we could label such a node 
\emph on
incertae sedis
\emph default
 in the solution.
 Such a node may not have an OTT name.
\end_layout

\begin_layout Plain Layout
When the problems are 
\emph on
sub
\emph default
problems, an issue arises about whether a node can float to the tips of
 its sibling subtrees after these subtrees are extended by grafting.
 
\series bold
BDR: Would this always be possible if the node was originally an 
\emph on
incertae sedis
\emph default
 taxonomy node?
\end_layout

\begin_layout Plain Layout
Hmm...
 I was initially thinking that an incertae sedis taxon could get further
 placed but remain incertae sedis.
 For example, suppose we have a taxon that is incertae sedis within Vertebrata.
 Could an input tree place this taxon within Mammals, but not say where?
 I guess this could happen if the input tree had Theria and Prototheria
 as tip children.
 In that case, then the input tree could include a polytomy (which would
 place the taxon in Mammals), or could place the taxon on (say) the Theria
 edge, which would exclude it from Prototheria.
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Implementation: finding the node for a name
\end_layout

\begin_layout Standard
To find the node for a name 
\begin_inset Formula $n$
\end_inset

, we find the MRCA of the cluster 
\begin_inset Formula $S_{1}(n)$
\end_inset

.
 If the MRCA excludes the entire exclude group 
\begin_inset Formula $S_{2}(n)$
\end_inset

 then the name applies to the MRCA; otherwise the taxon does not exist on
 the tree.
\end_layout

\begin_layout Subsubsection
Implementation: handling name clashes
\end_layout

\begin_layout Standard
When multiple names 
\begin_inset Formula $N=\{n_{1},\ldots n_{N}\}$
\end_inset

 map to the same solution node 
\begin_inset Formula $x$
\end_inset

, then these names must satisfy some tree structure on the taxonomy, such
 that 
\begin_inset Formula $n_{1}<n_{2}$
\end_inset

 if 
\begin_inset Formula $n_{1}$
\end_inset

 is a descendant of 
\begin_inset Formula $n_{2}$
\end_inset

 in the taxonomy.
 If it is possible to find a name 
\begin_inset Formula $n_{max}$
\end_inset

 that is the unique maximal element of 
\begin_inset Formula $N$
\end_inset

, then it is permissible to 
\end_layout

\begin_layout Enumerate
create a monotypic parent 
\begin_inset Formula $p(x)$
\end_inset

 of 
\begin_inset Formula $x$
\end_inset

, and assign 
\begin_inset Formula $n_{max}$
\end_inset

 to 
\begin_inset Formula $p(x)$
\end_inset


\end_layout

\begin_layout Enumerate
continue handling name clashes at 
\begin_inset Formula $x$
\end_inset

 with the set of possible names reduced to 
\begin_inset Formula $N-n_{max}$
\end_inset

.
\end_layout

\begin_layout Standard
However, its certainly possible that there might not be any such 
\begin_inset Formula $N_{max}$
\end_inset

, in which case we could just choose a name for 
\begin_inset Formula $x$
\end_inset

 from 
\begin_inset Formula $N$
\end_inset

 (perhaps not an 
\emph on
incertae sedis
\emph default
 name) and then record all the other names as equivalents somewhere.
\end_layout

\begin_layout Standard

\series bold
BDR:
\emph on
 
\series default
we might get this behavior in a nice an automatic way if we create a single
 fake leaf for each monotypic taxonomy node that holds the node's leaf label.
\end_layout

\begin_layout Subsubsection
Caveats
\end_layout

\begin_layout Standard
When multiple I.S.
 taxa have been moved to the root node of a subproblem, they may be I.S.
 over the entire subproblem, and some may be I.S.
 over others in an asymmetric manner.
 Therefore, we might need to specify additional information about the original
 attachment location of the I.S.
 taxa, such as their depth.
 This only affects problems that have been decomposed.
\end_layout

\begin_layout Standard

\series bold
BDR:
\series default
 
\emph on
currently we don't actually move taxa to get them into a subproblem.
 So, is this even an issue?
\end_layout

\begin_layout Subsection
Grafted supertree
\end_layout

\begin_layout Standard

\emph on
Question:
\emph default
 Does the synthesis tree contain any 
\emph on
incertae sedis
\emph default
 groups?
\begin_inset Newline newline
\end_inset


\emph on
Answer:
\emph default
 The grafted supertree will not contain any 
\emph on
incertae sedis
\emph default
 groups.
 However, when we attach pruned nodes to a parent in the grafted supertree,
 we could mark such nodes 
\emph on
incertae sedis
\emph default
 if we want.
\end_layout

\begin_layout Subsection
Unpruning
\end_layout

\begin_layout Standard
Currently the unpruner 
\emph on
does not
\emph default
 require that the OTT ids are named in the grafted solution before unpruning
 starts.
 According to Mark's document, he wasn't sure if such names were generated
 for nodes that had an IS taxon placed inside of them, so otc-unprune-solution-a
nd-name-unnamed nodes throws away all the names and generates them itself.
\end_layout

\begin_layout Standard

\series bold
BDR
\series default
: See document 
\family typewriter
otcetera/doc/unprune-solution-and-name-unnamed-nodes.pdf
\end_layout

\begin_layout Standard
The unpruner should record when unpruned nodes are 
\emph on
incertae sedis
\emph default
.
 Such nodes are unaffected by phylogenies, and so 
\emph on
incertae sedis
\emph default
 annotations for them make good sense.
\end_layout

\begin_layout Subsection
Annotation
\end_layout

\begin_layout Standard
Annotation primarily involves running a conflict analysis between the synthesis
 tree and each input tree.
 Since neither tree has any 
\emph on
incertae sedis
\emph default
 taxa, the conflict algorithm does not need to change.
 Furthermore, if we allow 
\emph on
incertae sedis
\emph default
 taxa that are taxonomy-only to be annotated as 
\emph on
incertae sedis
\emph default
 on the synth tree, then such groups will not affect conflict with the input
 trees.
 We would also like to allow running a conflict analysis between the synthesis
 tree and the taxonomy tree.
 However, naming the nodes 
\emph on
is
\emph default
 a (almost) run of conflict analysis on the taxonomy tree, and this has
 already been done in a prior step.
 So, the current annotation procedure actually works as-is.
\end_layout

\begin_layout Standard
It would be nice to allow running conflict against the cleaned taxonomy,
 though.
 One way to do this would be to generated a 
\begin_inset Quotes eld
\end_inset

placed taxonomy
\begin_inset Quotes erd
\end_inset

, with groups extended to include 
\emph on
incertae sedis
\emph default
 taxa that have been placed within them.
 This would not require any updating to the conflict-analysis code in the
 annotation step.
\end_layout

\begin_layout Subsection
Conflict service
\end_layout

\begin_layout Standard
The current conflict service considers a group 
\begin_inset Formula $A$
\end_inset

 to conflict with the taxonomy if group 
\begin_inset Formula $A$
\end_inset

 has an incertae sedis group 
\begin_inset Formula $B$
\end_inset

 placed within it.
 This doesn't affect the annotations, since taxon names are added by the
 unpruner.
 But it could make perfectly fine input trees incorrectly look like they
 are the cause of broken taxa, if they contain IS taxa.
 Thus, it would be nice to have a modified conflict algorithm.
 
\end_layout

\begin_layout Subsubsection
Current conflict algorithm
\end_layout

\begin_layout Standard
The current conflict algorithm is pretty fast, but it works by classifying
 tips into either (i) the include group or (ii) the exclude group.
 To avoid counting the exclude group for every split, we instead count the
 total number of children for each node, and assume that any children not
 in the include set are in the exclude set.
 This is no longer true when we have incertae sedis taxa.
 I suspect that if we want to handle incertae sedies, we'd need a third
 category (iii) for 
\begin_inset Quotes eld
\end_inset

neither include group nor exclude group
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Enumerate
Get induced trees on intersection of leaf sets
\end_layout

\begin_layout Enumerate
Compute depth for each node (nd->depth)
\end_layout

\begin_layout Enumerate
Compute number of tips at or below each node (nd->n_tips)
\end_layout

\begin_layout Enumerate
for each input tree node -> 
\begin_inset Formula $nd$
\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
skip the root
\end_layout

\begin_layout Enumerate
skip monotypic
\end_layout

\begin_layout Enumerate
if its a tip then find corresponding (
\begin_inset Quotes eld
\end_inset

terminal
\begin_inset Quotes erd
\end_inset

) edges in synth tree and continue
\end_layout

\begin_layout Enumerate
leaves1 <- get the list of leaves in the include group of 
\begin_inset Formula $nd$
\end_inset

 (in input)
\end_layout

\begin_layout Enumerate
L2 <- find the total number of tips (L2 = sum [nd->n_tips| nd <- leaves1])
\end_layout

\begin_layout Enumerate
leaves2 <- get list of corresponding synth leaf nodes (in synth)
\end_layout

\begin_layout Enumerate
nodes <- find all nodes between leaves2 and the MRCA (in synth)
\end_layout

\begin_layout Enumerate
MRCA <- mrca of leaves2 (in synth.
 this uses the nd->depth annotation)
\end_layout

\begin_layout Enumerate
Compute number of tips in the include set (nd->include_tips) below each
 node in 
\begin_inset Formula $nodes$
\end_inset

 (in synth)
\end_layout

\begin_layout Enumerate
if n_include_tips(MRCA) == n_tips(MRCA) then the MRCA displays 
\begin_inset Formula $nd$
\end_inset


\end_layout

\begin_layout Enumerate
if n_include_tips(MRCA) < n_tips(MRCA) then
\end_layout

\begin_deeper
\begin_layout Itemize
foreach node in nodes
\end_layout

\begin_deeper
\begin_layout Itemize
if (n_include_tipes(nd) < n_tips(nd) and n_include_tips(nd) < l2)
\end_layout

\begin_deeper
\begin_layout Itemize
this is a conflict!
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
if there are no conflicts, then this is a resolved_by.
\end_layout

\end_deeper
\end_deeper
\begin_layout Subsubsection
Modified conflict algorithm?
\end_layout

\begin_layout Standard
This probably is outside the scope of the paper, but if we could come up
 with a modified conflict algorithm, that would be nice/useful, and probably
 novel.
 It would also probably be slower...
\end_layout

\begin_layout Section
Results
\end_layout

\begin_layout LyX-Code
\begin_inset Note Comment
status open

\begin_layout LyX-Code
?ott6145835 [6145835] <- ott698424 [698424] placed under ott4942423 [4942423]
 <- ott698424 [698424]
\end_layout

\begin_layout LyX-Code
?ott6145873 [6145873] <- ott698424 [698424] placed under ott4942423 [4942423]
 <- ott698424 [698424] 
\end_layout

\begin_layout LyX-Code
?ott18090 [18090] <- ott672501 [672501] placed under ott275501 [275501]
 <- ott672501 [672501]
\end_layout

\begin_layout LyX-Code
?ott190269 [190269] <- ott672501 [672501] placed under ott275501 [275501]
 <- ott672501 [672501] 
\end_layout

\begin_layout LyX-Code
?ott349638 [349638] <- ott672501 [672501] placed under ott275501 [275501]
 <- ott672501 [672501] 
\end_layout

\begin_layout LyX-Code
?ott1009313 [1009313] <- ott672501 [672501] placed under ott275501 [275501]
 <- ott672501 [672501] 
\end_layout

\begin_layout LyX-Code
?ott564110 [564110] <- ott939130 [939130] placed under ott757344 [757344]
 <- ott939130 [939130] 
\end_layout

\begin_layout LyX-Code
?ott679485 [679485] <- ott1074933 [1074933] placed under ott534796 [534796]
 <- ott1074933 [1074933] 
\end_layout

\begin_layout LyX-Code
?ott729184 [729184] <- ott1074933 [1074933] placed under ott534796 [534796]
 <- ott1074933 [1074933] 
\end_layout

\begin_layout LyX-Code
?ott5144555 [5144555] <- ott23373 [23373] placed under ott447802 [447802]
 <- ott23373 [23373]
\end_layout

\begin_layout LyX-Code
?ott441413 [441413] <- ott1014022 [1014022] placed under ott571842 [571842]
 <- ott997381 [997381] <- ott1014022 [1014022] 
\end_layout

\begin_layout LyX-Code
?ott31033 [31033] <- ott627035 [627035] placed under ott6019314 [6019314]
 <- ott627035 [627035] 
\end_layout

\begin_layout LyX-Code
?ott4018918 [4018918] <- ott5248084 [5248084] placed under ott167767 [167767]
 <- ott5248084 [5248084] 
\end_layout

\begin_layout LyX-Code
?ott4792759 [4792759] <- ott5248084 [5248084] placed under ott167767 [167767]
 <- ott5248084 [5248084] 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Should we do this? We could say: 
\end_layout

\begin_layout Itemize
we placed 14 incertae sedis taxa.
\end_layout

\begin_layout Itemize
we avoiding breaking 8 taxa that had IS taxa placed inside them.
\end_layout

\begin_layout Itemize
we allowed 
\begin_inset Formula $z_{1}$
\end_inset

 new taxa into the synthesis tree that were incertae sedis.
\end_layout

\begin_layout Itemize
we allowed 
\begin_inset Formula $z_{2}$
\end_inset

 new taxa into the synthesis tree that are marked as extinct.
\end_layout

\begin_layout Itemize
some nodes have as many as 
\begin_inset Formula $w$
\end_inset


\emph on
 incertae sedis
\emph default
 children, making them unbrowseable when incertae sedis children are not
 excluded.
\end_layout

\begin_layout Itemize
\begin_inset Formula $v_{1}$
\end_inset

 input trees were previously excluded 
\emph on
entirely
\emph default
 because they are nested within in an incertae sedis taxon.
\end_layout

\begin_layout Itemize
\begin_inset Formula $v_{2}$
\end_inset

 input trees were previously excluded 
\emph on
partially
\emph default
 because they are nested within in an incertae sedis taxon.
\end_layout

\begin_layout Standard
Currently the numbers 
\begin_inset Formula $z_{1}$
\end_inset

 and 
\begin_inset Formula $z_{2}$
\end_inset

.
 
\end_layout

\begin_layout Section
Discussion
\end_layout

\begin_layout Standard
One thing we could do (perhaps) that we are not currently doing, is to have
 nodes marked as incertae sedis on the synth tree.
 This would be easy enough if such nodes are not affected in any way by
 the input trees.
 Thus, when unpruning nodes we could mark any nodes 
\emph on
incertae sedis
\emph default
 if they were marked 
\emph on
incertae sedis
\emph default
 on the taxonomy.
\end_layout

\begin_layout Standard
Secondly, I think we need to distinguish 
\emph on
incertae sedis
\emph default
 taxa that are 
\begin_inset Quotes eld
\end_inset

unplaced
\begin_inset Quotes erd
\end_inset

 from 
\emph on
incertae sedis
\emph default
 taxa that do not occur in any input tree.
 I think that if 
\begin_inset Formula $A$
\end_inset

 contains child 
\begin_inset Formula $A_{1}$
\end_inset

 that is an input tree, and the taxon 
\begin_inset Formula $A$
\end_inset

 is not broken, then 
\begin_inset Formula $A$
\end_inset

 will be placed, and thus any other children 
\begin_inset Formula $A_{2},A_{3},\ldots,A_{n}$
\end_inset

 will also be placed, since they will be added as children of the (placed)
 node 
\begin_inset Formula $A$
\end_inset

 by the unpruner.
 This could be considered when deciding which nodes to suppress in the tree
 viewer.
\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "otcetera"
options "upmplainnat"

\end_inset


\end_layout

\end_body
\end_document

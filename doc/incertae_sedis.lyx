#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\sloppy
%\setlength{\parskip}{6pt}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip 6pt
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\taxonomy}{\mbox{\mathbb{T}}}
{\mbox{\mathbb{T}}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\prunedTaxonomy}{\taxonomy_{P}}
{\taxonomy_{P}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\phyloinputs}{\mathcal{T}}
{\mathcal{T}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\expandedPhylo}{\phyloinputs_{E}}
{\phyloinputs_{E}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\summaryTree}{\mathbb{S}}
{\mathbb{S}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\prunedSummary}{\summaryTree_{P}}
{\summaryTree_{P}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\collections}{\mathcal{C}}
{\mathcal{C}}
\end_inset


\end_layout

\begin_layout Title

\family typewriter
Handling 
\emph on
incertae sedis
\emph default
 taxa in propinquity
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard

\emph on
Incertae sedis
\emph default
 taxa are taxa within a taxonomy that might attach anywhere within one of
 their siblings.
 Such taxa arise in practice when we know that something is, say, within
 
\emph on
Fungi
\emph default
, but we don't know where it goes.
 Such a taxon would then be attached as a child of 
\emph on
Fungi
\emph default
 but labeled as 
\emph on
incertae sedis
\emph default
, which is a Latin phrase meaning 
\begin_inset Quotes eld
\end_inset

uncertain seat
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
We describe an extension of our previous supertree synthesis procedure that
 can use phylogeny information to place 
\emph on
incertae sedis
\emph default
 taxa into sister taxa without considering those sister taxa to be broken.
 The ability to place taxa within the taxonomy without breaking their containing
 taxa enables us to include thousands of new taxa that were previously filtered
 out to avoid broken taxa.
 It also enables us to use phylogenetic trees to update the taxonomy by
 extending taxa to include 
\emph on
incertae sedis
\emph default
 taxa placed within them.
 This makes substantial progress towards our goal of complete representation
 of taxa.
 It also enable us to include extinct taxa, since many of these taxa are
 incertae sedis.
\end_layout

\begin_layout Subsection
Incertae sedis taxa can result from taxonomy merging
\end_layout

\begin_layout Standard
Not all 
\emph on
incertae sedis
\emph default
 taxa in our taxonomy are directly labeled 
\emph on
incertae sedis
\emph default
 by taxonomists.
 
\emph on
Incertae sedis
\emph default
 taxa can also result from automatic merging of taxonomies to create the
 OpenTree taxonomy.
 
\series bold
[[There is a section in the taxonomy paper about how incertae sedis taxa
 can result, not only from being marked 
\emph on
incertae sedis
\emph default
, but also because sometimes when we add a taxon from taxonomy 
\begin_inset Formula $T_{2}$
\end_inset

 to taxonomy 
\begin_inset Formula $T_{1}$
\end_inset

, there is not only one unique place to put it.
 Jonathan said that his code marks the taxon incertae sedis in such cases.]]
\end_layout

\begin_layout Subsection
Container nodes
\end_layout

\begin_layout Standard
Some taxonomies have nodes with names like 
\begin_inset Quotes eld
\end_inset

Incertae sedis (Bacteria)
\begin_inset Quotes erd
\end_inset

.
 Such nodes are called containers.
 They indicate that each child node is an 
\emph on
incertae sedis
\emph default
 child of the container node's parent.
 The OTT retains container nodes with the 
\emph on
was_container
\emph default
 flag, but seems to have already moved all of the container's children to
 the container's parent.
\end_layout

\begin_layout Subsection
Formalism
\end_layout

\begin_layout Standard
We consider a ranked collection 
\begin_inset Formula $\phyloinputs=\left\{ T_{1},\ldots,T_{n}\right\} $
\end_inset

 of input trees and a single taxonomy tree 
\begin_inset Formula $\taxonomy$
\end_inset

.
 We have a set of labels 
\begin_inset Formula $\mathcal{L}$
\end_inset

 that correspond to taxon names.
 Therefore taxonomy node has a label, and every label correspond to a unique
 taxonomy node.
\end_layout

\begin_layout Standard
In contrast, input phylogenies only have labels on their leaf nodes.
 Furthermore, and the set of labels 
\begin_inset Formula $\mathcal{L}(i)$
\end_inset

 on input tree 
\begin_inset Formula $T_{i}$
\end_inset

 need not include all leaf labels, and in practice always contains only
 a relatively small part of 
\begin_inset Formula $\mathcal{L}$
\end_inset

.
\end_layout

\begin_layout Standard
We extend this framework by adding a set 
\begin_inset Formula $\mathcal{I}\subseteq\mathcal{L}$
\end_inset

 of labels that have the 
\emph on
incertae sedis 
\emph default
property.
 The taxonomy consists of the labels 
\begin_inset Formula $\mathcal{L}$
\end_inset

, the taxonomy tree 
\begin_inset Formula $\taxonomy$
\end_inset

, and the 
\emph on
incertae sedis
\emph default
 property 
\begin_inset Formula $\mathcal{I}$
\end_inset

 of taxon names.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Semantics-of-incertae"

\end_inset

Semantics of 
\emph on
incertae sedis
\emph default
 taxa
\end_layout

\begin_layout Standard
Incertae sedis taxa affect the synthesis procedure in two ways: they affect
 what it means for a taxonomy edge to conflict with the synthesis tree,
 and they affect what it means to place a taxon name on a particular node
 in the synthesis tree.
 We examine these effects in turn.
\end_layout

\begin_layout Subsection
Splits
\end_layout

\begin_layout Standard
Each edge of a standard tree divides the tip taxa 
\begin_inset Formula $\mathcal{L}$
\end_inset

 into two groups: the include set 
\begin_inset Formula $\mathcal{I}(e)$
\end_inset

 which does not contain the root, and the exclude set 
\begin_inset Formula $\mathcal{E}(e)$
\end_inset

 which does contain the root.
 Such a split may be written
\begin_inset Formula 
\[
\mathcal{I}(e)|\bullet\mathcal{E}(e),
\]

\end_inset

with the exclude set always on the right.
 If no taxa are 
\emph on
incertae sedis
\emph default
, then the exclude set for a node is just the total tip set minus the include
 set for the node:
\begin_inset Formula 
\begin{align*}
\mathcal{E}(n) & =\mathcal{L}-\mathcal{I}(n).
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
For a node 
\begin_inset Formula $n$
\end_inset

 on the tipward side of an edge 
\begin_inset Formula $e$
\end_inset

, we may also write 
\begin_inset Formula $\mathcal{I}(n)$
\end_inset

 for 
\begin_inset Formula $\mathcal{I}(e)$
\end_inset

, and 
\begin_inset Formula $\mathcal{E}(n)$
\end_inset

 for 
\begin_inset Formula $\mathcal{E}(e)$
\end_inset

.
 We consider the exclude set of the root node to be empty, and the include
 set of the root node to contain all tip taxa:
\begin_inset Formula 
\begin{align*}
\mathcal{E}(root) & =\{\}\\
\mathcal{I}(root) & =\mathcal{L}.
\end{align*}

\end_inset

In this case the root node stands for an edge that connects the root to
 the root's parent.
\end_layout

\begin_layout Subsubsection
Reduced exclude sets for 
\emph on
incertae sedis
\emph default
 taxa
\end_layout

\begin_layout Standard
Marking a taxon as 
\emph on
incertae sedis
\emph default
 changes the meaning if its sibling subtrees.
 Since the 
\emph on
incertae sedis
\emph default
 taxon can be placed inside its sibling subtrees, the exclude sets of the
 sibling subtrees should not include the 
\emph on
incertae sedis 
\emph default
taxon.
 Although exclude sets of sibling taxa are shrunk, the include sets of the
 sibling taxa are unaffected.
\end_layout

\begin_layout Standard
An 
\emph on
incertae sedis
\emph default
 taxon can be moved into any of the descendants of its siblings.
 Therefore, the exclude 
\begin_inset Formula $\mathcal{E}(n)$
\end_inset

 set for a node 
\begin_inset Formula $n$
\end_inset

 contains the children of all the ancestors of 
\begin_inset Formula $n$
\end_inset

, unless those children are incertae sedis.
 We can compute exclude sets recursively by writing the exclude set of a
 node 
\begin_inset Formula $n$
\end_inset

 in terms of the exclude set of its parent.
 If we use the terminology that the include and exclude sets for a node
 
\begin_inset Formula $n$
\end_inset

 are 
\begin_inset Formula $\mathcal{I}(n)$
\end_inset

 and 
\begin_inset Formula $\mathcal{E}(n)$
\end_inset

, then we have 
\begin_inset Formula 
\begin{align}
\mathcal{E}(n) & =\mathcal{E}(parent(n))\cup\left[\mathcal{I}(m)\big|m\in siblings(n),m\text{ not \emph{incertae} \emph{sedis}}\right],\label{eq:exclude-set-formula}
\end{align}

\end_inset

This leads to a pre-order recursion that terminates if the exclude set for
 the root note is set to 
\begin_inset Formula $\{\}$
\end_inset

 as a boundary condition.
\end_layout

\begin_layout Subsubsection
Alternative formulation
\end_layout

\begin_layout Standard
With the above formulation, if an I.S.
 clade A is more rootward than an I.S.
 clade B, and then A is placed sister to B, then B could not be placed within
 A.
 Thus, an alternative formulation of 
\begin_inset Formula $\mathcal{E}(n)$
\end_inset

 could include 
\begin_inset Formula $\mathcal{I}^{\prime}(m)$
\end_inset

 where excludes tip taxa that are incertae_sedis_inherited within 
\begin_inset Formula $m$
\end_inset

.
\begin_inset Formula 
\begin{align*}
I^{\prime}(m) & =\begin{cases}
m & \text{if }m\text{ is a leaf}\\
\left[I^{\prime}(c)\big|c\in children(m),c\text{ not \emph{incertae sedis}}\right] & \text{otherwise.}
\end{cases}
\end{align*}

\end_inset

This would not rule out placing B as sister to 
\begin_inset Formula $A$
\end_inset

 and then placing 
\begin_inset Formula $A$
\end_inset

 within 
\begin_inset Formula $B$
\end_inset

.
\end_layout

\begin_layout Subsection
Naming 
\end_layout

\begin_layout Standard
After solving a supertree (sub) problem, we need to assign taxon names to
 the supertree nodes based on the taxonomy tree in the problem.
 Each taxon name 
\begin_inset Formula $n$
\end_inset

 corresponds to a split 
\begin_inset Formula $S(n)=S(n)_{1}|S(n)_{2}$
\end_inset

 on the corresponding branch of the taxonomy tree.
 Without 
\emph on
incertae sedis
\emph default
, such splits are always of the form 
\begin_inset Formula $S(n)_{1}|\mathcal{L}-S(n)_{1}$
\end_inset

, but with 
\emph on
incertae sedis
\emph default
 taxa 
\begin_inset Formula $S_{2}(n)$
\end_inset

 may be smaller than 
\begin_inset Formula $\mathcal{L}-S(n)_{1}$
\end_inset

.
\end_layout

\begin_layout Standard
Without 
\emph on
incertae sedis
\emph default
, each name applies to at most one node, and each node can take at most
 one name, with the exception of monotypic taxa.
 Thus, we may simply search the solution tree for a node that has the same
 cluster 
\begin_inset Formula $S(n)_{1}$
\end_inset

 and apply the name 
\begin_inset Formula $n$
\end_inset

 to that node.
\end_layout

\begin_layout Standard
However, in the 
\emph on
incertae sedis 
\emph default
framework we must raise the question of whether one name could apply to
 multiple nodes, or whether multiple names could apply to one node.
 
\end_layout

\begin_layout Standard

\series bold
BDR:
\series default
 
\emph on
It is well known that monotypic taxa are indistinguishable if you consider
 only splits on leaf labels, but are distinguishable if you consider splits
 on all node labels.
 It seems that some (all?) of the problems with assigning multiple names
 to the same nodes actually comes from the fact that moving IS taxa can
 leave the parent as a degree-2 node.
 The fact that propinquity handles monotypic taxa indicates that we actually
 implicitly consider all taxa to have labels.
 It is possible that a trivial extension to the sub-problem solved could
 thus handle monotypic taxa and issues with mapping 2 names to one node
 with incertae sedis taxa.
\end_layout

\begin_layout Subsubsection
Multiple nodes that fit one name
\end_layout

\begin_layout Standard
Suppose the taxonomy is (((A1,A2)A,B)AB,C,D*) and the solution tree is (((A1,A2)
x,D*)y,B)AB,C).
 In this case the name 
\begin_inset Formula $A$
\end_inset

 leads to the split S(A) = A1 A2 | B C root.
 This name can apply to both the node x and the node y.
\end_layout

\begin_layout Standard

\series bold
Solution:
\series default
 In this case, we find the most tipward node and attach the name to this
 node.
\end_layout

\begin_layout Subsubsection
Multiple names fit a single node
\end_layout

\begin_layout Paragraph
Example 1
\end_layout

\begin_layout Standard
Suppose the taxonomy is (((B1,B2)B,C*)A,Y) and the input tree is (((B1,C),B2)x,Y
) then the names A and B both to the node x.
 In this case the names A and B are ordered.
\end_layout

\begin_layout Standard

\series bold
Case 1:
\series default
 If a taxon contains 2 non-IS taxa, then it cannot be identical with any
 of its children in the synthesis tree.
\end_layout

\begin_layout Standard

\series bold
Case 2:
\series default
 If a taxon contains 1 non-IS taxon and 
\begin_inset Formula $\ge1$
\end_inset

 IS taxa, then the taxon could be identical with is non-IS child in the
 synthesis tree, if the IS taxa are placed within the child.
\end_layout

\begin_layout Standard

\series bold
Case 3:
\series default
 If a node contains 0 non-IS taxa and 1 IS taxon, then the IS taxa behaves
 no differently than a non-IS taxa, since is has no siblings it could be
 placed into.
\end_layout

\begin_layout Standard

\series bold
Case 4:
\series default
 If a node contains 0 non-IS taxa and 
\begin_inset Formula $\ge2$
\end_inset

 IS taxa, then then taxon 
\emph on
could
\emph default
 be identical with a non-IS child in the synthesis tree, if all but one
 IS children are placed with in one of the IS children.
\end_layout

\begin_layout Standard

\series bold
Solution:
\series default
 When we assign multiple names to the same node, then we expand the node
 with multiple names to have monotypic parents, and assign the series of
 names to the monotypic parents.
 Another way of saying this is that when a node has 
\begin_inset Formula $\le1$
\end_inset

 non-IS taxon and 
\begin_inset Formula $\ge2$
\end_inset

 taxa then the node could become monotypic by placement of the IS taxa.
\end_layout

\begin_layout Standard

\series bold
Example 2
\end_layout

\begin_layout Standard
If ((A1,A2)A,(B1,B2)B*,(C1,C2)C*); is the taxonomy with asterisks denoting
 incertae sedis taxa, then the solution ((A1,A2)A,((B1,C1)mrcaB1C1,(B2,C2)mrcaB2
C2)x); has a node x that could be called B* or C*.
\end_layout

\begin_layout Standard

\series bold
Case:
\series default
 If a taxa B* and C* are IS, then their tips can be intermingled in a new
 clade x.
 Both names would then apply.
\end_layout

\begin_layout Section
Synthesis and conflict resolution with incertae sedis taxa
\end_layout

\begin_layout Subsection
Placement causes broken taxa
\end_layout

\begin_layout Standard
Synthesis with incertae sedis taxa can result in incertae sedis taxa being
 
\emph on
placed
\emph default
.
 We say that an incertae sedis taxon 
\begin_inset Formula $A$
\end_inset

 is 
\emph on
placed
\emph default
 within a sister taxon 
\begin_inset Formula $B$
\end_inset

 in the synthesis tree if 
\begin_inset Formula $B$
\end_inset

 is an ancestor of 
\begin_inset Formula $A$
\end_inset

 in the synthesis tree.
 We note that the propinquity pipeline has always been able to place taxa
 within other taxa in theory.
 However, without special consideration given to 
\emph on
naming
\emph default
, placing a taxon 
\begin_inset Formula $A$
\end_inset

 within a taxon 
\begin_inset Formula $B$
\end_inset

 would result in conflict with taxon 
\begin_inset Formula $B$
\end_inset

 in the taxonomy.
 In such cases, we say that taxon 
\begin_inset Formula $B$
\end_inset

 is a broken taxon.
 As a result, we have filtered incertae sedis taxon from the taxonomy before
 performing synthesis, in order to avoid breaking a large number of taxa
 when incertae sedis taxa are placed within them.
 
\end_layout

\begin_layout Standard
Broken taxa have two main effects, both of which are negative.
 First, the name 
\begin_inset Formula $B$
\end_inset

 of the broken taxon is removed from the synthesis tree.
 Second, conflicting edge for taxon 
\begin_inset Formula $B$
\end_inset

 is not included in the synthesis tree.
 This means that any children of 
\begin_inset Formula $B$
\end_inset

 that are taxonomy-only will not be placed with the children of 
\begin_inset Formula $B$
\end_inset

 that happen to be included in input phylogenies.
 Instead they move towards the root and attach at the first higher-rank
 taxon that is an ancestor of 
\begin_inset Formula $B$
\end_inset

 but is not broken.
\end_layout

\begin_layout Subsection
Correctly handling placement
\end_layout

\begin_layout Standard
Thus, we seek a synthesis method that can correctly place a taxon 
\begin_inset Formula $A$
\end_inset

 within a sister taxon 
\begin_inset Formula $B$
\end_inset

 by attaching it as a child to a descendent 
\begin_inset Formula $C$
\end_inset

 of 
\begin_inset Formula $B$
\end_inset

 without breaking 
\begin_inset Formula $C$
\end_inset

, 
\begin_inset Formula $B$
\end_inset

 or any taxon in between them.
 We change the semantics of names to imply, not the exclusion of all non-include
d taxa, but only some non-included taxa, as described in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Semantics-of-incertae"

\end_inset

.
 As a result of this change in semantics, placing an IS taxon 
\begin_inset Formula $A$
\end_inset

 within a sister taxon 
\begin_inset Formula $B$
\end_inset

 no longer results in conflict with 
\begin_inset Formula $B$
\end_inset

.
 This allows us to retain the split for 
\begin_inset Formula $B$
\end_inset

 within the synthesis tree, so that taxonomy-only children of 
\begin_inset Formula $B$
\end_inset

 are correctly grouped with their siblings that are referenced by the input
 trees.
 We may then retain the name for the no-longer-broken taxon.
 Finally, we are then able to stop filtering 
\emph on
incertae sedis
\emph default
 taxa, so that they appear in the synthesis tree.
 Thus, the synthesis tree is able to represent substantially more species,
 without suffering the loss of taxa and the loss of structure.
\end_layout

\begin_layout Subsection
Conflict with incertae sedis taxa
\end_layout

\begin_layout Subsubsection
Conflicting placement among input trees
\end_layout

\begin_layout Standard
The addition of 
\emph on
incertae sedis
\emph default
 taxa allows new types of conflict between input trees.
 For example, different input trees might place an incertae sedis taxon
 in conflicting locations.
 This is illustrated in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:placement-example1"

\end_inset

, where the IS taxon (ott7,ott6)ott10 is placed as sister to ott1 by phylogeny
 
\begin_inset Formula $\tau_{1}$
\end_inset

 and as sister ott3 by phylogeny 
\begin_inset Formula $\tau_{2}$
\end_inset

.
 
\end_layout

\begin_layout Standard
When this happens, the placement of the IS taxon is not influenced by its
 being marked IS on the taxonomy.
 Thus, in Example 1, the higher ranked tree 
\begin_inset Formula $\tau_{1}$
\end_inset

 will be reflected in the synthesis tree, ott10 will be placed as sister
 to ott1.
 In contrast, the conflicting placement in 
\begin_inset Formula $\tau_{2}$
\end_inset

 will not be reflected in the synth tree.
 
\end_layout

\begin_layout Standard
All this would occur in the previous version of propinquity.
 Where the updated version differs that (a) the names ott9 and ott8 are
 retained instead of being dropped.
 (b) as a result of not breaking ott8 and ott9, we do not move ott3 and
 ott2 up to ott11.
 [BDR: Extend more figures!]
\end_layout

\begin_layout Subsubsection
Example B
\end_layout

\begin_layout Standard
However, incertae sedis taxa are not always tip nodes, but may themselves
 contain other taxa.
 In such cases, it is possible for input trees to conflict with the incertae
 sedis taxon itself.
 For example, consider the following example
\end_layout

\begin_layout Itemize
\begin_inset Formula $T_{1}=((w_{1},w_{2},z_{1}),y_{1})$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $T_{2}=((y_{1},y_{2},z_{2}),w_{1})$
\end_inset


\end_layout

\begin_layout Itemize
Taxonomy tree 
\begin_inset Formula $((w_{1},w_{2})w,(y_{1},y_{2})y,(z_{1},z_{2},z_{3})z)$
\end_inset

 with 
\begin_inset Formula $z$
\end_inset

 marked 
\emph on
incertae sedis
\emph default
.
\end_layout

\begin_deeper
\begin_layout Itemize
splits 
\begin_inset Formula $w_{1}w_{2}|\bullet y_{1}y_{2}$
\end_inset

, 
\begin_inset Formula $y_{1}y_{2}|\bullet w_{1}w_{2}$
\end_inset

 and 
\begin_inset Formula $z_{1}z_{2}|\bullet w_{1}w_{2}y_{1}y_{2}$
\end_inset


\end_layout

\end_deeper
\begin_layout Standard
In this case, tree 
\begin_inset Formula $T_{1}$
\end_inset

 places 
\begin_inset Formula $z_{1}$
\end_inset

 within 
\begin_inset Formula $w$
\end_inset

, while 
\begin_inset Formula $T_{2}$
\end_inset

 places 
\begin_inset Formula $z_{2}$
\end_inset

 within 
\begin_inset Formula $y$
\end_inset

.
 Since different members of 
\begin_inset Formula $z$
\end_inset

 are placed, neither placement for 
\begin_inset Formula $z$
\end_inset

 is rejected.
 Instead the taxon 
\begin_inset Formula $z$
\end_inset

 is broken, the name 
\begin_inset Formula $z$
\end_inset

 disappears, and 
\begin_inset Formula $z_{3}$
\end_inset

 floats to the top level.
 
\end_layout

\begin_layout Standard
Furthermore, since taxon 
\begin_inset Formula $z$
\end_inset

 is a broken 
\emph on
incertae sedis 
\emph default
taxon, all of its children are effectively incertae sedis independently.
 Therefore, the names 
\begin_inset Formula $w$
\end_inset

 and 
\begin_inset Formula $y$
\end_inset

 are not lost, since the taxa placed within them are 
\emph on
incertae sedis
\emph default
 names.
 Note that 
\begin_inset Formula $z_{3}$
\end_inset

 maybe therefore be placed in a third location, since it is also 
\emph on
incertae sedis
\emph default
.
\end_layout

\begin_layout Standard
The situation here would be different if the monophyly of 
\begin_inset Formula $z$
\end_inset

 was supported by an input phylogeny.
\end_layout

\begin_layout Standard

\emph on
Note that the synthesis of all input trees before the taxonomy is unaffected
 by incertae sedis information.
\end_layout

\begin_layout Subsubsection
Example C - Nested 
\emph on
incertae sedis
\emph default
 taxa
\end_layout

\begin_layout Standard
In addition to incertae sedis taxa containing other taxa, it is also possible
 for incertae sedis taxa to contain nested 
\emph on
incertae sedis
\emph default
 taxa.
 
\series bold
What issues might this raise?
\end_layout

\begin_layout Section
Handling 
\emph on
incertae sedis
\emph default
 taxa in the propinquity pipeline
\end_layout

\begin_layout Standard
In order to handle 
\emph on
incertae sedis
\emph default
 taxa within propinquity, we must modify some of the stages of the propinquity
 pipeline.
 Subproblem decomposition must place 
\emph on
incertae sedis
\emph default
 taxa in the correct subproblem.
 Subproblem files must indicate which taxa are incertae sedis.
 The subproblem solver must read this information, account for 
\emph on
incertae sedis
\emph default
 taxa when solving subproblems, and correctly name taxa that have been modified
 by having 
\emph on
incertae sedis
\emph default
 taxa place inside them.
 The unpruner must be aware of 
\emph on
incertae sedis
\emph default
 taxa.
 Annotations of the tree must be aware of 
\emph on
incertae sedis
\emph default
 taxa so that it does not consider taxa broken when they have an incertae
 sedis taxon placed inside them.
\end_layout

\begin_layout Subsection
Exemplifying taxa
\end_layout

\begin_layout Standard
One current problem important taxa like Fungi of Mammalia tend to have a
 very large number of incertae sedis children, making browsing in the tree
 viewer difficult.
 This can happen when, for example, fossils or other hard-to-place taxa
 get classified only to the level of these important nodes and no further.
 This leads to a situation where well-known taxa serve as a dumping ground
 for unplaced taxa.
\end_layout

\begin_layout Standard
Our current approach to this problem is to perform a second round of pruning,
 or 
\begin_inset Quotes eld
\end_inset

cleaning
\begin_inset Quotes erd
\end_inset

, during the exemplification step.
 Incertae sedis taxa are pruned at this stage if they do not occur in any
 input trees.
 We thus generate a second 
\begin_inset Quotes eld
\end_inset

cleaned taxonomy
\begin_inset Quotes erd
\end_inset

 that has undergone this further round of cleaning.
 This approach improves on the previous approach in that 
\emph on
incertae sedis
\emph default
 taxa in input trees are no longer pruned, while also removing tons of 
\emph on
incertae sedis
\emph default
 taxa from nodes like 
\begin_inset Quotes eld
\end_inset

Fungi
\begin_inset Quotes erd
\end_inset

, where a lot of unplaced fossils with few observable characters have been
 dumped.
 
\end_layout

\begin_layout Standard
However, this approach has the negative effect of pruning some incertae
 sedis taxa that need not be pruned.
 For example, suppose 
\emph on
incertae sedis
\emph default
 taxon 
\begin_inset Formula $A$
\end_inset

 contains 5 children, of which only 1 child 
\begin_inset Formula $A_{1}$
\end_inset

 occurs in an input tree.
 If the taxon 
\begin_inset Formula $A$
\end_inset

 is not broken, then it should be possible to attach the other 4 members
 of 
\begin_inset Formula $A$
\end_inset

 next to 
\begin_inset Formula $A_{1}$
\end_inset

, without cluttering up the synthesis tree.
 Such taxa have been successfully placed even though they are not in any
 input tree.
 This can only be discovered after synthesis is complete, though.
\end_layout

\begin_layout Standard
Additionally, it should also be possible filter unplaced taxa in the tree
 viewer instead of in the synthesis pipeline.
\end_layout

\begin_layout Subsection
Sub-problem decomposition
\end_layout

\begin_layout Standard
Our general approach to sub-problem decomposition is to mark a taxon 
\begin_inset Formula $B$
\end_inset

 as contested if input trees differ in whether 
\begin_inset Formula $A$
\end_inset

 should be placed within 
\begin_inset Formula $B$
\end_inset

.
 By considering taxon 
\begin_inset Formula $B$
\end_inset

 contested, we avoid deciding between competing input trees at the stage
 of sub-problem decomposition.
 Instead we, post-pone this decision to the sub-problem solver.
 This results in larger sub-problems.
 Thus an 
\emph on
incertae sedis
\emph default
 aware approach to uncontested taxon decomposition might move an 
\emph on
incertae sedis
\emph default
 taxon 
\begin_inset Formula $A$
\end_inset

 into one of its sister taxa 
\begin_inset Formula $B$
\end_inset

 if necessary to be consistent with an input tree.
 If no lower-ranked input trees contest 
\begin_inset Formula $B$
\end_inset

 then 
\begin_inset Formula $B$
\end_inset

 can be considered uncontested, resulting in smaller sub-problems.
 However, if a later input tree attempts to place 
\begin_inset Formula $A$
\end_inset

 in a contradictory fashion, then 
\begin_inset Formula $B$
\end_inset

 will (probably) be contested, and the resolution of conflict will be performed
 by the subproblem solver
\end_layout

\begin_layout Subsubsection
Really simple approach
\end_layout

\begin_layout Standard
While this approach would result in more sub-problems of smaller size, we
 note that a non-IS aware sub-problem decomposer achieves nearly the same
 result except for creating larger sub-problems.
 If an input tree 
\begin_inset Formula $\tau$
\end_inset

 places an 
\emph on
incertae sedis
\emph default
 taxon 
\begin_inset Formula $A$
\end_inset

 within a taxon 
\begin_inset Formula $B$
\end_inset

, then the the non-IS-aware decomposer will consider 
\begin_inset Formula $\tau$
\end_inset

 as contesting 
\begin_inset Formula $B$
\end_inset

.
 Thus, whenever 
\begin_inset Formula $A$
\end_inset

 is places within 
\begin_inset Formula $B$
\end_inset

, both taxa will end up in the same subproblem.
 Likewise, if two different trees place 
\begin_inset Formula $A$
\end_inset

 down two separate paths of taxa, both paths of taxa will end up in the
 same subproblem.
 This approach has not yet created sub-problems that are too large to be
 solved for our sub-problem solver.
\end_layout

\begin_layout Subsection
Decomposing into subproblems
\end_layout

\begin_layout Subsubsection
What to do
\end_layout

\begin_layout Standard
When 
\emph on
incertae sedis
\emph default
 taxa are involved, we must place 
\emph on
incertae sedis
\emph default
 taxa into subproblems in such a way that the subproblem solver can perform
 the placement inside the subproblem.
 However, we must also handle conflicting placements of 
\emph on
incertae sedis
\emph default
 taxa by different input trees.
\end_layout

\begin_layout Standard
I think we can solve this in a logically coherent way by recognizing that
 any taxonomy edges leading to conflicting placement of an 
\emph on
incertae sedis
\emph default
 taxon must end up in the same subproblem (i.e.
 they must be collapsed).
 Thus, if one input tree places the 
\emph on
incertae sedis
\emph default
 taxon 
\begin_inset Formula $X$
\end_inset

 in 
\begin_inset Formula $((X)B)A$
\end_inset

 and another input phylogeny places 
\emph on
incertae sedis
\emph default
 taxon 
\begin_inset Formula $X$
\end_inset

 in 
\begin_inset Formula $((X)C)A$
\end_inset

 then we must mark the edges 
\begin_inset Formula $B$
\end_inset

 and 
\begin_inset Formula $C$
\end_inset

 as contested edges, even if these edges would 
\emph on
not
\emph default
 be contested were taxon 
\begin_inset Formula $X$
\end_inset

 to be removed.
 This results in a new way to contest edges that involves the interaction
 of two input trees, and not just the interaction of each input tree with
 the taxonomy.
\end_layout

\begin_layout Standard
The result of such a decomposition procedure would be that the subproblem
 solver will handle any conflicting placement information.
\end_layout

\begin_layout Subsubsection
Example 1
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename Figures/placement1/tax.tre.svg
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Taxonomy 
\begin_inset Formula $\taxonomy$
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename Figures/placement1/input1.tre.svg
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Formula $\tau_{1}$
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename Figures/placement1/input2.tre.svg
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Formula $\tau_{2}$
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:placement-example1"

\end_inset

Example.
 An incertae sedis clade (ott6,ott7) is placed in different subtrees by
 input trees 
\begin_inset Formula $\tau_{1}$
\end_inset

 and 
\begin_inset Formula $\tau_{2}$
\end_inset

.
 In 
\begin_inset Formula $\tau_{1}$
\end_inset

, two nodes that correspond to the taxonomy their ingroup extended to include
 (ott6,ott7), and the branches leading to these nodes have been colored
 blue.
 The dashed blue edge leads to a node that is a newly-introduced degree-2
 node which does not correspond to any taxonomy node.
 In 
\begin_inset Formula $\tau_{2}$
\end_inset

, only one node that corresponds to a taxonomy node needs to have its ingroup
 extended.
 The placement of (ott6,ott7) into ott8 toward ott1 by 
\begin_inset Formula $\tau_{1}$
\end_inset

 conflicts with the placement of (ott6,ott7) into ott9 toward ott3 by 
\begin_inset Formula $\tau_{2},$
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

 In Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:placement-example1"

\end_inset

, we can establish correspondences between branches in 
\begin_inset Formula $\taxonomy|\tau_{1}$
\end_inset

 and 
\begin_inset Formula $\tau_{1}$
\end_inset

 as follows:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{align*}
\text{ott12: }1\,2\,3\,4\,\boldsymbol{6\,7}\,|\,5 & \sim1\,2\,3\,4\,\boldsymbol{6\,7}\,|\,5\\
\text{ott11: }1\,2\,3\,\boldsymbol{6\,7}\,|\,4\,5 & \sim1\,2\,3\,\boldsymbol{6\,7}\,|\,4\,5\\
\text{ott9: }1\,2\,3\,|\,4\,5 & \sim1\,2\,3\,\boldsymbol{6\,7}\,|\,4\,5\\
\text{ott8: }1\,2\,|\,3\,4\,5 & \sim1\,2\,\boldsymbol{6\,7}\,|\,3\,4\,5\\
? & \sim1\,\boldsymbol{6\,7\,}|\,2\,3\,4\,5
\end{align*}

\end_inset

This mapping is based on the idea that, after conflicting branches are removed
 from 
\begin_inset Formula $\taxonomy|\tau$
\end_inset

, then its remaining splits and the splits of 
\begin_inset Formula $\tau$
\end_inset

 will be jointly compatible.
 Some of the splits of 
\begin_inset Formula $\taxonomy|\tau$
\end_inset

 can be extended using 
\begin_inset Formula $Z$
\end_inset

-closure (?).
\end_layout

\begin_layout Standard
This is not completely clear though.
 
\begin_inset Formula $\tau$
\end_inset

 contains only full splits, whereas splits from 
\begin_inset Formula $\taxonomy|\tau$
\end_inset

 can be partial.
 
\end_layout

\begin_layout Subsubsection
Example 2
\end_layout

\begin_layout Standard
Question: Suppose that 
\begin_inset Formula $\tau_{1}$
\end_inset

 contests the 
\emph on
incertae sedis
\emph default
 clade (ott6,ott7)ott9.
 What then?
\begin_inset Newline newline
\end_inset

Answer: Any taxa with ott6 or ott7 placed into them should not be broken
 if they would have allowed ott9.
\end_layout

\begin_layout Standard
Question: Suppose that 
\begin_inset Formula $\tau_{1}$
\end_inset

 contests the 
\emph on
incertae sedis
\emph default
 clade (ott6,ott7)ott9 and attaches ott6 and ott7 separately to the ott3
 terminal edge?
\begin_inset Newline newline
\end_inset

Answer: In this case the breaking of ott9 and the separate placement of
 ott6 and ott7 together constitute the 
\begin_inset Quotes eld
\end_inset

placement
\begin_inset Quotes erd
\end_inset

 of ott9.
 Thus, we need to be able to represent the conflict/annotation of the taxonomy
 tree and the input tree 
\begin_inset Formula $\tau_{1}$
\end_inset

.
\end_layout

\begin_layout Subsubsection
Interactions between input trees and 
\emph on
incertae sedis
\emph default
 taxa
\end_layout

\begin_layout Standard

\emph on
Incertae sedis
\emph default
 nodes are features of the taxonomy.
 Each input tree can relate to an 
\emph on
incertae sedis
\emph default
 taxon 
\begin_inset Formula $(A,B,C)D$
\end_inset

 in a number of ways
\end_layout

\begin_layout Itemize
it could place a descendant taxon of 
\begin_inset Formula $D$
\end_inset


\end_layout

\begin_layout Itemize
descendants of incertae sedis taxa may be placed on branches, as well as
 nodes.
 That is the taxa will probably be places on new degree-2 nodes that bisect
 branches, instead of being places on nodes.
\end_layout

\begin_layout Itemize
it could place children of the branch in multiple places, thus conflicting
 with the branch.
 If the 
\emph on
incertae sedis
\emph default
 taxon 
\begin_inset Formula $(A,B,C)$
\end_inset

 is broken, then 
\begin_inset Formula $A$
\end_inset

, 
\begin_inset Formula $B$
\end_inset

 and 
\begin_inset Formula $C$
\end_inset

 become 
\emph on
incertae sedis
\emph default
 clades in their own right, that may attach separately.
 This is because none of 
\begin_inset Formula $A$
\end_inset

, 
\begin_inset Formula $B$
\end_inset

, or 
\begin_inset Formula $C$
\end_inset

 is in the exclude set of the siblings of 
\begin_inset Formula $D$
\end_inset

.
\end_layout

\begin_layout Itemize
it could resolve 
\begin_inset Formula $A$
\end_inset

, 
\begin_inset Formula $B$
\end_inset

, 
\begin_inset Formula $C$
\end_inset

, or 
\begin_inset Formula $D$
\end_inset

.
\end_layout

\begin_layout Itemize
it could place some descendant taxa of 
\begin_inset Formula $D$
\end_inset

 in a 
\emph on
different place
\emph default
 than another input tree.
\end_layout

\begin_layout Standard
An conflict analysis between the taxonomy 
\begin_inset Formula $\taxonomy$
\end_inset

 and an input tree 
\begin_inset Formula $\tau$
\end_inset

 should yield, for the induced tree 
\begin_inset Formula $\taxonomy|\tau$
\end_inset


\end_layout

\begin_layout Itemize
which branches correspond between 
\begin_inset Formula $\taxonomy|\tau\longleftrightarrow\tau$
\end_inset

.
\end_layout

\begin_layout Itemize
which branches of 
\begin_inset Formula $\taxonomy|\tau$
\end_inset

 the input tree 
\begin_inset Formula $\tau$
\end_inset

 conflicts with.
\end_layout

\begin_layout Subsubsection
Possible issue 1:
\end_layout

\begin_layout Standard
If two siblings are 
\emph on
incertae sedis
\emph default
, then they could each be subgroups of the other.
 This means that the groups don't form a proper multi-connected tree, which
 could be problematic.
 We could therefore make 
\emph on
incertae sedis
\emph default
 groups impenetrable to other 
\emph on
incertae sedis
\emph default
 siblings.
\end_layout

\begin_layout Subsubsection
Possible issue 2:
\end_layout

\begin_layout Standard
If the decomposer places IS taxa to subproblem resolution, then their new
 placement no longer specifies exactly which taxa they float over, right?
 Suppose 
\begin_inset Formula $X$
\end_inset

 floats over 
\begin_inset Formula $(A,B)$
\end_inset

, and 
\begin_inset Formula $A$
\end_inset

 floats over 
\begin_inset Formula $B$
\end_inset

.
 Then if 
\begin_inset Formula $X$
\end_inset

 and 
\begin_inset Formula $A$
\end_inset

 are placed within 
\begin_inset Formula $B$
\end_inset

 within subproblem 
\begin_inset Formula $ottid$
\end_inset

, then the fact that 
\begin_inset Formula $X$
\end_inset

 floats over 
\begin_inset Formula $A$
\end_inset

 but not 
\emph on
vice versa
\emph default
 will be lost.
\end_layout

\begin_layout Subsubsection
Possible approach
\end_layout

\begin_layout Standard
One approach would be to modify the taxonomy to place
\emph on
 incertae sedis 
\emph default
taxa when scanning input phylogenies.
 A series of input phylogenies containing taxon 
\begin_inset Formula $X$
\end_inset

 might not disagree, but might each place the taxon 
\begin_inset Formula $X$
\end_inset

 successively more tipward.
 However, when reading an input phylogeny that conflicts with the placement
 of 
\begin_inset Formula $X$
\end_inset

 resulting from previously processed input phylogenies, we would end up
 marking the branches connecting the two attachment points as conflicting
 with the most recently processed input phylogeny.
 These branches would then not be used to separate subproblems from each
 other, and would thus end up in the same subproblem.
 
\emph on
This is not proved - expand and check
\emph default
.
\end_layout

\begin_layout Standard
If this does work, then it is hopeful that this would decrease the number
 of sub-problems too much.
 It seems like it might be OK, since we already contest edges result from
 alternative placement of non-
\emph on
incertae sedis
\emph default
 taxa.
\end_layout

\begin_layout Subsection
Subproblem solution
\end_layout

\begin_layout Standard
Our sub-problem solver naturally handles 
\emph on
incertae sedis
\emph default
 taxa.
 This is because we define the semantics of 
\emph on
incertae sedis
\emph default
 taxa in terms of partial splits, and our solver natively supports building
 trees from partial splits through its use of the BUILD algorithm.
 Handling 
\emph on
incertae sedis
\emph default
 taxa thus requires loading incertae sedis information and computing partial
 splits for 
\emph on
incertae sedis
\emph default
 taxa before solving a sub-problem.
 After solving a sub-problem, we must apply taxon names from the taxonomy
 tree to the sub-problem solution tree.
 The solution tree is considered to a fixed tree and not to have any 
\emph on
incertae sedis
\emph default
 nodes, or any other forms of uncertainty.
\end_layout

\begin_layout Subsubsection
Reading incertae sedis information
\end_layout

\begin_layout Standard
Currently, we read the 
\emph on
incertae sedis
\emph default
 information as a list of OTT ids for 
\emph on
incertae sedis
\emph default
 taxa.
 This does not require adding further annotations to the node names.
 Only taxonomy nodes can be 
\emph on
incertae sedis
\emph default
 at the moment, and only the taxonomy tree for the subproblem contains OTT
 ids for internal nodes.
 Therefore we handle 
\emph on
incertae sedis
\emph default
 information by constructing modified split sets for the lowest-ranked tree
 when the list of 
\emph on
incertae sedis
\emph default
 nodes is not empty.
\end_layout

\begin_layout Subsubsection
Exclude sets modified by 
\emph on
incertae sedis
\emph default
 marks
\end_layout

\begin_layout Standard
Equation (
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:exclude-set-formula"

\end_inset

) leads to the following algorithm to compute the exclude set for all nodes
 in a tree.
\end_layout

\begin_layout Enumerate
Set the exclude set of the root node to be empty
\end_layout

\begin_layout Enumerate
For each 
\emph on
node
\emph default
 (except the root) in preorder
\end_layout

\begin_deeper
\begin_layout Itemize
combine the 
\emph on
exclude
\emph default
 set of the parent node with the 
\emph on
include
\emph default
 set of non-
\emph on
incertae-sedis
\emph default
 siblings.
\end_layout

\begin_layout Itemize
store this set in a hash, with key 
\emph on
node
\end_layout

\end_deeper
\begin_layout Standard
This algorithm is currently implemented in 
\emph on
otc-solve-subproblem
\emph default
.
 We store the sets as 
\emph on
std::set
\emph default
.
\begin_inset Note Note
status collapsed

\begin_layout Subsubsection
Should the solution tree 
\emph on
also
\emph default
 have incertae sedis taxa?
\end_layout

\begin_layout Plain Layout
It would be nice if the solution tree could have 
\emph on
incertae sedis
\emph default
 taxa.
 Specifically, it would be nice to be able to reproduce the input in the
 case where the input consists only of a taxonomy (subproblem) with 
\emph on
incertae sedis
\emph default
 taxa.
\end_layout

\begin_layout Plain Layout
In general, we should be able to assign splits from the subproblem trees
 to edges in the solution tree, although this assignment will not be unique.
 Labeling solution edges with splits in this way will identify cases where
 the split associated with an edge is a partial split, and we can float
 sibling subtrees across the edge.
 When a node can float all the way to the tips of all of its siblings
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Or, all of its non-
\emph on
incertae sedis
\emph default
 siblings, if we disallow floating across 
\emph on
incertae sedis
\emph default
 branches
\end_layout

\end_inset

, we could label such a node 
\emph on
incertae sedis
\emph default
 in the solution.
 Such a node may not have an OTT name.
\end_layout

\begin_layout Plain Layout
When the problems are 
\emph on
sub
\emph default
problems, an issue arises about whether a node can float to the tips of
 its sibling subtrees after these subtrees are extended by grafting.
 
\series bold
BDR: Would this always be possible if the node was originally an 
\emph on
incertae sedis
\emph default
 taxonomy node?
\end_layout

\begin_layout Plain Layout
Hmm...
 I was initially thinking that an incertae sedis taxon could get further
 placed but remain incertae sedis.
 For example, suppose we have a taxon that is incertae sedis within Vertebrata.
 Could an input tree place this taxon within Mammals, but not say where?
 I guess this could happen if the input tree had Theria and Prototheria
 as tip children.
 In that case, then the input tree could include a polytomy (which would
 place the taxon in Mammals), or could place the taxon on (say) the Theria
 edge, which would exclude it from Prototheria.
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Implementation: finding the node for a name
\end_layout

\begin_layout Standard
To find the node for a name 
\begin_inset Formula $n$
\end_inset

, we find the MRCA of the cluster 
\begin_inset Formula $S_{1}(n)$
\end_inset

.
 If the MRCA excludes the entire exclude group 
\begin_inset Formula $S_{2}(n)$
\end_inset

 then the name applies to the MRCA; otherwise the taxon does not exist on
 the tree.
\end_layout

\begin_layout Subsubsection
Implementation: handling name clashes
\end_layout

\begin_layout Standard
When multiple names 
\begin_inset Formula $N=\{n_{1},\ldots n_{N}\}$
\end_inset

 map to the same solution node 
\begin_inset Formula $x$
\end_inset

, then these names must satisfy some tree structure on the taxonomy, such
 that 
\begin_inset Formula $n_{1}<n_{2}$
\end_inset

 if 
\begin_inset Formula $n_{1}$
\end_inset

 is a descendant of 
\begin_inset Formula $n_{2}$
\end_inset

 in the taxonomy.
 If it is possible to find a name 
\begin_inset Formula $n_{max}$
\end_inset

 that is the unique maximal element of 
\begin_inset Formula $N$
\end_inset

, then it is permissible to 
\end_layout

\begin_layout Enumerate
create a monotypic parent 
\begin_inset Formula $p(x)$
\end_inset

 of 
\begin_inset Formula $x$
\end_inset

, and assign 
\begin_inset Formula $n_{max}$
\end_inset

 to 
\begin_inset Formula $p(x)$
\end_inset


\end_layout

\begin_layout Enumerate
continue handling name clashes at 
\begin_inset Formula $x$
\end_inset

 with the set of possible names reduced to 
\begin_inset Formula $N-n_{max}$
\end_inset

.
\end_layout

\begin_layout Standard
However, its certainly possible that there might not be any such 
\begin_inset Formula $N_{max}$
\end_inset

, in which case we could just choose a name for 
\begin_inset Formula $x$
\end_inset

 from 
\begin_inset Formula $N$
\end_inset

 (perhaps not an 
\emph on
incertae sedis
\emph default
 name) and then record all the other names as equivalents somewhere.
\end_layout

\begin_layout Standard

\series bold
BDR:
\emph on
 
\series default
we might get this behavior in a nice an automatic way if we create a single
 fake leaf for each monotypic taxonomy node that holds the node's leaf label.
\end_layout

\begin_layout Subsubsection
Caveats
\end_layout

\begin_layout Standard
When multiple I.S.
 taxa have been moved to the root node of a subproblem, they may be I.S.
 over the entire subproblem, and some may be I.S.
 over others in an asymmetric manner.
 Therefore, we might need to specify additional information about the original
 attachment location of the I.S.
 taxa, such as their depth.
 This only affects problems that have been decomposed.
\end_layout

\begin_layout Standard

\series bold
BDR:
\series default
 
\emph on
currently we don't actually move taxa to get them into a subproblem.
 So, is this even an issue?
\end_layout

\begin_layout Subsection
Unpruning
\end_layout

\begin_layout Standard
Currently the unpruner 
\emph on
does not
\emph default
 require that the OTT ids are named in the grafted solution before unpruning
 starts.
 According to Mark's document, he wasn't sure if such names were generated
 for nodes that had an IS taxon placed inside of them, so otc-unprune-solution-a
nd-name-unnamed nodes throws away all the names and generates them itself.
\end_layout

\begin_layout Standard

\series bold
BDR
\series default
: 
\emph on
Mark's paragraph about how the un-pruner works should go here.
 
\end_layout

\begin_layout Standard
The unpruner should record when unpruned nodes are 
\emph on
incertae sedis
\emph default
.
 Such nodes are unaffected by phylogenies, and so 
\emph on
incertae sedis
\emph default
 annotations for them make good sense.
\end_layout

\begin_layout Subsection
Labelled supertree
\end_layout

\begin_layout Standard

\emph on
Question:
\emph default
 Does the synthesis tree contain any 
\emph on
incertae sedis
\emph default
 groups?
\begin_inset Newline newline
\end_inset


\emph on
Answer:
\emph default
 The grafted supertree will not contain any 
\emph on
incertae sedis
\emph default
 groups.
 However, when we attach pruned nodes to a parent in the grafted supertree,
 we could mark such nodes 
\emph on
incertae sedis
\emph default
 if we want.
\end_layout

\begin_layout Subsection
Annotations
\end_layout

\begin_layout Standard
After we allow 
\emph on
incertae
\emph default
 sedis taxa in the taxonomy, the relationships of edges in the taxonomy
 to edges in each input tree become more interesting.
 Without 
\emph on
incertae sedis
\emph default
 taxa, taxonomy splits always divide the full leaf set, and so we can say
 that taxonomy split 
\begin_inset Formula $A$
\end_inset

 displays an input split 
\begin_inset Formula $B$
\end_inset

 if 
\begin_inset Formula $B_{1}\subseteq A_{1}$
\end_inset

 and 
\begin_inset Formula $B_{2}\subseteq A_{2}$
\end_inset

.
 Thus, a taxonomy split always has more information than an input split
 
\begin_inset Formula $B$
\end_inset

 that it displays.
 However, with 
\emph on
incertae sedis
\emph default
 taxa in the taxonomy, it is possible that the input split 
\begin_inset Formula $B$
\end_inset

 
\begin_inset Quotes eld
\end_inset

aligns
\begin_inset Quotes erd
\end_inset

 to a taxonomy split 
\begin_inset Formula $A$
\end_inset

 and 
\emph on
also
\emph default
 performs a placement.
 In this case the input split 
\begin_inset Formula $B$
\end_inset

 has more information than the taxonomy split 
\begin_inset Formula $A$
\end_inset

 that it aligns to.
 
\end_layout

\begin_layout Standard

\series bold
BDR: Question: when comparing the taxonomy to an input tree, how do we deal
 with conflict & alignment?
\end_layout

\begin_layout Itemize
If we remove all taxonomy splits that are not pairwise compatible with each
 input tree edge, are all taxonomy edges jointly compatible with all input
 tree edges?
\end_layout

\begin_deeper
\begin_layout Enumerate
It is possible for two taxonomy edges to be implied by the same input tree
 edge.
\end_layout

\begin_layout Enumerate
It is possible for two input tree edges to imply the same taxonomy edge.
\end_layout

\begin_layout Enumerate
Each input tree edge is full rank on the induced tree.
\end_layout

\begin_layout Enumerate
Now, each taxonomy edge is either equivalent an input tree edge, or on one
 side of it, since they are compatible.
\end_layout

\begin_layout Enumerate
This imposes a directed flow on the input tree for each taxonomy edge, so
 that it moves to a node or a connected group of edges, all of which imply
 it.
\end_layout

\end_deeper
\begin_layout Itemize
We annotate the synthesis tree, not the taxonomy tree.
\end_layout

\begin_layout Itemize
Adding incertae sedis info would complicate performing conflict analysis
 against the taxonomy.
\end_layout

\begin_layout Subsection
Annotation
\end_layout

\begin_layout Standard
The synthesis tree itself does not currently have 
\emph on
incertae sedis 
\emph default
groups.
 It should though, for those nodes that were incertae sedis in the synthesis
 tree and have not been placed anywhere.
\end_layout

\begin_layout Standard
Furthermore, the primary goal is to avoid excluding 
\emph on
incertae sedis
\emph default
 taxa, whereas displaying 
\emph on
incertae sedis 
\emph default
status for solution nodes in the tree viewer is a secondary goal.
 Therefore, solution nodes can be regarded (for the moment) as always implying
 full splits.
\end_layout

\begin_layout Standard
Actually we do not need to change annotation as long as we are not running
 conflict analysis on the synthesis tree.
 Basically naming the nodes 
\emph on
is
\emph default
 a (almost) run of conflict analysis on the taxonomy tree.
\end_layout

\begin_layout Standard
However, we would like to be able to run conflict analysis for input trees
 against the synth tree and the taxonomy tree.
\end_layout

\begin_layout Subsection
Conflict service
\end_layout

\begin_layout Standard
The current conflict service considers a group 
\begin_inset Formula $A$
\end_inset

 to conflict with the taxonomy if it has an incertae sedis group 
\begin_inset Formula $B$
\end_inset

 placed within it.
 This doesn't affect the annotations, since taxon names are added by the
 unpruner.
 But it could make perfectly fine input trees incorrectly look like they
 are the cause of broken taxa, if they contain IS taxa.
 Thus, it would be nice to have a modified conflict algorithm.
 
\end_layout

\begin_layout Subsubsection
Current conflict algorithm
\end_layout

\begin_layout Standard
The current conflict algorithm is pretty fast, but it works by classifying
 tips into either (i) the include group or (ii) the exclude group.
 I suspect that if we want to handle incertae sedies, we'd need a third
 category (iii) for 
\begin_inset Quotes eld
\end_inset

neither include group nor exclude group
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Enumerate
Get induced trees on intersection of leaf sets
\end_layout

\begin_layout Enumerate
Compute depth for each node (nd->depth)
\end_layout

\begin_layout Enumerate
Compute number of tips at or below each node (nd->n_tips)
\end_layout

\begin_layout Enumerate
for each input tree node -> 
\begin_inset Formula $nd$
\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
skip the root
\end_layout

\begin_layout Enumerate
skip monotypic
\end_layout

\begin_layout Enumerate
if its a tip then find corresponding (
\begin_inset Quotes eld
\end_inset

terminal
\begin_inset Quotes erd
\end_inset

) edges in synth tree and continue
\end_layout

\begin_layout Enumerate
leaves1 <- get the list of leaves in the include group of 
\begin_inset Formula $nd$
\end_inset

 (in input)
\end_layout

\begin_layout Enumerate
L2 <- find the total number of tips (L2 = sum [nd->n_tips| nd <- leaves1])
\end_layout

\begin_layout Enumerate
leaves2 <- get list of corresponding synth leaf nodes (in synth)
\end_layout

\begin_layout Enumerate
nodes <- find all nodes between leaves2 and the MRCA (in synth)
\end_layout

\begin_layout Enumerate
MRCA <- mrca of leaves2 (in synth.
 this uses the nd->depth annotation)
\end_layout

\begin_layout Enumerate
Compute number of tips in the include set (nd->include_tips) below each
 node in 
\begin_inset Formula $nodes$
\end_inset

 (in synth)
\end_layout

\begin_layout Enumerate
if n_include_tips(MRCA) == n_tips(MRCA) then the MRCA displays 
\begin_inset Formula $nd$
\end_inset


\end_layout

\begin_layout Enumerate
if n_include_tips(MRCA) < n_tips(MRCA) then
\end_layout

\begin_deeper
\begin_layout Itemize
foreach node in nodes
\end_layout

\begin_deeper
\begin_layout Itemize
if (n_include_tipes(nd) < n_tips(nd) and n_include_tips(nd) < l2)
\end_layout

\begin_deeper
\begin_layout Itemize
this is a conflict!
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
if there are no conflicts, then this is a resolved_by.
\end_layout

\end_deeper
\end_deeper
\begin_layout Subsubsection
Modified conflict algorithm?
\end_layout

\begin_layout Standard
This probably is outside the scope of the paper, but if we could come up
 with a modified conflict algorithm, that would be nice/useful, and probably
 novel.
 It would also probably be slower...
\end_layout

\begin_layout Section
Results
\end_layout

\begin_layout Standard
Should we do this? We could say: 
\end_layout

\begin_layout Itemize
we placed 
\begin_inset Formula $x$
\end_inset

 incertae sedis taxa.
\end_layout

\begin_layout Itemize
we avoiding breaking 
\begin_inset Formula $y$
\end_inset

 taxa that had IS taxa placed inside them.
\end_layout

\begin_layout Itemize
we allowed 
\begin_inset Formula $z_{1}$
\end_inset

 new taxa into the synthesis tree that were incertae sedis.
\end_layout

\begin_layout Itemize
we allowed 
\begin_inset Formula $z_{2}$
\end_inset

 new taxa into the synthesis tree that are marked as extinct.
\end_layout

\begin_layout Itemize
some nodes have as many as 
\begin_inset Formula $w$
\end_inset


\emph on
 incertae sedis
\emph default
 children, making them unbrowseable when incertae sedis children are not
 excluded.
\end_layout

\begin_layout Itemize
\begin_inset Formula $v_{1}$
\end_inset

 input trees w were previously excluded 
\emph on
entirely
\emph default
 because they are nested within in an incertae sedis taxon.
\end_layout

\begin_layout Itemize
\begin_inset Formula $v_{2}$
\end_inset

 input trees w were previously excluded 
\emph on
partially
\emph default
 because they are nested within in an incertae sedis taxon.
\end_layout

\begin_layout Standard
Currently the numbers 
\begin_inset Formula $z_{1}$
\end_inset

 and 
\begin_inset Formula $z_{2}$
\end_inset

.
 
\end_layout

\begin_layout Section
Discussion
\end_layout

\begin_layout Standard
One thing we could do (perhaps) that we are not currently doing, is to have
 nodes marked as incertae sedis on the synth tree.
 This would be easy enough if such nodes are not affected in any way by
 the input trees.
 Thus, when unpruning nodes we could mark any nodes 
\emph on
incertae sedis
\emph default
 if they were marked 
\emph on
incertae sedis
\emph default
 on the taxonomy.
\end_layout

\begin_layout Standard
Secondly, I think we need to distinguish 
\emph on
incertae sedis
\emph default
 taxa that are 
\begin_inset Quotes eld
\end_inset

unplaced
\begin_inset Quotes erd
\end_inset

 from 
\emph on
incertae sedis
\emph default
 taxa that do not occur in any input tree.
 I think that if 
\begin_inset Formula $A$
\end_inset

 contains child 
\begin_inset Formula $A_{1}$
\end_inset

 that is an input tree, and the taxon 
\begin_inset Formula $A$
\end_inset

 is not broken, then 
\begin_inset Formula $A$
\end_inset

 will be placed, and thus any other children 
\begin_inset Formula $A_{2},A_{3},\ldots,A_{n}$
\end_inset

 will also be placed, since they will be added as children of the (placed)
 node 
\begin_inset Formula $A$
\end_inset

 by the unpruner.
 This could be considered when deciding which nodes to suppress in the tree
 viewer.
\end_layout

\begin_layout Standard

\end_layout

\end_body
\end_document

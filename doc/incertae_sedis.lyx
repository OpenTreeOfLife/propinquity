#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\sloppy
%\setlength{\parskip}{6pt}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine natbib
\cite_engine_type authoryear
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 3cm
\topmargin 3cm
\rightmargin 3cm
\bottommargin 3cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip 6pt
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\taxonomy}{\mbox{\mathbb{T}}}
{\mbox{\mathbb{T}}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\prunedTaxonomy}{\taxonomy_{P}}
{\taxonomy_{P}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\phyloinputs}{\mathcal{T}}
{\mathcal{T}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\expandedPhylo}{\phyloinputs_{E}}
{\phyloinputs_{E}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\summaryTree}{\mathbb{S}}
{\mathbb{S}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\prunedSummary}{\summaryTree_{P}}
{\summaryTree_{P}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\collections}{\mathcal{C}}
{\mathcal{C}}
\end_inset


\end_layout

\begin_layout Title

\family typewriter
Taxonomic supertree construction with
\emph on
 Incertae sedis
\emph default
 taxa
\end_layout

\begin_layout Author
Benjamin D.
 Redelings and Mark T.
 Holder
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
Supertree methods combine a collection of input trees with different taxon
 sets into a single tree on the combined taxon set.
 The methods are usually applied to leaf-labeled phylogenetic estimates.
 Here we describe a supertree approach that overcomes issues associated
 with using a taxonomy as one of the inputs to a supertree method.
\end_layout

\begin_layout Standard
The Open Tree of Life project 
\begin_inset CommandInset citation
LatexCommand citep
key "HinchliffEtAl2015"
literal "false"

\end_inset

 seeks to build a comprehensive supertree 
\begin_inset CommandInset citation
LatexCommand citep
before "see"
key "redelings2017supertree"
literal "true"

\end_inset

 covering all of life.
 The approach is to combine information in published phylogenies with a
 comprehensive taxonomy that supplies taxon names.
 The supertree method has been used with the Open Tree of Taxonomy 
\begin_inset CommandInset citation
LatexCommand citep
before "OTT hereafter, see"
key "rees2017automated"
literal "false"

\end_inset

, but in principle is general.
 The taxonomy is a crucial input for several reasons: it covers a wider
 range of species, its list of names allows for alignment of different phylogene
tic estimates to each other, and it provides names for clades.
 Only a small proportion of known species have been included in a phylogenetic
 analysis, thus a taxonomy is crucial for achieving comprehensive coverage
 of known taxa.
 Phylogenetic estimates collected from the published literature often use
 different names for the same species.
 Lists of synonyms in OTT (and other taxonomies) allow data curators to
 
\begin_inset Quotes eld
\end_inset

align
\begin_inset Quotes erd
\end_inset

 input phylogenies to the taxonomy 
\begin_inset CommandInset citation
LatexCommand citep
after " for discussion of the curation process in the Open Tree of Life project"
before "see"
key "McTavishEtAt2015"
literal "false"

\end_inset

.
 This alignment is important for recognizing when two different estimates
 refer to the same taxon.
 Biologists are familiar with names for 
\begin_inset Quotes eld
\end_inset

higher
\begin_inset Quotes erd
\end_inset

 taxa (taxa above the species rank).
 Thus, naming clades in the supertree makes the tree easier to navigate
 and use.
\end_layout

\begin_layout Standard
While some taxonomies may indicate hybrid taxa, the supertree approach described
 here does not consider any hybridization.
 Thus the taxonomic hierarchy can be converted to a tree.
 While not all taxonomists believe that named taxa should correspond to
 clades 
\begin_inset CommandInset citation
LatexCommand citep
before "see, for example,"
key "HorandlS2010"
literal "false"

\end_inset

, the priniciples of phylogenetic classification are used by such a large
 majority of practicing taxonomists, that we have chosen to treat the taxonomic
 tree that mirrors the hierarchy of the taxonomy as an estimate of phylogenetic
 relationships.
 We refer to labels of taxonomy nodes as 
\begin_inset Quotes eld
\end_inset

taxon names
\begin_inset Quotes erd
\end_inset

, and assume that taxon names and taxonomy nodes have a one-to-one correspondenc
e.
 Note that the taxonomy may also contain out-degree 1 nodes.
 These nodes correspond to monotypic taxa which contain a single child of
 lower taxonomic rank.
\end_layout

\begin_layout Standard
The supertree method described by 
\begin_inset CommandInset citation
LatexCommand citet
key "redelings2017supertree"
literal "true"

\end_inset

 is able to use a set of phylogentic estimates and taxonomy to produce a
 supertree with clades names according to the taxonomy.
 However, the method was not able to accommodate the fact that taxonomies
 frequently contain nodes with uncertain placement.
 These nodes are often labelled 
\begin_inset Quotes eld
\end_inset


\emph on
incertae sedis
\emph default

\begin_inset Quotes erd
\end_inset

, which means 
\begin_inset Quotes eld
\end_inset

uncertain seat
\begin_inset Quotes erd
\end_inset

 in Latin.
 The common interpretation of such taxa is that they may not be moved further
 towards the root, but may be moved into their sibling taxa.
 For example, a genus with a sibling that is a family may be annotated as
 
\begin_inset Quotes eld
\end_inset


\emph on
incertae familia
\emph default

\begin_inset Quotes erd
\end_inset

, indicating that it is unclear which family the genus should be placed
 in.
 
\emph on
Incertae sedis
\emph default
 taxa frequently occur when a specimen is identified down to a given taxonomic
 level, but no further.
 Extinct taxa are often 
\emph on
incertae sedis
\emph default
.
 OTT is constructed from several source taxonomies, and these sources include
 various ways of indicating that the position of a taxon within the hierarchy
 is uncertain.
 OTT uses a series of 
\begin_inset Quotes eld
\end_inset

flags
\begin_inset Quotes erd
\end_inset

 to annotate these taxa.
 The supertree of by 
\begin_inset CommandInset citation
LatexCommand citet
key "redelings2017supertree"
literal "true"

\end_inset

 simply pruned these taxa from the taxonomy and input trees.
 Thus, the final supertree lacked taxa which were 
\emph on
incertae sedis
\emph default
.
\end_layout

\begin_layout Standard
Here describe a supertree method so that we can resolve taxonomic uncertainty
 by using published phylogenies to place 
\emph on
incertae sedis
\emph default
 taxa.
 Developing this method required deciding on a set operational semantics
 to be used when interpreting the 
\emph on
incertae sedis
\emph default
 annotation.
 These semantics affect the interpretation of the phylogenetic statements
 being made by the input taxonomy and the rules for applying taxonomic names
 to the final supertree.
 In addition to discussing how to interpret in the 
\emph on
incertae sedis
\emph default
 annotation, we describe the algorithmic changes to the supertree pipeline
 that were required to adequately represent the taxonomic uncertainty.
 The approach described here allows us to include thousands of new taxa
 in our supertree analysis that were previously filtered out.
 It will also enable the Open Tree of Life project to include extinct taxa,
 since many of these taxa are 
\emph on
incertae sedis
\emph default
.
 This makes substantial progress towards our goal of comprehensive inclusion
 of known taxa into the Open Tree of Life summary tree.
 
\end_layout

\begin_layout Subsection
Background
\end_layout

\begin_layout Paragraph
Previous algorithm
\end_layout

\begin_layout Standard
The supertree algorithm of 
\begin_inset CommandInset citation
LatexCommand citet
key "redelings2017supertree"
literal "true"

\end_inset

 takes as input a ranked list 
\begin_inset Formula $\phyloinputs=\left\{ T_{1},\ldots,T_{n}\right\} $
\end_inset

 of leaf-labeled rooted input phylogenies and a single rooted taxonomy tree
 
\begin_inset Formula $\taxonomy_{p}$
\end_inset

 that is ranked below all of the input trees.
 As discussed in 
\begin_inset CommandInset citation
LatexCommand citet
key "redelings2017supertree"
literal "true"

\end_inset

, the preferred tree would display as many of the highly ranked input splits
 as possible.
 If computational barriers were not an issue, the method would act by first
 producing a ranked list of rooted splits: 
\begin_inset Formula $\mathcal{S}=S(T_{1})+S(T_{2})+\ldots+S(T_{n})+S(\mathbb{T})$
\end_inset

 where 
\begin_inset Formula $S(T_{i})$
\end_inset

 denotes a list of non-trivial rooted splits created from a post-order traversal
 of tree 
\begin_inset Formula $i$
\end_inset

.
 Then the supertree would be produced in a greedy manner by iterating over
 the list 
\begin_inset Formula $S$
\end_inset

, and adding each rooted split to a growing rooted supertree if that split
 is compatible with the tree.
\end_layout

\begin_layout Standard
Because of the large number (over 2.6 million) of tips in the full tree,
 the supertree method of 
\begin_inset CommandInset citation
LatexCommand citet
key "redelings2017supertree"
literal "true"

\end_inset

 uses an approximation approach that relies on decomposition of the full
 problem into subproblems.
 The decomposition partitioning the list of taxonomy splits 
\begin_inset Formula $S(\taxonomy_{p})$
\end_inset

 into two lists: 
\begin_inset Formula $\mathcal{Z}(\taxonomy_{p}),$
\end_inset

the list of splits from the taxonomy tree which are compatible with every
 rooted split in the phylogenetic inputs, and 
\begin_inset Formula $\mathcal{Y}(\taxonomy_{p})$
\end_inset

, the list of taxonomic splits that conflict with at least one phylogenetic
 input split.
 Conceptually the approximate algorithm works by greedily adding all compatible
 splits in altered ranked list of splits: 
\begin_inset Formula $\mathcal{S}^{\prime}=\mathcal{Z}(\taxonomy_{p})+S(T_{1})+S(T_{2})+\ldots+S(T_{n})+\mathcal{Y}(\taxonomy_{p})$
\end_inset

.
 
\end_layout

\begin_layout Standard
In practice, the decomposition allows the compatibility of splits to be
 performed on smaller, relabeled trees.
 This can be done much more efficiently than if compatibility was checked
 using the BUILD algorithm of 
\begin_inset CommandInset citation
LatexCommand citet
key "AhoSSU1981"
literal "false"

\end_inset

 on the full leaf set.
 Thus, the supertree algorithm first divides the supertree problem into
 independent pieces by bisecting trees at the uncontested taxa which correspond
 to 
\begin_inset Formula $Z$
\end_inset

, then solves the supertree problem on these pieces, and finally glues the
 pieces back together to produce the full tree.
\end_layout

\begin_layout Standard
The taxonomy tree, 
\begin_inset Formula $\taxonomy_{p}$
\end_inset

, is derived from OTT.
 As mentioned above, OTT not only contains a taxonomic hierarchy, but also
 contains taxonomic labels and annotations (referred to as 
\begin_inset Quotes eld
\end_inset

flags
\begin_inset Quotes erd
\end_inset

) on the taxa to carry extra information.
 The entire hiearchy encoded by OTT is a complete taxonomic tree, 
\begin_inset Formula $\taxonomy^{\ast}.$
\end_inset

 Nodes in 
\begin_inset Formula $\taxonomy^{\ast}$
\end_inset

 have a one-to-one correspondence with a set of labels 
\begin_inset Formula $\mathcal{N}$
\end_inset

 that are called taxon names.
 We will decompose 
\begin_inset Formula $\mathcal{N}$
\end_inset

 into the taxon names for leaf taxa 
\emph on

\begin_inset Formula $\mathcal{L}$
\end_inset

 
\emph default
and higher taxa 
\begin_inset Formula $\mathcal{H}$
\end_inset

.
 We will use 
\begin_inset Formula $\mathcal{U}$
\end_inset

 to refer to the subset (
\begin_inset Formula $\mathcal{U}\subseteq\mathcal{N}$
\end_inset

) of taxa that are annotated with the 
\emph on
incertae sedis 
\emph default
property.
 Other annotations identify dubious taxa and taxonomic names that are unwanted
 artifacts of the process of building OTT.
 Thus, the taxonomic tree which is used as an input to the supertree algorithm
 is pruned version of 
\begin_inset Formula $\taxonomy^{\ast}$
\end_inset

.
 For our purposes, the relevant information from the taxonomy consists of
 the taxonomy tree 
\begin_inset Formula $\taxonomy^{\ast}$
\end_inset

, the labels 
\begin_inset Formula $\mathcal{N}$
\end_inset

, and set 
\begin_inset Formula $\mathcal{U}$
\end_inset

 of 
\emph on
incertae sedis 
\emph default
taxa.
 In previous work, taxa in 
\begin_inset Formula $\mathcal{U}$
\end_inset

 were all pruned from the taxonomic hierarchy when 
\begin_inset Formula $\taxonomy_{p}$
\end_inset

 is extracted from OTT.
 In the present work, we consider supertree approaches that operate on a
 taxonomic tree 
\begin_inset Formula $\taxonomy,$
\end_inset

which is produced from 
\begin_inset Formula $\taxonomy^{\ast}$
\end_inset

but does not prune 
\emph on
incertae sedis
\emph default
 taxa.
\end_layout

\begin_layout Standard
Throughout we assume that leaf labels on input phylogenetic trees are only
 taken from the leaf set of the taxonomic tree that is being used and that
 each label occurs at most once in each input tree.
 
\begin_inset CommandInset citation
LatexCommand citet
key "redelings2017supertree"
literal "true"

\end_inset

 describe a method called 
\begin_inset Quotes eld
\end_inset

exemplification
\begin_inset Quotes erd
\end_inset

 that ensures this is the case.
 Thus pruning of the 
\emph on
incertae sedis
\emph default
 taxa from the taxonomy was also accompanied by pruning those taxa from
 the input phylogenetic trees.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Semantics-of-incertae"

\end_inset

Semantics of 
\emph on
incertae sedis
\emph default
 taxa
\end_layout

\begin_layout Paragraph
Equivalence of a taxonomy tree and a list of rooted splits
\end_layout

\begin_layout Standard
Note that, for the purposes of the supertree method, all of the information
 from the taxonomic tree is contained in the set of rooted splits.
 Thus, one could imagine replacing that taxonomy, 
\begin_inset Formula $\taxonomy_{p}$
\end_inset

, with a set of trees 
\begin_inset Formula $\mathcal{R}(\taxonomy_{p})$
\end_inset

 each of which has a single internal edge such that each edge in 
\begin_inset Formula $\taxonomy_{p}$
\end_inset

is included in one tree in 
\begin_inset Formula $\mathcal{R}(\taxonomy_{p})$
\end_inset

.
 If the order of trees is set to be (with some abuse of notation): 
\begin_inset Formula $\mathcal{R}(\taxonomy_{p})=\mathcal{Z}(\taxonomy_{p})+\mathcal{Y}(\taxonomy_{p})$
\end_inset

, then using 
\begin_inset Formula $\mathcal{R}(\taxonomy_{p})$
\end_inset

 in place of 
\begin_inset Formula $\taxonomy_{p}$
\end_inset

in the supertree algorithm would produce the same output.
\end_layout

\begin_layout Paragraph
Splits-based synthesis method
\end_layout

\begin_layout Standard
Supertrees for each subproblem are obtained by greedily constructing a set
 of rooted splits 
\begin_inset Formula $\mathcal{C}$
\end_inset

 that are jointly consistent and correspond to branches of the input trees.
 We construct an ordered list of splits 
\begin_inset Formula $S(T_{i})$
\end_inset

 by walking the branches of each tree 
\begin_inset Formula $T_{i}$
\end_inset

 in post-order and appending the corresponding splits to the list.
 These lists are combined to form the list 
\begin_inset Formula $\Sigma=S(T_{1})+S(T_{2})+\ldots+S(T_{n})+S(\mathbb{T})$
\end_inset

, where '
\begin_inset Formula $+$
\end_inset

' denotes concatenation.
 The set 
\begin_inset Formula $C$
\end_inset

 is initialized to the empty set, and we then iteratively consider each
 split in the list 
\begin_inset Formula $\Sigma$
\end_inset

 and insert it into 
\begin_inset Formula $C$
\end_inset

 if the resulting set remains jointly compatible.
 The BUILD algorithm
\begin_inset CommandInset citation
LatexCommand citep
key "AhoSSU1981"
literal "false"

\end_inset

 is used both to check compatibility, and to construct a compatible tree
 from the final set 
\begin_inset Formula $C$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Section
Details & Methods
\end_layout

\begin_layout Subsection
Some examples in OTT
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
This paragraph pulled from intro to otcetera/doc/handling-incertae-sedis.pdf
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
The problem is becoming more acute because NCBI is putting a larger number
 of taxa into groups that are marked as “unclassified.” For example, when
 OTT 2.9 was created NCBI’s clasification of the bird family Sylvidae included
 a group five genera that were placed within “
\begin_inset CommandInset href
LatexCommand href
name "unclassified Sylviidae"
target "http://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?mode=Undef&id=36270&lvl=3&lin=f&keep=1&srchmode=1&unlock"
literal "false"

\end_inset

.” This includes the genus Regulus.
 Thus in OTT 2.9 Regulus (ott ID = 3599326) is placed inside the family Silvidae
 (OTT ID = 259942).
 The “unclassified Sylviidae” does not appear in OTT; instead Regulus is
 flagged as “unclassified,sibling higher” and all of the species within
 Regulus are flagged as “unclassified inherited.”
\end_layout

\begin_layout Plain Layout
The taxonomy (as of version 2.9) also contains 685 cases of taxa that are
 flagged as both “unclassified inherited” and “unclassified”
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
based on 
\family typewriter
grep unclass.*unclassified
\backslash
_inherited taxonomy.tsv
\end_layout

\end_inset

.
\end_layout

\begin_layout Plain Layout
We would like to stop suppressing (pruning) incertae sedis taxa, so that
 groups such as Regulus can appear appear in the synthetic tree.
\end_layout

\begin_layout Plain Layout
\begin_inset Note Comment
status collapsed

\begin_layout Plain Layout
While we get Regulus back, we do not end up placing it in Sylviidae because
 Sylviidae is broken.
 It conflicts with about 20 different trees.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Taxonomy details
\end_layout

\begin_layout Plain Layout

\series bold
Flags.

\series default
 The Open Tree’s reference taxonomy is produced by a tool called smasher
 that notices hints that a taxon is incertae sedis and labels that taxon
 with one of five flags
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
see 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://github.com/OpenTreeOfLife/reference-taxonomy/wiki/Taxon-flags
\end_layout

\end_inset

.This document is not concerned with the flagging system 
\emph on
per se
\emph default
, so “
\emph on
incertae sedis
\emph default
” will be used here to refer to all of the flags that denote taxa with uncertain
 placement.
\end_layout

\end_inset

.
 While a taxonomist may intend to use incertae sedis to indicate a limited
 number of possible positions for a taxon to go in the taxonomy, we do not
 retain any such details.
\end_layout

\begin_layout Plain Layout

\series bold
Container nodes.

\series default
 Some taxonomies have nodes with names like 
\begin_inset Quotes eld
\end_inset

Incertae sedis (Bacteria)
\begin_inset Quotes erd
\end_inset

.
 Such nodes are called containers.
 They indicate that each child node is an 
\emph on
incertae sedis
\emph default
 child of the container node's parent.
 The OTT retains container nodes with the 
\emph on
was_container
\emph default
 flag, but seems to have already moved all of the container's children to
 the container's parent.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
In order to incorporate 
\emph on
incertae sedis 
\emph default
taxa into a supertree analyses, we first tackle the issue of the semantics
 of 
\emph on
incertae sedis
\emph default
 taxa.
 We discuss various different things the term can mean within the literature,
 and settle on a specific usage here.
 We discuss how to move from an operational 
\begin_inset Quotes eld
\end_inset

you can move this guy here
\begin_inset Quotes erd
\end_inset

 semantics to a splits-based semantics.
 This affects both what it means for a taxonomy edge to conflict with the
 synthesis tree, and what it means to place a taxon name on a particular
 node in the synthesis tree.
 Finally, after a supertree has been constructed, we consider how to interpret
 the supertree as (perhaps) placing an 
\emph on
incertae sedis
\emph default
 taxon 
\begin_inset Formula $A$
\end_inset

 within its sister taxon 
\begin_inset Formula $B$
\end_inset

.
 
\end_layout

\end_inset

 In order to incorporate 
\emph on
incertae sedis 
\emph default
taxa into a supertree analyses, we must arrive at an operational definition
 of the meaning of the 
\emph on
incertae sedis
\emph default
 label.
 Ideally, the 
\emph on
incertae sedis
\emph default
 annotation some taxon 
\emph on
x
\emph default
 would be accompanied by a specific statement about which other taxa might
 include 
\emph on
x
\emph default
.
 Detailed readings of the character argumentation used by taxonomists could
 provide this sort of specific information in many cases, but we lack such
 information on the scale of the entire Open Tree of Life taxonomy.
 Thus, here we pursue an approach of ascribing a meaning to the 
\emph on
incertae sedis
\emph default
 label which attempts to capture the core of the idea that it articulates,
 but which can be applied automatically across the taxonomy without additional
 information.
 We seek a semantics for supertrees with 
\emph on
incertae sedis 
\emph default
taxa that satisfy the following properties:
\end_layout

\begin_layout Enumerate
An 
\emph on
incertae sedis
\emph default
 node may intrude into its siblings and their descendants.
\end_layout

\begin_layout Enumerate
Two 
\emph on
incertae sedis
\emph default
 siblings may not be interdigitated.
\end_layout

\begin_layout Enumerate
Any placement 
\begin_inset Formula $T\to T^{*}$
\end_inset

 of a tree 
\begin_inset Formula $T$
\end_inset

 with 
\emph on
incertae sedis
\emph default
 taxa is also accessible from a tree 
\begin_inset Formula $T^{\prime}$
\end_inset

 that is created from 
\begin_inset Formula $T$
\end_inset

 by taking a taxon, attaching it to an ancestor, and marking it 
\emph on
incertae sedis
\emph default
.
\begin_inset Note Comment
status open

\begin_layout Plain Layout
MTH: I don't understand this
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
The semantics of an 
\emph on
incertae sedis
\emph default
 node does not depend on assigned ranks, but only on the tree.
\end_layout

\begin_layout Enumerate
Semantics is based on deriving a split for each branch of the tree.
\end_layout

\begin_layout Standard
Here we focus on a split-based semantics instead of a semantics based on
 apply of a series of edit operations to the tree.
 The split-based semantics allows us to seek trees that are simultaneously
 consistent with a set of split-constraints.
 The use of a split-based semantics does impose some limitations.
 These come primarily because in the edit-based semantics, after we place
 an 
\emph on
incertae sedis
\emph default
 taxon, it is no loner 
\emph on
incertae sedis
\emph default
, whereas with the split-based semantics taxa are either always 
\emph on
incertae sedis
\emph default
 or never 
\emph on
incertae sedis
\emph default
.
\end_layout

\begin_layout Standard
This has an effect, for example, when we consider two incertae sedis siblings
 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $B$
\end_inset

.
 If we can place 
\begin_inset Formula $A$
\end_inset

 within 
\begin_inset Formula $B$
\end_inset

, and 
\begin_inset Formula $B$
\end_inset

 within 
\begin_inset Formula $A$
\end_inset

, then a split-based semantics allows us to freely inter-digitate 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $B$
\end_inset

.
 If we do not want to allow 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $B$
\end_inset

 to be inter-digitated, then we cannot both 
\begin_inset Formula $A$
\end_inset

 within 
\begin_inset Formula $B$
\end_inset

 and 
\begin_inset Formula $B$
\end_inset

 within 
\begin_inset Formula $A$
\end_inset

.
 In addition, we can imagine that a family 
\begin_inset Formula $A$
\end_inset

 is incertae sedis within a kingdom.
 In an edit-based semantics, we could place 
\begin_inset Formula $A$
\end_inset

 as a sibling to a genus 
\begin_inset Formula $B$
\end_inset

, mark 
\begin_inset Formula $A$
\end_inset

 as non-
\emph on
incertae-sedis
\emph default
, and then place 
\begin_inset Formula $B$
\end_inset

 within 
\begin_inset Formula $A$
\end_inset

.
 In a split-based semantics, we must disallow either 
\begin_inset Formula $B$
\end_inset

 within 
\begin_inset Formula $A$
\end_inset

 or 
\begin_inset Formula $A$
\end_inset

 within 
\begin_inset Formula $B$
\end_inset

 if we want to disallow interdigitation.
\end_layout

\begin_layout Standard
As a result of this, we cannot satisfy all five of these criteria.
 Thus, we describe two alternative split-based semantics.
 The non-interdigitation semantics gets # (1,2,4,5), and the interdigitation
 semantics gets (1,3,4,5).
 This makes the point that each semantics results from different choices
 about which criteria to satisfy.
\end_layout

\begin_layout Subsection
Split-based semantics for 
\emph on
incertae sedis
\emph default
 taxa
\end_layout

\begin_layout Standard
In order to apply supertree methods to rooted trees with 
\emph on
incertae sedis
\emph default
 taxa, we first propose a semantics of 
\emph on
incertae sedis 
\emph default
in terms of rooted splits.
 We define rooted splits by noting that each edge of a tree divides the
 tip taxa 
\begin_inset Formula $\mathcal{L}$
\end_inset

 into two groups: the include set 
\begin_inset Formula $\mathcal{I}(e)$
\end_inset

 which does not contain the root, and the exclude set 
\begin_inset Formula $\mathcal{E}(e)$
\end_inset

 which does contain the root.
 Such a split may be written
\begin_inset Formula 
\[
\mathcal{I}(e)|\bullet\mathcal{E}(e).
\]

\end_inset

where the 
\begin_inset Formula $\bullet$
\end_inset

 indicates the root.
 If no taxa are 
\emph on
incertae sedis
\emph default
, then the exclude set for a node is just the total tip set minus the include
 set for the node:
\begin_inset Formula 
\begin{align*}
\mathcal{E}(n) & =\mathcal{L}-\mathcal{I}(n).
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
For a node 
\begin_inset Formula $n$
\end_inset

 on the tip-ward side of an edge 
\begin_inset Formula $e$
\end_inset

, we may also write 
\begin_inset Formula $\mathcal{I}(n)$
\end_inset

 for 
\begin_inset Formula $\mathcal{I}(e)$
\end_inset

, and 
\begin_inset Formula $\mathcal{E}(n)$
\end_inset

 for 
\begin_inset Formula $\mathcal{E}(e)$
\end_inset

.
 
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
We consider the exclude set of the root node to be empty, and the include
 set of the root node to contain all tip taxa:
\begin_inset Formula 
\begin{align*}
\mathcal{E}(root) & =\{\}\\
\mathcal{I}(root) & =\mathcal{L}.
\end{align*}

\end_inset

In this case the root node stands for an edge that connects the root to
 the root's parent.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For any two rooted splits 
\begin_inset Formula $A=A_{1}|\bullet A_{2}$
\end_inset

 and 
\begin_inset Formula $B=B_{1}|\bullet B_{2}$
\end_inset

 , we say that 
\begin_inset Formula $A$
\end_inset

 
\emph on
displays 
\emph default

\begin_inset Formula $B$
\end_inset

 if 
\begin_inset Formula $B_{1}\subseteq A_{1}$
\end_inset

 and 
\begin_inset Formula $B_{2}\subseteq A_{2}$
\end_inset

.
\end_layout

\begin_layout Subsubsection
A semantics that disallows inter-digitating 
\emph on
incertae sedis
\emph default
 siblings
\end_layout

\begin_layout Standard
An 
\emph on
incertae sedis
\emph default
 taxon can be moved into any of the descendants of its siblings.
 We seek to represent this by constructing modified splits for each branch
 of the taxonomy tree.
 The include sets of these splits remain unchanged, but we construct reduced
 exclude sets in order to allow 
\emph on
incertae sedis
\emph default
 taxa to intrude into their sibling taxa.
\end_layout

\begin_layout Standard
The reduced exclude set 
\begin_inset Formula $\mathcal{E}(n)$
\end_inset

 for node 
\begin_inset Formula $n$
\end_inset

 should therefore not contain the descendants of its siblings which are
 marked 
\emph on
incertae 
\emph default
sedis
\emph on
,
\emph default
 but should contain the descendants of its other siblings
\emph on
.
 
\emph default
We additionally stipulate that it is not possible for 
\emph on
incertae sedis
\emph default
 taxa to intrude into their 
\emph on
incertae sedis
\emph default
 siblings.
 (This is not the only way to construct a split-based semantics for 
\emph on
incertae sedis
\emph default
, but it avoids certain complications, as noted in the discussion.) We thus
 define 
\begin_inset Formula $\mathcal{I}(m,n)$
\end_inset

 to indicate descendants of 
\begin_inset Formula $m$
\end_inset

 that are excluded from 
\begin_inset Formula $n$
\end_inset

.
 Thus:
\begin_inset Formula 
\begin{align*}
\mathcal{I}(m,n) & =\begin{cases}
\emptyset & \text{if }n\text{ is \emph{incertae sedis}\,and }m\text{ is not}\\
\mathcal{I}(m) & \text{otherwise}
\end{cases}
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
Additionally, the exclude set 
\begin_inset Formula $\mathcal{E}(n)$
\end_inset

 should contain the children of all the ancestors of 
\begin_inset Formula $n$
\end_inset

, unless those children are 
\emph on
incertae sedis
\emph default
.
 To avoid traversing all ancestors separately for each node 
\begin_inset Formula $n$
\end_inset

, we note that the excluded children of any ancestors will be in the exclude
 set of the parent of 
\begin_inset Formula $n$
\end_inset

 already.
 Therefore, we can write the exclude set of a node 
\begin_inset Formula $n$
\end_inset

 in terms of the exclude set of its parent:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{align}
\mathcal{E}(n) & =\mathcal{E}(parent(n))\cup\left[\mathcal{I}(m,n)\big|m\in siblings(n)\right].\label{eq:exclude-set-formula-1}
\end{align}

\end_inset

This formula allows us to compute exclude sets via a pre-order traversal
 on the taxonomy tree with exclude set for the root node defined to be 
\begin_inset Formula $\emptyset$
\end_inset

.
\end_layout

\begin_layout Standard

\series bold
Problem:
\series default
 how about the goal that we should be able to get the same outcome by moving
 a taxon up one level and marking it as incertae sedis? This might require
 that moving A next to B, and then moving B into A is allowed.
\end_layout

\begin_layout Standard

\series bold
Problem:
\series default
 should we be able to move incertae sedis taxa down into incertae sedis
 taxa? If not, then we must change the recursion.
\end_layout

\begin_layout Subsubsection
An alternative semantics that allows inter-digitating incertae sedis siblings
\end_layout

\begin_layout Standard
If we want to allow placing two incertae sedis siblings within each other,
 then incertae sedis siblings are never excluded.
\end_layout

\begin_layout Standard
Furthermore, consider placing 
\begin_inset Formula $A$
\end_inset

 as a sibling of 
\begin_inset Formula $B$
\end_inset

, and then placing 
\begin_inset Formula $B$
\end_inset

 within 
\begin_inset Formula $A$
\end_inset

.
 In order for this to work, 
\begin_inset Formula $A$
\end_inset

 must not exclude the incertae sedis children of 
\begin_inset Formula $B$
\end_inset

.
\end_layout

\begin_layout Standard
In order to accomplish both of these goals, we define the descendants 
\begin_inset Formula $\mathcal{I}^{\prime}(n)$
\end_inset

 that are accessible without passing through an incertae sedis node.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{align*}
\mathcal{I^{\prime}}(n) & =\begin{cases}
\emptyset & \text{if }n\in\mathcal{U}\\
\{n\} & \text{if }n\text{ is a leaf}\\{}
[\mathcal{I}^{\prime}(c)|c\in children(n)] & \text{otherwise.}
\end{cases}
\end{align*}

\end_inset

We may then define the taxa excluded from 
\begin_inset Formula $n$
\end_inset

 as:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{align*}
\mathcal{E}(n) & =\mathcal{E}(parent(n))\cup[\mathcal{I}^{\prime}(s)|s\in siblings(n)].
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
This semantics satisfies criteria 1,3,4, and 5 above.
\end_layout

\begin_layout Subsubsection
A third semantics
\end_layout

\begin_layout Standard
OK, the idea here is that we want to avoid inter-digitation.
 
\emph on
Incertae sedis
\emph default
 taxa thus exclude
\emph on
 incertae sedis
\emph default
 siblings.
 However, where the first semantics allows 
\emph on
incertae sedis 
\emph default
taxa to intrude into
\emph on
 incertae sedis 
\emph default
descendants of siblings, but not allow
\emph on
 incertae sedis
\emph default
 descendants of siblings to intrude into 
\emph on
incertae sedis
\emph default
 taxa, here we do the reverse.
\end_layout

\begin_layout Standard
OK, so the idea here is that an
\emph on
 incertae sedis
\emph default
 group excludes
\end_layout

\begin_layout Itemize

\emph on
incertae sedis
\emph default
 siblings
\end_layout

\begin_layout Itemize

\emph on
incertae sedis 
\emph default
descendants of ancestors
\end_layout

\begin_layout Itemize
but not
\emph on
 incertae sedis
\emph default
 descendants of non-incertae-sedis siblings
\end_layout

\begin_layout Standard
It is also possible to allow placing 
\begin_inset Formula $A$
\end_inset

 as a sibling of 
\begin_inset Formula $B$
\end_inset

 and then placing 
\begin_inset Formula $B$
\end_inset

 within 
\begin_inset Formula $A$
\end_inset

 if we disallow placing 
\begin_inset Formula $A$
\end_inset

 into incertae sedis descendants of its siblings.
 We may then allow placing those descendants within 
\begin_inset Formula $A$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{align*}
\mathcal{I^{\prime}}(n) & =\begin{cases}
\emptyset & \text{if }n\in\mathcal{U}\\
\{n\} & \text{if }n\text{ is a leaf}\\{}
[\mathcal{I}^{\prime}(c)|c\in children(n)] & \text{otherwise.}
\end{cases}
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
We use 
\begin_inset Formula $\mathcal{I}(m,n)$
\end_inset

 to indicate the descendants of 
\begin_inset Formula $m$
\end_inset

 that are excluded from 
\begin_inset Formula $n$
\end_inset

.
\begin_inset Formula 
\begin{align*}
\mathcal{I}(m,n) & =\begin{cases}
\emptyset & \text{if }n\text{ is \emph{incertae sedis}\,and }m\text{ is not}\\
\mathcal{I}(m) & \text{if }n\text{ and }m\text{ are both }incertae\,sedis\\
\mathcal{I}^{\prime}(m) & \text{otherwise.}
\end{cases}
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
We may then define the taxa excluded from 
\begin_inset Formula $n$
\end_inset

 as:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{align*}
\mathcal{E}(n) & =\begin{cases}
\left[\mathcal{L}-\mathcal{I}(parent(n))\right]\cup[\mathcal{I}(s,n)|s\in siblings(n)] & \text{if }n\in\mathcal{U}\\
\mathcal{E}(parent(n))\cup[\mathcal{I}(s,n)|s\in siblings(n)] & \text{otherwise.}
\end{cases}
\end{align*}

\end_inset

I think this works...
 but need to double-check.
\end_layout

\begin_layout Standard
Also: can we genericize 
\begin_inset Formula $\mathcal{E}(parent(n))$
\end_inset

?
\end_layout

\begin_layout Subsection
Naming 
\end_layout

\begin_layout Standard
After constructing a supertree, tip nodes already have names in 
\emph on

\begin_inset Formula $\mathcal{L}$
\end_inset


\emph default
.
 However, we still need to assign higher taxon names to internal supertree
 nodes based on the taxonomy tree in the problem.
 Each taxon name 
\begin_inset Formula $n$
\end_inset

 corresponds to a split 
\begin_inset Formula $S(n)=S(n)_{1}|\bullet S(n)_{2}$
\end_inset

 on the corresponding branch of the taxonomy tree.
 Without 
\emph on
incertae sedis
\emph default
, such splits are always of the form 
\begin_inset Formula $S(n)_{1}|\bullet\mathcal{L}-S(n)_{1}$
\end_inset

, but with 
\emph on
incertae sedis
\emph default
 taxa 
\begin_inset Formula $S_{2}(n)$
\end_inset

 may be smaller than 
\begin_inset Formula $\mathcal{L}-S(n)_{1}$
\end_inset

.
\end_layout

\begin_layout Standard
Without 
\emph on
incertae sedis
\emph default
, each name applies to at most one node, and each node can take at most
 one name, with the exception of monotypic taxa.
 Thus, we may simply search the solution tree for a node that has the same
 cluster 
\begin_inset Formula $S(n)_{1}$
\end_inset

 and apply the name 
\begin_inset Formula $n$
\end_inset

 to that node.
\end_layout

\begin_layout Standard
However, in the 
\emph on
incertae sedis
\emph default
 framework, it is possible for one name to apply to multiple nodes.
 For example, in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:One-name-can"
plural "false"
caps "false"
noprefix "false"

\end_inset

b, the name 
\begin_inset Formula $A$
\end_inset

 can apply to nodes 
\begin_inset Formula $x$
\end_inset

 and 
\begin_inset Formula $y$
\end_inset

.
 Here the name 
\begin_inset Formula $A$
\end_inset

 corresponds to the split 
\begin_inset Formula $A1\,A2\,|\bullet B\,C$
\end_inset

, leaving out 
\begin_inset Formula $D$
\end_inset

 since it is 
\emph on
incertae sedis
\emph default
.
 The two nodes 
\begin_inset Formula $x$
\end_inset

 and 
\begin_inset Formula $y$
\end_inset

 display the splits 
\begin_inset Formula $A1\,A2\,|\bullet B\,C\,D$
\end_inset

 and 
\begin_inset Formula $A1\,A2\,D|\bullet B\,C$
\end_inset

 respectively, and both of these splits display the split 
\begin_inset Formula $A1\,A2\,|\bullet B\,C$
\end_inset

, so the name 
\begin_inset Formula $A$
\end_inset

 can apply to both 
\begin_inset Formula $x$
\end_inset

 and 
\begin_inset Formula $y$
\end_inset

.
 This cannot happen without
\emph on
 incertae sedis
\emph default
 taxa except at monotypic nodes.
 When faced with a choice about where to place a name, our solution is to
 find the most tip-ward node where the name can apply and attach the name
 to this node.
 This corresponds to a conservative choice about whether 
\emph on
incertae sedis
\emph default
 taxa should be added to an existing taxon.
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset space \hfill{}
\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename Figures/name1nodes2/tax-shaded.svg
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Taxonomy tree
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename Figures/name1nodes2/solution-shaded.svg
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Solution tree
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:One-name-can"

\end_inset

One name can be consistent with multiple nodes.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
It is also possible for multiple names to apply to a single node.
 For example, in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Multiple-names-can"
plural "false"
caps "false"
noprefix "false"

\end_inset

a, the taxon 
\begin_inset Formula $A$
\end_inset

 corresponds to the split 
\begin_inset Formula $B1\,B2\,C\,|\bullet\,Y$
\end_inset

, and its child taxon 
\begin_inset Formula $B$
\end_inset

 corresponds to the split 
\begin_inset Formula $B1\,B2\,|\bullet\,Y$
\end_inset

.
 The edge leading to 
\begin_inset Formula $A$
\end_inset

 is consistent with the split for 
\begin_inset Formula $B$
\end_inset

, but the name 
\begin_inset Formula $B$
\end_inset

 is applied to the node with the smallest include group.
 However, in the solution tree (Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Multiple-names-can"
plural "false"
caps "false"
noprefix "false"

\end_inset

b), there is is only node for both names 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $B$
\end_inset

 to apply to.
 In this case, we solve this problem by introducing a monotypic parent,
 and applying 
\begin_inset Formula $A$
\end_inset

 to the newly created parent node (Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Multiple-names-can"
plural "false"
caps "false"
noprefix "false"

\end_inset

c).
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset space \hfill{}
\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename Figures/names2nodes1/tax-shaded.svg
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Taxonomy tree
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename Figures/names2nodes1/synth-shaded.svg
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Solution tree
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename Figures/names2nodes1/solution2-shaded.svg
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Solution tree
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Multiple-names-can"

\end_inset

Multiple names can apply to a single node.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
1.
 OK, so suppose that we have two nodes 
\begin_inset Formula $n_{1}$
\end_inset

 and 
\begin_inset Formula $n_{2}$
\end_inset

, where 
\begin_inset Formula $n_{2}$
\end_inset

 is an ancestor of 
\begin_inset Formula $n_{1}$
\end_inset

.
 Further suppose that the path from 
\begin_inset Formula $n_{1}$
\end_inset

 to 
\begin_inset Formula $n_{2}$
\end_inset

 traverses the intermediate nodes 
\begin_inset Formula $N_{1}\ldots N_{m}$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Formula $S(n_{2})=\mathcal{I}(n_{2})|\mathcal{E}(n_{2})$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Formula 
\begin{align*}
S(n_{1}) & =\mathcal{I}(n_{1})|\mathcal{E}(n_{1})\\
 & =\mathcal{I}(n_{1})|\mathcal{E}(N_{1})\cup[\mathcal{I}(m,n_{1}):m\in siblings(n_{1})]\\
 & =\mathcal{I}(n_{1})|\mathcal{E}(n_{2})\cup\bigcup_{n\in N}[\mathcal{I}(m,n):m\in siblings(n)].
\end{align*}

\end_inset


\end_layout

\begin_layout Plain Layout
Now, it will be impossible for 
\begin_inset Formula $S(n_{1})$
\end_inset

 and 
\begin_inset Formula $S(n_{2})$
\end_inset

 to be both implied by the same branch in the supertree if 
\begin_inset Formula $S_{1}(n_{1})$
\end_inset

 overlaps 
\begin_inset Formula $S_{2}(n_{2})$
\end_inset

 or if 
\begin_inset Formula $S_{2}(n_{1})$
\end_inset

 overlaps 
\begin_inset Formula $S_{1}(n_{2})$
\end_inset

.
 Since 
\begin_inset Formula $\mathcal{I}(n_{1})\subseteq\mathcal{I}(n_{2})$
\end_inset

, 
\begin_inset Formula $S_{1}(n_{1})\cap S_{2}(n_{2})$
\end_inset

 must be empty.
 Thus the requirement is that 
\begin_inset Formula $S_{2}(n_{1})\cap S_{1}(n_{2})$
\end_inset

 is empty.
 Now for each 
\begin_inset Formula $\mathcal{I}(m,n)$
\end_inset

 in 
\emph on

\begin_inset Formula $S_{2}(n_{1})$
\end_inset

, 
\begin_inset Formula $\mathcal{I}(m)\cap S_{1}(n_{2})$
\end_inset


\emph default
 is 
\emph on
not
\emph default
 empty.
 Thus, this can only hold if 
\begin_inset Formula $\mathcal{I}(m,n)$
\end_inset

 is empty, which occurs if 
\begin_inset Formula $m$
\end_inset

 is 
\emph on
incertae sedis
\emph default
 and 
\begin_inset Formula $n$
\end_inset

 is not incertae sedis.
 Thus one node can support 2 names 
\begin_inset Formula $n_{2}$
\end_inset

 and 
\begin_inset Formula $n_{1}$
\end_inset

 if 
\begin_inset Formula $n_{2}$
\end_inset

 is the ancestor of 
\begin_inset Formula $n_{1}$
\end_inset

 and all siblings of nodes on the path from 
\begin_inset Formula $n_{2}$
\end_inset

 to 
\begin_inset Formula $n_{1}$
\end_inset

 are incertae sedis, and the nodes on the path are 
\emph on
not
\emph default
 incertae sedis.
\end_layout

\begin_layout Plain Layout
2.
 Now, suppose that 
\begin_inset Formula $n$
\end_inset

 and 
\begin_inset Formula $m$
\end_inset

 have a common ancestor 
\begin_inset Formula $a$
\end_inset

, and the path from 
\begin_inset Formula $n$
\end_inset

 to 
\begin_inset Formula $a$
\end_inset

 contains the nodes 
\begin_inset Formula $N$
\end_inset

, and the path from 
\begin_inset Formula $m$
\end_inset

 to 
\begin_inset Formula $a$
\end_inset

 contains the nodes 
\begin_inset Formula $M$
\end_inset

.
 Then we have 
\begin_inset Formula 
\begin{align*}
S(n) & =\mathcal{I}(n)|\mathcal{E}(a)\cup\bigcup_{x\in N}[\mathcal{I}(y,x):y\in siblings(x)]\\
S(m) & =\mathcal{I}(m)|\mathcal{E}(a)\cup\bigcup_{x\in M}[\mathcal{I}(y,x):y\in siblings(x)].
\end{align*}

\end_inset

Thus, we need 
\begin_inset Formula $n$
\end_inset

 to avoid excluding 
\begin_inset Formula $\mathcal{I}(m)$
\end_inset

, and 
\begin_inset Formula $m$
\end_inset

 to avoid excluding 
\begin_inset Formula $\mathcal{I}(n)$
\end_inset

.
 However, 
\begin_inset Formula $\mathcal{E}(n)$
\end_inset

 definitely includes 
\begin_inset Formula $\mathcal{I}(m,n)$
\end_inset

 and 
\begin_inset Formula $\mathcal{E}(m)$
\end_inset

 includes 
\begin_inset Formula $\mathcal{I}(n,m)$
\end_inset

.
 ....
 Finish proof...
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\emph on
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout

\series bold
BDR:
\series default
 
\emph on
It is well known that monotypic taxa are indistinguishable if you consider
 only splits on leaf labels, but are distinguishable if you consider splits
 on all node labels.
 It seems that some (all?) of the problems with assigning multiple names
 to the same nodes actually comes from the fact that moving IS taxa can
 leave the parent as a degree-2 node.
 The fact that propinquity handles monotypic taxa indicates that we actually
 implicitly consider all taxa to have labels.
 It is possible that a trivial extension to the sub-problem solved could
 thus handle monotypic taxa and issues with mapping 2 names to one node
 with incertae sedis taxa.
\end_layout

\end_inset


\emph default

\begin_inset Note Note
status collapsed

\begin_layout Subsubsection
Multiple names fit a single node
\end_layout

\begin_layout Paragraph
Example 1
\end_layout

\begin_layout Plain Layout
Suppose the taxonomy is (((B1,B2)B,C*)A,Y) and the input tree is (((B1,C),B2)x,Y
) then the names A and B both to the node x.
 In this case the names A and B are ordered.
\end_layout

\begin_layout Plain Layout

\series bold
Case 1:
\series default
 If a taxon contains 2 non-IS taxa, then it cannot be identical with any
 of its children in the synthesis tree.
\end_layout

\begin_layout Plain Layout

\series bold
Case 2:
\series default
 If a taxon contains 1 non-IS taxon and 
\begin_inset Formula $\ge1$
\end_inset

 IS taxa, then the taxon could be identical with is non-IS child in the
 synthesis tree, if the IS taxa are placed within the child.
\end_layout

\begin_layout Plain Layout

\series bold
Case 3:
\series default
 If a node contains 0 non-IS taxa and 1 IS taxon, then the IS taxa behaves
 no differently than a non-IS taxa, since is has no siblings it could be
 placed into.
\end_layout

\begin_layout Plain Layout

\series bold
Case 4:
\series default
 If a node contains 0 non-IS taxa and 
\begin_inset Formula $\ge2$
\end_inset

 IS taxa, then then taxon 
\emph on
could
\emph default
 be identical with a non-IS child in the synthesis tree, if all but one
 IS children are placed with in one of the IS children.
\end_layout

\begin_layout Plain Layout

\series bold
Solution:
\series default
 When we assign multiple names to the same node, then we expand the node
 with multiple names to have monotypic parents, and assign the series of
 names to the monotypic parents.
 Another way of saying this is that when a node has 
\begin_inset Formula $\le1$
\end_inset

 non-IS taxon and 
\begin_inset Formula $\ge2$
\end_inset

 taxa then the node could become monotypic by placement of the IS taxa.
\end_layout

\begin_layout Plain Layout

\series bold
Example 2
\end_layout

\begin_layout Plain Layout
If ((A1,A2)A,(B1,B2)B*,(C1,C2)C*); is the taxonomy with asterisks denoting
 incertae sedis taxa, then the solution ((A1,A2)A,((B1,C1)mrcaB1C1,(B2,C2)mrcaB2
C2)x); has a node x that could be called B* or C*.
\end_layout

\begin_layout Plain Layout

\series bold
Case:
\series default
 If a taxa B* and C* are IS, then their tips can be intermingled in a new
 clade x.
 Both names would then apply.
\end_layout

\begin_layout Plain Layout

\series bold
Solution:
\series default
 ??
\end_layout

\begin_layout Plain Layout
In summary, a taxon with split 
\begin_inset Formula $A_{1}|\bullet B_{1}$
\end_inset

 attaches to the most tipward node 
\begin_inset Formula $n$
\end_inset

 where 
\begin_inset Formula $A_{1}\subseteq S_{1}(n)$
\end_inset

 and 
\begin_inset Formula $B_{1}\subseteq S_{2}(n)$
\end_inset

.
 If multiple names end up on the same node, we try to resolve the problem
 by creating a monotypic node for a name that is more rootward than all
 other names at that node.
 If this fails to resolve the problem, we arbitrarily choose one of the
 names.
 
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Placement"

\end_inset

Placement
\end_layout

\begin_layout Standard
After we have attached taxon names to the synthesis tree, we would like
 to interpret the position of these names in terms of placing 
\emph on
incertae sedis 
\emph default
taxa in a revised taxonomy.
 This would allow us to interpret the synthesis tree as saying that phylogenetic
 information has (for example) placed genus A within family B, or perhaps
 outside of all named families.
 The simplest approach to placement involves noting whenever a taxon 
\begin_inset Formula $B$
\end_inset

 is a descendant of a taxon 
\begin_inset Formula $A$
\end_inset

 on the named synthesis tree but not the taxonomy tree.
 For example, in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Handling-incertae-sedis"
plural "false"
caps "false"
noprefix "false"

\end_inset

, taxon 
\begin_inset Formula $C$
\end_inset

 is a descendant of taxon 
\begin_inset Formula $A$
\end_inset

 in the synthetic tree (Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Handling-incertae-sedis"
plural "false"
caps "false"
noprefix "false"

\end_inset

d), but not the taxonomy (Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Handling-incertae-sedis"
plural "false"
caps "false"
noprefix "false"

\end_inset

b).
 Thus, we could say that the synthetic tree places 
\begin_inset Formula $C$
\end_inset

 within 
\begin_inset Formula $A$
\end_inset

.
 Furthermore, the synthetic tree additionally places 
\begin_inset Formula $C$
\end_inset

 within 
\begin_inset Formula $AB$
\end_inset

.
\end_layout

\begin_layout Standard
A slightly more general case is shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Broken-incertae-sedis"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Here taxon 
\begin_inset Formula $C1$
\end_inset

 is an descendant of 
\begin_inset Formula $A$
\end_inset

 in the synthesis tree, but not the taxonomy.
 Thus 
\begin_inset Formula $C1$
\end_inset

 is placed within 
\begin_inset Formula $A$
\end_inset

.
 We note that the most recent common ancestor (MRCA) of 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $C1$
\end_inset

 in the taxonomy is the root node, and the path to the MRCA from 
\begin_inset Formula $A$
\end_inset

 is 
\begin_inset Formula $A\to AB\to root$
\end_inset

, while the path to the MRCA from 
\begin_inset Formula $C1$
\end_inset

 is 
\begin_inset Formula $C1\to C\to root$
\end_inset

.
 Here the additional node 
\begin_inset Formula $AB$
\end_inset

 on the path to the MRCA from 
\begin_inset Formula $A$
\end_inset

 indicates that 
\begin_inset Formula $C1$
\end_inset

 is placed within 
\begin_inset Formula $AB$
\end_inset

 as well as 
\begin_inset Formula $A$
\end_inset

.
 In contrast, the additional node 
\begin_inset Formula $C$
\end_inset

 on the path to the MRCA indicates that 
\begin_inset Formula $C1$
\end_inset

 is a broken 
\emph on
incertae sedis
\emph default
 taxon.
 Thus we may consider an algorithm that, for each taxon 
\begin_inset Formula $B$
\end_inset

 on the synthesis tree, finds the closest ancestral taxon 
\begin_inset Formula $A$
\end_inset

, and checks if 
\begin_inset Formula $A$
\end_inset

 is an ancestor of 
\begin_inset Formula $B$
\end_inset

 on the taxonomy.
 If not, we compute the paths 
\begin_inset Formula $A\to A_{1}\to\ldots\to MRCA(A,B)$
\end_inset

 and 
\begin_inset Formula $B\to B_{1}\to\ldots\to MRCA(A,B)$
\end_inset

.
 
\end_layout

\begin_layout Standard
However, this assumes that 
\emph on
incertae sedis
\emph default
 taxa are always placed within their siblings, or descendants of their siblings.
 As such, it does not handle cases such as Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Placing-one-incertae"
plural "false"
caps "false"
noprefix "false"

\end_inset

, in which 
\begin_inset Formula $I$
\end_inset

 is first placed as sibling to 
\begin_inset Formula $AI$
\end_inset

, and then 
\begin_inset Formula $AI$
\end_inset

 is placed within 
\begin_inset Formula $I$
\end_inset

.
 Note that 
\begin_inset Formula $I$
\end_inset

 is not a sibling of 
\begin_inset Formula $AI$
\end_inset

 or a descendant of a sibling.
 Furthermore, the MRCA of 
\begin_inset Formula $I$
\end_inset

 and 
\begin_inset Formula $AI$
\end_inset

 is the root, and the path from 
\begin_inset Formula $AI$
\end_inset

 to the root includes 
\begin_inset Formula $A$
\end_inset

, but 
\begin_inset Formula $A$
\end_inset

 is not broken.
 We suggest that this conundrum may be resolved by first processing the
 placement of 
\begin_inset Formula $I$
\end_inset

 within 
\begin_inset Formula $A$
\end_inset

 by modifying the taxonomy to reflect this placement
\begin_inset Foot
status open

\begin_layout Plain Layout
Does this actually work? Some placements break taxa.
\end_layout

\end_inset

.
 When we consider the placement of 
\begin_inset Formula $AI$
\end_inset

 within 
\begin_inset Formula $I$
\end_inset

 on this modified taxonomy, the MRCA of 
\begin_inset Formula $I$
\end_inset

 and 
\begin_inset Formula $AI$
\end_inset

 is now 
\begin_inset Formula $A$
\end_inset

 instead of the root, and the correct interpretation results.
 We suggest that by walking the tree in a pre-order fashion and processing
 shallowing placements first, the previous approach of finding the MRCA
 and labelling intermediate nodes as either additional placements or broken
 incertae sedis (or incertae_sedis_inherited) taxa holds.
 Such an approach should also handle cases containing nested incertae sedis
 taxa, as in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Placing-one-incertae"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\begin_inset Note Comment
status open

\begin_layout Plain Layout
One question is whether this approach is able to handle nested incertae
 sedis taxa.
\end_layout

\begin_layout Plain Layout
Placement of incertae sedis taxa by input trees is unfortunately not quite
 as simple as finding a single location where an I.S.
 taxon should attach.
 For example, when an incertae sedis taxon is broken, its children need
 to be 
\begin_inset Quotes eld
\end_inset

placed
\begin_inset Quotes erd
\end_inset

 separately.
\end_layout

\begin_layout Plain Layout
Each input tree can relate to an 
\emph on
incertae sedis
\emph default
 taxon 
\begin_inset Formula $(A,B,C)D$
\end_inset

 in a number of ways
\end_layout

\begin_layout Itemize
it could resolve 
\begin_inset Formula $A$
\end_inset

, 
\begin_inset Formula $B$
\end_inset

, 
\begin_inset Formula $C$
\end_inset

, or 
\begin_inset Formula $D$
\end_inset

.
\end_layout

\begin_layout Itemize
it could place 
\begin_inset Formula $D$
\end_inset

 on a degree-2 (=out-degree-1) node that bisects a branch
\end_layout

\begin_layout Itemize
it could place a descendant taxon of 
\begin_inset Formula $D$
\end_inset

 
\end_layout

\begin_layout Itemize
it could place a descendant taxon of 
\begin_inset Formula $D$
\end_inset

 in a 
\emph on
different place
\emph default
 than another input tree.
\end_layout

\begin_layout Itemize
it could place children of 
\begin_inset Formula $D$
\end_inset

 in multiple places, thus conflicting with the branch.
 If the 
\emph on
incertae sedis
\emph default
 taxon 
\begin_inset Formula $(A,B,C)$
\end_inset

 is broken, then 
\begin_inset Formula $A$
\end_inset

, 
\begin_inset Formula $B$
\end_inset

 and 
\begin_inset Formula $C$
\end_inset

 become 
\emph on
incertae sedis
\emph default
 clades in their own right, that may attach separately, except that they
 .
 This is because none of 
\begin_inset Formula $A$
\end_inset

, 
\begin_inset Formula $B$
\end_inset

, or 
\begin_inset Formula $C$
\end_inset

 is in the exclude set of the siblings of 
\begin_inset Formula $D$
\end_inset

.
\end_layout

\end_inset


\end_layout

\begin_layout Section
Synthesis and conflict resolution with incertae sedis taxa
\end_layout

\begin_layout Subsection
Placement causes broken taxa
\end_layout

\begin_layout Standard
Synthesis with 
\emph on
incertae sedis
\emph default
 taxa has the potential to resolve uncertain taxon placements using information
 from phylogenies.
 Since phylogenies are ranked higher than taxonomy, they may place members
 of incertae sedis clades as they wish even when we do not take into account
 the semantics of incertae sedis taxa.
 However, without the incertae sedis semantics described above, placing
 a taxon 
\begin_inset Formula $A$
\end_inset

 within a taxon 
\begin_inset Formula $B$
\end_inset

 results in conflict with taxon 
\begin_inset Formula $B$
\end_inset

 in the taxonomy.
 This has three main effects:
\end_layout

\begin_layout Enumerate
The edge leading to clade 
\begin_inset Formula $B$
\end_inset

 is lost.
\end_layout

\begin_layout Enumerate
Any taxonomy-only children of 
\begin_inset Formula $B$
\end_inset

 are placed at the MRCA of the phylogenetically informed taxa, instead of
 at node 
\begin_inset Formula $B$
\end_inset

.
\end_layout

\begin_layout Enumerate
The name for taxon 
\begin_inset Formula $B$
\end_inset

 is lost.
\end_layout

\begin_layout Enumerate
We do not record 
\begin_inset Formula $A$
\end_inset

 as being placed within 
\begin_inset Formula $B$
\end_inset

.
\end_layout

\begin_layout Standard
In order to avoid a situation where input phylogenies conflict with a large
 number of taxa when 
\emph on
incertae sedis
\emph default
 taxa are placed within them, we have previously filtered 
\emph on
incertae sedis
\emph default
 taxa from the taxonomy when constructing all prior synthesis trees.
\end_layout

\begin_layout Standard
When the synthesis tree conflicts with a taxonomy node, we say that the
 taxon 
\begin_inset Formula $B$
\end_inset

 at that node is a broken taxon.
 Broken taxa have two main effects, both of which are negative.
 First, the name 
\begin_inset Formula $B$
\end_inset

 of the broken taxon is removed from the synthesis tree.
 Second, the conflicting edge for taxon 
\begin_inset Formula $B$
\end_inset

 is not included in the synthesis tree.
 This means that any children of 
\begin_inset Formula $B$
\end_inset

 that are taxonomy-only will not be placed with the children of 
\begin_inset Formula $B$
\end_inset

 that are mentioned in input phylogenies.
 Instead the taxonomy-only children of a broken taxon move towards the root
 of the synthesis tree and attach at the first higher-ranked taxon that
 is an ancestor of 
\begin_inset Formula $B$
\end_inset

 but is not broken.
\end_layout

\begin_layout Standard
We therefore seek a synthesis method that can correctly introduce 
\emph on
incertae sedis
\emph default
 taxa into containing taxa without breaking the containing taxa.
 We change the semantics of names to imply, not the exclusion of all non-include
d taxa, but only some non-included taxa, as described in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Semantics-of-incertae"

\end_inset

.
 As a result of this change in semantics, placing an IS taxon 
\begin_inset Formula $A$
\end_inset

 within a sister taxon 
\begin_inset Formula $B$
\end_inset

 no longer results in conflict with 
\begin_inset Formula $B$
\end_inset

.
 This allows us to retain the split for 
\begin_inset Formula $B$
\end_inset

 within the synthesis tree, so that taxonomy-only children of 
\begin_inset Formula $B$
\end_inset

 are correctly grouped with their siblings that are referenced by the input
 trees.
 We may then retain the name for the no-longer-broken taxon.
 Finally, we are then able to stop filtering 
\emph on
incertae sedis
\emph default
 taxa, so that they appear in the synthesis tree.
 Thus, the synthesis tree is able to represent substantially more species,
 without suffering the loss of taxa and the loss of structure.
\end_layout

\begin_layout Subsection
Conflict with incertae sedis taxa
\end_layout

\begin_layout Standard
When only tip nodes on the taxonomy are 
\emph on
incertae sedis
\emph default
, we have a very simple form of the 
\emph on
incertae sedis
\emph default
 supertree problem.
 However, in practice entire clades may be 
\emph on
incertae sedis
\emph default
, and so more complex issue arise.
 In this section we consider a number of cases that must be handled when
 attempting to place 
\emph on
incertae sedis
\emph default
 taxa.
\end_layout

\begin_layout Standard

\emph on
Note that the synthesis of all input trees before the taxonomy is unaffected
 by incertae sedis information.
\end_layout

\begin_layout Subsection
Conflicting placement among input trees
\end_layout

\begin_layout Standard
[
\series bold
BDR:
\series default
 
\emph on
maybe we should merge this with Figure.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Broken-incertae-sedis"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Although the point of figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:placement-example1"

\end_inset

 is to talk about sub-problem decomposition as well as what the result looks
 like.
\emph default
]
\end_layout

\begin_layout Standard
The addition of 
\emph on
incertae sedis
\emph default
 taxa allows new types of conflict between input trees.
 For example, different input trees might place an incertae sedis taxon
 in conflicting locations.
 This is illustrated in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:placement-example1"

\end_inset

, where the IS taxon (ott7,ott6)ott10 is placed as sister to ott1 by phylogeny
 
\begin_inset Formula $\tau_{1}$
\end_inset

 and as sister ott3 by phylogeny 
\begin_inset Formula $\tau_{2}$
\end_inset

.
 
\end_layout

\begin_layout Standard
When this happens, the placement of the IS taxon is not influenced by its
 being marked IS on the taxonomy.
 Thus, in Example 1, the higher ranked tree 
\begin_inset Formula $\tau_{1}$
\end_inset

 will be reflected in the synthesis tree, ott10 will be placed as sister
 to ott1.
 In contrast, the conflicting placement in 
\begin_inset Formula $\tau_{2}$
\end_inset

 will not be reflected in the synth tree.
 
\end_layout

\begin_layout Standard
All this would occur in the previous version of propinquity.
 Where the updated version differs that (a) the names ott9 and ott8 are
 retained instead of being dropped.
 (b) as a result of not breaking ott8 and ott9, we do not move ott3 and
 ott2 up to ott11.
 [BDR: Extend more figures!]
\end_layout

\begin_layout Subsection
Case 1: An 
\emph on
incertae sedis
\emph default
 clade
\end_layout

\begin_layout Standard
When a clade is marked as 
\emph on
incertae sedis
\emph default
, we need to consider two cases.
 In the first case, the clade may be placed within a sister clade intact
 (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Handling-incertae-sedis"

\end_inset

).
 However, if the clade is not monophyletic in the synthesis tree, then we
 allow the members of the clade to be placed separately (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Broken-incertae-sedis"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename Figures/is-clade/tree1-shaded.svg
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Input tree #1
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename Figures/is-clade/tax-shaded.svg
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Taxonomy
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename Figures/is-clade/synth1-no-is-shaded.svg
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Synthesis Tree (no 
\emph on
incertae sedis
\emph default
)
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename Figures/is-clade/synth1-shaded.svg
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Synthesis Tree (
\emph on
incertae sedis
\emph default
 aware)
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Handling-incertae-sedis"

\end_inset

Handling 
\emph on
incertae sedis 
\emph default
taxa recovers additional edges and taxon names.
 Supertree construction on input tree (a) and taxonomy tree (b) with 
\emph on
incertae sedis
\emph default
 clade 
\begin_inset Formula $C$
\end_inset

 leads to synthesis tree (c).
 However, supertree construction with 
\emph on
incertae sedis
\emph default
 handling constructs tree (d), which recovers taxon name 
\begin_inset Formula $AB$
\end_inset

 and 
\begin_inset Formula $A$
\end_inset

, as well as the edge to clade 
\begin_inset Formula $AB$
\end_inset

.
 Taxon names and edges that are conditional on handling 
\emph on
incertae sedis
\emph default
 are shaded grey.
 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset space \hfill{}
\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename Figures/is-clade/tree1-shaded.svg
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Input tree #1
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename Figures/is-clade/tree3-shaded.svg
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Input tree #2
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space \hfill{}
\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename Figures/is-clade/tax-shaded.svg
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Taxonomy
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename Figures/is-clade/synth2-shaded.svg
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Synthesis Tree #1
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Broken-incertae-sedis"

\end_inset

 
\emph on
Incertae sedis
\emph default
 clade 
\begin_inset Formula $C$
\end_inset

 broken by conflicting placement.
 Input trees (a) and (b) conflict in the placement of taxa in 
\begin_inset Formula $C$
\end_inset

.
 The synthesis supertree (d) places places 
\begin_inset Formula $C1$
\end_inset

 and 
\begin_inset Formula $C2$
\end_inset

 separately within 
\begin_inset Formula $A$
\end_inset

, while unplaced taxa float upwards.
 (
\series bold
Note:
\series default
 This is what the sub-problem solver does.
 The entire pipeline would attach 
\begin_inset Formula $C3$
\end_inset

 at 
\begin_inset Formula $A$
\end_inset

 actually, since it is the MRCA of 
\begin_inset Formula $A1$
\end_inset

 and 
\begin_inset Formula $A2$
\end_inset

.
 Should we change this?) 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
When the input phylogenies conflict on where members of an incertae sedis
 clade should be placed, neither placement is rejected.
 Instead, the taxon 
\begin_inset Formula $C$
\end_inset

 is broken, the name 
\begin_inset Formula $C$
\end_inset

 disappears, and 
\begin_inset Formula $C3$
\end_inset

 floats to the top level.
 Algorithmic, alternatively placements of children of an incertae sedis
 clade lead to contesting of all edges along with taxa might be placed,
 creating a large, merged sub-problem, as in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:placement-example1"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
In Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Broken-incertae-sedis"
plural "false"
caps "false"
noprefix "false"

\end_inset

, tree 
\begin_inset Formula $T_{1}$
\end_inset

 places 
\begin_inset Formula $C1$
\end_inset

 next to 
\begin_inset Formula $A1$
\end_inset

, while 
\begin_inset Formula $T_{2}$
\end_inset

 places 
\begin_inset Formula $C2$
\end_inset

 next to 
\begin_inset Formula $A2$
\end_inset

.
 Since different members of 
\begin_inset Formula $C$
\end_inset

 are placed, neither placement for 
\begin_inset Formula $C$
\end_inset

 is rejected.
 Instead the taxon 
\begin_inset Formula $C$
\end_inset

 is broken, the name 
\begin_inset Formula $C$
\end_inset

 disappears, and 
\begin_inset Formula $C3$
\end_inset

 floats to the top level.
 Furthermore, since taxon 
\begin_inset Formula $C$
\end_inset

 is a broken 
\emph on
incertae sedis 
\emph default
taxon, all of its children are effectively incertae sedis independently,
 with the exception that they cannot be placed within each other.
 Therefore, the names 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $AB$
\end_inset

 are not lost, since the taxa placed within them are 
\emph on
incertae sedis
\emph default
 names.
\end_layout

\begin_layout Standard
The situation here would be different if the monophyly of 
\begin_inset Formula $C$
\end_inset

 was supported by an high-ranked input phylogeny.
 In that case, instead of breaking 
\begin_inset Formula $C$
\end_inset

, we would choose the placement in the highest-ranked tree.
\end_layout

\begin_layout Subsection
Case 2: A nested 
\emph on
incertae sedis
\emph default
 clade
\end_layout

\begin_layout Standard
When 
\emph on
incertae sedis
\emph default
 clades are allowed, it is possible for an 
\emph on
incertae sedis
\emph default
 taxon to be nested within another 
\emph on
incertae sedis
\emph default
 taxon.
 In such a case we must allow the higher-ranked taxon to be placed within
 a sibling, while preserving the right of the lower ranked taxon to be placed
 within a lower-level sibling (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Nested-incertae-sedis"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename Figures/is-nested/tree3-shaded.svg
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Input tree #1
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename Figures/is-nested/tax-shaded.svg
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Taxonomy tree
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename Figures/is-nested/synth3-no-is-shaded.svg
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Synthesis tree (
\emph on
incertae sedis
\emph default
 ignored)
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename Figures/is-nested/synth3-is-shaded.svg
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Synthesis tree (
\emph on
incertae sedis
\emph default
 considered)
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Nested-incertae-sedis"

\end_inset

Nested incertae sedis taxa.
 (a) Input tree #1 places CI1 within CG, and C within 
\begin_inset Formula $A$
\end_inset

.
 (b) In the taxonomy, CI is 
\emph on
incertae sedis 
\emph default
within C, while C is 
\emph on
incertae sedis
\emph default
 under the root.
 (c) The synthesis tree when 
\emph on
incertae sedis
\emph default
 taxa are not considered.
 The names AB, A, and CG are lost.
 (d) The synthesis tree when 
\emph on
incertae sedis
\emph default
 taxa are considered.
 The names AB, A, and CG are regained, as well as the edges leading to AB
 and CG.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Case 3: Placement of one incertae sedis taxon within another.
\end_layout

\begin_layout Standard
In our semantics of incertae sedis taxa, it is possible for to place one
 
\emph on
incertae sedis
\emph default
 sibling inside another.
 A special case of this is when a higher-rank incertae sedis taxon 
\begin_inset Formula $A$
\end_inset

 is placed as sister to an incertae sedis taxon 
\begin_inset Formula $B$
\end_inset

, and then 
\begin_inset Formula $B$
\end_inset

 is placed within 
\begin_inset Formula $A$
\end_inset

 (Figure #).
\end_layout

\begin_layout Standard

\emph on
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename Figures/is-within-is/tree1.tre.svg
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Input tree #1
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename Figures/is-within-is/tax-shaded.svg
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Taxonomy
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename Figures/is-within-is/synth1-shaded.svg
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Synthesis tree
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Placing-one-incertae"

\end_inset

Placing one incertae sedis group within another.
 Here I is placed within A, and then AI is placed within A.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Handling 
\emph on
incertae sedis
\emph default
 taxa in the propinquity pipeline
\end_layout

\begin_layout Standard
In order to handle 
\emph on
incertae sedis
\emph default
 taxa within propinquity, we must modify some of the stages of the propinquity
 pipeline.
 Subproblem decomposition must place 
\emph on
incertae sedis
\emph default
 taxa in the correct subproblem.
 Subproblem files must indicate which taxa are incertae sedis.
 The subproblem solver must read this information, account for 
\emph on
incertae sedis
\emph default
 taxa when solving subproblems, and correctly name taxa that have been modified
 by having 
\emph on
incertae sedis
\emph default
 taxa place inside them.
 The unpruner must be aware of 
\emph on
incertae sedis
\emph default
 taxa.
 Annotations of the tree must be aware of 
\emph on
incertae sedis
\emph default
 taxa so that it does not consider taxa broken when they have an incertae
 sedis taxon placed inside them.
\end_layout

\begin_layout Subsection
Exemplifying taxa
\end_layout

\begin_layout Standard
One current problem is that well-known taxa like Fungi or Mammalia tend
 to have a very large number of incertae sedis children, making browsing
 in the tree viewer difficult.
 This can happen when, for example, fossils or other hard-to-place taxa
 get classified only to the level of these well-known nodes and no further.
 This leads to a situation where well-known taxa serve as a dumping ground
 for unplaced taxa.
\end_layout

\begin_layout Standard
Our current approach to this problem is to perform a second round of pruning,
 or 
\begin_inset Quotes eld
\end_inset

cleaning
\begin_inset Quotes erd
\end_inset

, during the exemplification step.
 Incertae sedis taxa are pruned at this stage if they do not occur in any
 input trees.
 We thus generate a second 
\begin_inset Quotes eld
\end_inset

cleaned taxonomy
\begin_inset Quotes erd
\end_inset

 that has undergone this further round of cleaning.
 This approach improves on the previous approach in that 
\emph on
incertae sedis
\emph default
 taxa in input trees are no longer pruned.
 This approach also removes tons of 
\emph on
incertae sedis
\emph default
 children from nodes like 
\begin_inset Quotes eld
\end_inset

Fungi
\begin_inset Quotes erd
\end_inset

, where a lot of unplaced fossils with few observable characters have been
 dumped.
 
\end_layout

\begin_layout Standard
However, this approach has the negative effect of pruning some incertae
 sedis taxa that need not be pruned.
 For example, suppose 
\emph on
incertae sedis
\emph default
 taxon 
\begin_inset Formula $A$
\end_inset

 contains 5 children, of which only 1 child 
\begin_inset Formula $A_{1}$
\end_inset

 occurs in an input tree.
 If the taxon 
\begin_inset Formula $A$
\end_inset

 is not broken, then it should be possible to attach the other 4 members
 of 
\begin_inset Formula $A$
\end_inset

 next to 
\begin_inset Formula $A_{1}$
\end_inset

, without cluttering up the synthesis tree.
 Such taxa have been successfully placed even though they are not in any
 input tree.
 This can only be discovered after synthesis is complete, though.
\end_layout

\begin_layout Standard
We should be able to to figure out which incertae sedis taxa are placed
 (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Placement"
plural "false"
caps "false"
noprefix "false"

\end_inset

), and then mark the other ones incertae sedis in the 
\emph on
synthesis tree
\emph default
.
 We could then filter out the taxa that 
\emph on
remain 
\emph default
incertae sedis (or incertae_sedis inherited) in the tree viewer instead
 of the synthesis pipeline.
\end_layout

\begin_layout Subsection
Sub-problem decomposition
\end_layout

\begin_layout Standard
The presence of 
\emph on
incertae sedis 
\emph default
taxa poses a problem to sub-problem decomposition, since taxonomy edges
 no longer completely separate subproblems.
 Instead, 
\emph on
incertae sedis
\emph default
 taxa may attach on either side of a taxonomy edge.
 We seek to place 
\emph on
incertae sedis
\emph default
 taxa into subproblems in such a way that the subproblem solver can perform
 the placement inside the subproblem.
 This approach postpones handling of conflict in 
\emph on
incertae sedis
\emph default
 taxa to the subproblem solver, where the problem is well formulated in
 terms of splits.
 However, it does have the effect of creating larger subproblems.
\end_layout

\begin_layout Standard
We must also handle conflicting placements of 
\emph on
incertae sedis
\emph default
 taxa by different input trees.
 Thus, if one input tree places the 
\emph on
incertae sedis
\emph default
 taxon 
\begin_inset Formula $X$
\end_inset

 in 
\begin_inset Formula $((X)B)A$
\end_inset

 and another places 
\begin_inset Formula $X$
\end_inset

 in 
\begin_inset Formula $((X)C)A$
\end_inset

 then we must mark both edges 
\begin_inset Formula $B$
\end_inset

 and 
\begin_inset Formula $C$
\end_inset

 as contested edges, even if these edges would 
\emph on
not
\emph default
 be contested were taxon 
\begin_inset Formula $X$
\end_inset

 to be removed.
 This results in a new way to contest edges that involves the interaction
 of two input trees, and not just the interaction of each input tree with
 the taxonomy.
\end_layout

\begin_layout Standard
We choose to solve these problems by merging any subproblems that an 
\emph on
incertae sedis
\emph default
 taxon might be placed in.
 The simplest way to achieve this is simply to regard any taxon that has
 an 
\emph on
incertae sedis 
\emph default
taxon placed within it as contested.
 This results in marking both 
\begin_inset Formula $B$
\end_inset

 and 
\begin_inset Formula $C$
\end_inset

 as contested edges in the example above.
 In fact, this is the current behaviour of the non-
\emph on
incertae-sedis
\emph default
 aware subproblem decomposer.
 One downside of this approach is that, if we have 
\begin_inset Formula $((X)B)A)$
\end_inset

 in one input tree, and 
\begin_inset Formula $X$
\end_inset

 is mentioned nowhere else, then by marking 
\begin_inset Formula $B$
\end_inset

 as contested, we are creating unnecessarily large subproblems.
 We could instead placed 
\begin_inset Formula $X$
\end_inset

 in 
\begin_inset Formula $B$
\end_inset

 and avoid contesting the edge 
\begin_inset Formula $B$
\end_inset

.
 However, this approach is more complex and does not seem necessary in practice.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename Figures/placement1/tax.tre.svg
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Taxonomy 
\begin_inset Formula $\taxonomy$
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename Figures/placement1/input1.tre.svg
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Formula $\tau_{1}$
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename Figures/placement1/input2.tre.svg
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Formula $\tau_{2}$
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:placement-example1"

\end_inset

Example.
 An incertae sedis clade (ott6,ott7) is placed in different subtrees by
 input trees 
\begin_inset Formula $\tau_{1}$
\end_inset

 and 
\begin_inset Formula $\tau_{2}$
\end_inset

.
 In 
\begin_inset Formula $\tau_{1}$
\end_inset

, two nodes that correspond to the taxonomy their ingroup extended to include
 (ott6,ott7), and the branches leading to these nodes have been colored
 blue.
 The dashed blue edge leads to a node that is a newly-introduced degree-2
 node which does not correspond to any taxonomy node.
 In 
\begin_inset Formula $\tau_{2}$
\end_inset

, only one node that corresponds to a taxonomy node needs to have its ingroup
 extended.
 The placement of (ott6,ott7) into ott8 toward ott1 by 
\begin_inset Formula $\tau_{1}$
\end_inset

 conflicts with the placement of (ott6,ott7) into ott9 toward ott3 by 
\begin_inset Formula $\tau_{2},$
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

 For example, in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:placement-example1"

\end_inset

, input tree 
\begin_inset Formula $\tau_{1}$
\end_inset

 contests ott9 and input tree 
\begin_inset Formula $\tau_{2}$
\end_inset

 contests ott9 and ott8.
 Thus ott1, ott2, ott3, ott6, and ott7 end up in the same sub-problem.
\end_layout

\begin_layout Subsection
Subproblem solution
\end_layout

\begin_layout Standard
Our sub-problem solver naturally handles 
\emph on
incertae sedis
\emph default
 taxa.
 This is because we define the semantics of 
\emph on
incertae sedis
\emph default
 taxa in terms of partial splits, and our solver natively supports building
 trees from partial splits through its use of the BUILD algorithm.
 Handling 
\emph on
incertae sedis
\emph default
 taxa thus requires loading incertae sedis information and computing partial
 splits for 
\emph on
incertae sedis
\emph default
 taxa before solving a sub-problem.
 After solving a sub-problem, we must apply taxon names from the taxonomy
 tree to the sub-problem solution tree.
 The solution tree is considered to a fixed tree and not to have any 
\emph on
incertae sedis
\emph default
 nodes, or any other forms of uncertainty.
\end_layout

\begin_layout Subsubsection
Reading incertae sedis information
\end_layout

\begin_layout Standard
Currently, we read the 
\emph on
incertae sedis
\emph default
 information as a list of OTT ids for 
\emph on
incertae sedis
\emph default
 taxa.
 This does not require adding further annotations to the node names.
 Only taxonomy nodes can be 
\emph on
incertae sedis
\emph default
 at the moment, and only the taxonomy tree for the subproblem contains OTT
 ids for internal nodes.
 Therefore we handle 
\emph on
incertae sedis
\emph default
 information by constructing modified split sets for the lowest-ranked tree
 when the list of 
\emph on
incertae sedis
\emph default
 nodes is not empty.
\end_layout

\begin_layout Subsubsection
Exclude sets modified by 
\emph on
incertae sedis
\emph default
 marks
\end_layout

\begin_layout Standard
Equation (
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:exclude-set-formula-1"

\end_inset

) leads to the following algorithm to compute the exclude set for all nodes
 in a tree.
\end_layout

\begin_layout Enumerate
Set the exclude set of the root node to be empty
\end_layout

\begin_layout Enumerate
For each 
\emph on
node
\emph default
 (except the root) in preorder
\end_layout

\begin_deeper
\begin_layout Itemize
combine the 
\emph on
exclude
\emph default
 set of the parent node with the 
\emph on
include
\emph default
 set of non-
\emph on
incertae-sedis
\emph default
 siblings.
\end_layout

\begin_layout Itemize
store this set in a hash, with key 
\emph on
node
\end_layout

\end_deeper
\begin_layout Standard
This algorithm is currently implemented in 
\emph on
otc-solve-subproblem
\emph default
.
 We store the sets as 
\emph on
std::set
\emph default
.
\begin_inset Note Note
status collapsed

\begin_layout Subsubsection
Should the solution tree 
\emph on
also
\emph default
 have incertae sedis taxa?
\end_layout

\begin_layout Plain Layout
It would be nice if the solution tree could have 
\emph on
incertae sedis
\emph default
 taxa.
 Specifically, it would be nice to be able to reproduce the input in the
 case where the input consists only of a taxonomy (subproblem) with 
\emph on
incertae sedis
\emph default
 taxa.
\end_layout

\begin_layout Plain Layout
In general, we should be able to assign splits from the subproblem trees
 to edges in the solution tree, although this assignment will not be unique.
 Labeling solution edges with splits in this way will identify cases where
 the split associated with an edge is a partial split, and we can float
 sibling subtrees across the edge.
 When a node can float all the way to the tips of all of its siblings
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Or, all of its non-
\emph on
incertae sedis
\emph default
 siblings, if we disallow floating across 
\emph on
incertae sedis
\emph default
 branches
\end_layout

\end_inset

, we could label such a node 
\emph on
incertae sedis
\emph default
 in the solution.
 Such a node may not have an OTT name.
\end_layout

\begin_layout Plain Layout
When the problems are 
\emph on
sub
\emph default
problems, an issue arises about whether a node can float to the tips of
 its sibling subtrees after these subtrees are extended by grafting.
 
\series bold
BDR: Would this always be possible if the node was originally an 
\emph on
incertae sedis
\emph default
 taxonomy node?
\end_layout

\begin_layout Plain Layout
Hmm...
 I was initially thinking that an incertae sedis taxon could get further
 placed but remain incertae sedis.
 For example, suppose we have a taxon that is incertae sedis within Vertebrata.
 Could an input tree place this taxon within Mammals, but not say where?
 I guess this could happen if the input tree had Theria and Prototheria
 as tip children.
 In that case, then the input tree could include a polytomy (which would
 place the taxon in Mammals), or could place the taxon on (say) the Theria
 edge, which would exclude it from Prototheria.
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Implementation: finding the node for a name
\end_layout

\begin_layout Standard
To find the node for a name 
\begin_inset Formula $n$
\end_inset

, we find the MRCA of the cluster 
\begin_inset Formula $S_{1}(n)$
\end_inset

.
 If the MRCA excludes the entire exclude group 
\begin_inset Formula $S_{2}(n)$
\end_inset

 then the name applies to the MRCA; otherwise the taxon does not exist on
 the tree.
\end_layout

\begin_layout Subsubsection
Implementation: handling name clashes
\end_layout

\begin_layout Standard
When multiple names 
\begin_inset Formula $N=\{n_{1},\ldots n_{N}\}$
\end_inset

 map to the same solution node 
\begin_inset Formula $x$
\end_inset

, then these names must satisfy some tree structure on the taxonomy, such
 that 
\begin_inset Formula $n_{1}<n_{2}$
\end_inset

 if 
\begin_inset Formula $n_{1}$
\end_inset

 is a descendant of 
\begin_inset Formula $n_{2}$
\end_inset

 in the taxonomy.
 If it is possible to find a name 
\begin_inset Formula $n_{max}$
\end_inset

 that is the unique maximal element of 
\begin_inset Formula $N$
\end_inset

, then it is permissible to 
\end_layout

\begin_layout Enumerate
create a monotypic parent 
\begin_inset Formula $p(x)$
\end_inset

 of 
\begin_inset Formula $x$
\end_inset

, and assign 
\begin_inset Formula $n_{max}$
\end_inset

 to 
\begin_inset Formula $p(x)$
\end_inset


\end_layout

\begin_layout Enumerate
continue handling name clashes at 
\begin_inset Formula $x$
\end_inset

 with the set of possible names reduced to 
\begin_inset Formula $N-n_{max}$
\end_inset

.
\end_layout

\begin_layout Standard
However, its certainly possible that there might not be any such 
\begin_inset Formula $N_{max}$
\end_inset

, in which case we could just choose a name for 
\begin_inset Formula $x$
\end_inset

 from 
\begin_inset Formula $N$
\end_inset

 (perhaps not an 
\emph on
incertae sedis
\emph default
 name) and then record all the other names as equivalents somewhere.
\end_layout

\begin_layout Standard

\series bold
BDR:
\emph on
 
\series default
we might get this behavior in a nice an automatic way if we create a single
 fake leaf for each monotypic taxonomy node that holds the node's leaf label.
\end_layout

\begin_layout Subsubsection
Caveats
\end_layout

\begin_layout Standard
When multiple I.S.
 taxa have been moved to the root node of a subproblem, they may be I.S.
 over the entire subproblem, and some may be I.S.
 over others in an asymmetric manner.
 Therefore, we might need to specify additional information about the original
 attachment location of the I.S.
 taxa, such as their depth.
 This only affects problems that have been decomposed.
\end_layout

\begin_layout Standard

\series bold
BDR:
\series default
 
\emph on
currently we don't actually move taxa to get them into a subproblem.
 So, is this even an issue?
\end_layout

\begin_layout Subsection
Grafted supertree
\end_layout

\begin_layout Standard

\emph on
Question:
\emph default
 Does the synthesis tree contain any 
\emph on
incertae sedis
\emph default
 groups?
\begin_inset Newline newline
\end_inset


\emph on
Answer:
\emph default
 The grafted supertree will not contain any 
\emph on
incertae sedis
\emph default
 groups.
 However, when we attach pruned nodes to a parent in the grafted supertree,
 we could mark such nodes 
\emph on
incertae sedis
\emph default
 if we want.
\end_layout

\begin_layout Subsection
Unpruning
\end_layout

\begin_layout Standard
Currently the unpruner 
\emph on
does not
\emph default
 require that the OTT ids are named in the grafted solution before unpruning
 starts.
 According to Mark's document, he wasn't sure if such names were generated
 for nodes that had an IS taxon placed inside of them, so otc-unprune-solution-a
nd-name-unnamed nodes throws away all the names and generates them itself.
\end_layout

\begin_layout Standard

\series bold
BDR
\series default
: See document 
\family typewriter
otcetera/doc/unprune-solution-and-name-unnamed-nodes.pdf
\end_layout

\begin_layout Standard
The unpruner should record when unpruned nodes are 
\emph on
incertae sedis
\emph default
.
 Such nodes are unaffected by phylogenies, and so 
\emph on
incertae sedis
\emph default
 annotations for them make good sense.
\end_layout

\begin_layout Subsection
Annotation
\end_layout

\begin_layout Standard
Annotation primarily involves running a conflict analysis between the synthesis
 tree and each input tree.
 Since neither tree has any 
\emph on
incertae sedis
\emph default
 taxa, the conflict algorithm does not need to change.
 Furthermore, if we allow 
\emph on
incertae sedis
\emph default
 taxa that are taxonomy-only to be annotated as 
\emph on
incertae sedis
\emph default
 on the synth tree, then such groups will not affect conflict with the input
 trees.
 We would also like to allow running a conflict analysis between the synthesis
 tree and the taxonomy tree.
 However, naming the nodes 
\emph on
is
\emph default
 a (almost) run of conflict analysis on the taxonomy tree, and this has
 already been done in a prior step.
 So, the current annotation procedure actually works as-is.
\end_layout

\begin_layout Standard
It would be nice to allow running conflict against the cleaned taxonomy,
 though.
 One way to do this would be to generated a 
\begin_inset Quotes eld
\end_inset

placed taxonomy
\begin_inset Quotes erd
\end_inset

, with groups extended to include 
\emph on
incertae sedis
\emph default
 taxa that have been placed within them.
 This would not require any updating to the conflict-analysis code in the
 annotation step.
\begin_inset Note Comment
status collapsed

\begin_layout Subsection
Conflict service
\end_layout

\begin_layout Plain Layout
The current conflict service considers a group 
\begin_inset Formula $A$
\end_inset

 to conflict with the taxonomy if group 
\begin_inset Formula $A$
\end_inset

 has an incertae sedis group 
\begin_inset Formula $B$
\end_inset

 placed within it.
 This doesn't affect the annotations, since taxon names are added by the
 unpruner.
 But it could make perfectly fine input trees incorrectly look like they
 are the cause of broken taxa, if they contain IS taxa.
 Thus, it would be nice to have a modified conflict algorithm.
 
\end_layout

\begin_layout Subsubsection
Current conflict algorithm
\end_layout

\begin_layout Plain Layout
The current conflict algorithm is pretty fast, but it works by classifying
 tips into either (i) the include group or (ii) the exclude group.
 To avoid counting the exclude group for every split, we instead count the
 total number of children for each node, and assume that any children not
 in the include set are in the exclude set.
 This is no longer true when we have incertae sedis taxa.
 I suspect that if we want to handle incertae sedies, we'd need a third
 category (iii) for 
\begin_inset Quotes eld
\end_inset

neither include group nor exclude group
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Enumerate
Get induced trees on intersection of leaf sets
\end_layout

\begin_layout Enumerate
Compute depth for each node (nd->depth)
\end_layout

\begin_layout Enumerate
Compute number of tips at or below each node (nd->n_tips)
\end_layout

\begin_layout Enumerate
for each input tree node -> 
\begin_inset Formula $nd$
\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
skip the root
\end_layout

\begin_layout Enumerate
skip monotypic
\end_layout

\begin_layout Enumerate
if its a tip then find corresponding (
\begin_inset Quotes eld
\end_inset

terminal
\begin_inset Quotes erd
\end_inset

) edges in synth tree and continue
\end_layout

\begin_layout Enumerate
leaves1 <- get the list of leaves in the include group of 
\begin_inset Formula $nd$
\end_inset

 (in input)
\end_layout

\begin_layout Enumerate
L2 <- find the total number of tips (L2 = sum [nd->n_tips| nd <- leaves1])
\end_layout

\begin_layout Enumerate
leaves2 <- get list of corresponding synth leaf nodes (in synth)
\end_layout

\begin_layout Enumerate
nodes <- find all nodes between leaves2 and the MRCA (in synth)
\end_layout

\begin_layout Enumerate
MRCA <- mrca of leaves2 (in synth.
 this uses the nd->depth annotation)
\end_layout

\begin_layout Enumerate
Compute number of tips in the include set (nd->include_tips) below each
 node in 
\begin_inset Formula $nodes$
\end_inset

 (in synth)
\end_layout

\begin_layout Enumerate
if n_include_tips(MRCA) == n_tips(MRCA) then the MRCA displays 
\begin_inset Formula $nd$
\end_inset


\end_layout

\begin_layout Enumerate
if n_include_tips(MRCA) < n_tips(MRCA) then
\end_layout

\begin_deeper
\begin_layout Itemize
foreach node in nodes
\end_layout

\begin_deeper
\begin_layout Itemize
if (n_include_tipes(nd) < n_tips(nd) and n_include_tips(nd) < l2)
\end_layout

\begin_deeper
\begin_layout Itemize
this is a conflict!
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
if there are no conflicts, then this is a resolved_by.
\end_layout

\end_deeper
\end_deeper
\begin_layout Subsubsection
Modified conflict algorithm?
\end_layout

\begin_layout Plain Layout
This probably is outside the scope of the paper, but if we could come up
 with a modified conflict algorithm, that would be nice/useful, and probably
 novel.
 It would also probably be slower...
\end_layout

\end_inset


\end_layout

\begin_layout Section
Results
\end_layout

\begin_layout Subsection
Case 1
\end_layout

\begin_layout Standard
taxonomy = (((a1,a2)A,(b1,b2)B)AB,(c1,c2)?C,D)root;
\end_layout

\begin_layout Subsubsection
If we place 
\begin_inset Formula $c$
\end_inset

 within 
\begin_inset Formula $A$
\end_inset


\end_layout

\begin_layout Standard
tree1 = (((a1,c1),b1),d1);
\end_layout

\begin_layout Standard
synth-with-is: ((((a1,(c1,c2)C),a2)A,(b1,b2)B)AB),(d1)D)
\end_layout

\begin_layout Standard
placement: C within A <- AB 
\end_layout

\begin_layout Standard
synth-no-is: ((a1,(c1,c2)C),a1,(b1,b2)B,(d1)D)
\end_layout

\begin_layout Subsubsection
If we place 
\begin_inset Formula $c$
\end_inset

 within 
\begin_inset Formula $A$
\end_inset

 but break 
\begin_inset Formula $C$
\end_inset


\end_layout

\begin_layout Standard
tree1 = ((a1,c1),(a2,c1),b1)
\end_layout

\begin_layout Standard
synth-with-is: ((((a1,c1),(a2,c2))A,(b1,b2)B)AB, (d1)D)
\end_layout

\begin_layout Standard
synth-no-is: ??
\end_layout

\begin_layout Standard
placement: 
\end_layout

\begin_layout Itemize
c1 <- (broken) C within A <- AB.
\end_layout

\begin_layout Itemize
c2<- (broken) C within A <- AB
\end_layout

\begin_layout Standard
result: we lose 
\begin_inset Formula $C$
\end_inset

, but keep 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $AB$
\end_inset

.
\end_layout

\begin_layout Subsection
Case 2: nested is
\end_layout

\begin_layout Standard
taxonomy = (((a1,a2)A,(b1,b2)B),( ( (c11,c12)C1,(c21,c22)C2,(ci1,ci2)?CI
 )?C) ,(d1)D)
\end_layout

\begin_layout Standard
tree1 = ((a1,(c11,(ci1,c12))),b1)
\end_layout

\begin_layout Standard
synth-with-is: places CI wihin C1, and C within A.
\end_layout

\begin_layout Subsection
Case 3: interleaving taxa
\end_layout

\begin_layout Standard
taxonomy = ((a1,a2)A,(b1,b2)?B,(c1,c2)?c)
\end_layout

\begin_layout Standard
input tree: ((b1,c1),(b2,c2))
\end_layout

\begin_layout Standard
synth-with-is: ((a1,a2)A,((b1,c1),(b2,c2))B) or ((a1,a2)A,((b1,c1),(b2,c2))C)
\end_layout

\begin_layout Standard
Result: we name the interleaved taxon 
\begin_inset Formula $B$
\end_inset

 or 
\begin_inset Formula $C$
\end_inset

, but cannot name it both names.
\end_layout

\begin_layout Subsection
Case 4: creation of monotypic taxa
\end_layout

\begin_layout Standard
see test cases.
\end_layout

\begin_layout LyX-Code
\begin_inset Note Comment
status open

\begin_layout LyX-Code

\series bold
Whale:
\series default
 ?ott6145835 [6145835 Brandtocetus/genus] <- ott698424 [698424 Cetacea/order]
 placed under ott4942423 [4942423 Cetotherium / genus] <- ott698424 [698424
 Cetacea/order]
\end_layout

\begin_layout LyX-Code

\series bold
Whale:
\series default
 ?ott6145873 [6145873] <- ott698424 [698424 Cetacea / order] placed under
 ott4942423 [4942423] <- ott698424 [698424] 
\end_layout

\begin_layout LyX-Code
- Cetacea broken.
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\series bold
Insect:
\series default
 ?ott18090 [18090] <- ott672501 [672501] placed under ott275501 [275501]
 <- ott672501 [672501]
\end_layout

\begin_layout LyX-Code

\series bold
Insect:
\series default
 ?ott190269 [190269] <- ott672501 [672501] placed under ott275501 [275501]
 <- ott672501 [672501] 
\end_layout

\begin_layout LyX-Code

\series bold
Insect:
\series default
 ?ott349638 [349638] <- ott672501 [672501] placed under ott275501 [275501]
 <- ott672501 [672501] 
\end_layout

\begin_layout LyX-Code

\series bold
Insect:
\series default
 ?ott1009313 [1009313] <- ott672501 [672501 Reduviidae / family] placed
 under ott275501 [275501] <- ott672501 [672501] 
\end_layout

\begin_layout LyX-Code
- Reduviidae broken.
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\series bold
Insect: 
\series default
?ott564110 [564110] <- ott939130 [939130 Thyrididae / family] placed under
 ott757344 [757344] <- ott939130 [939130] 
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\series bold
Plant:
\series default
 ?ott679485 [679485] <- ott1074933 [1074933 Lamioidea / subfamily] placed
 under ott534796 [534796] <- 
\end_layout

\begin_layout LyX-Code

\series bold
Plant:
\series default
 ?ott729184 [729184] <- ott1074933 [1074933 Lamioidea / subfamily ] placed
 under ott534796 [534796] <- ott1074933 [1074933] 
\end_layout

\begin_layout LyX-Code
ott1074933 [1074933] 
\end_layout

\begin_layout LyX-Code
- Lamioidea 
\emph on
not
\emph default
 broken
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\series bold
Plant:
\series default
 ?ott5144555 [5144555] <- ott23373 [23373] placed under ott447802 [447802]
 <- ott23373 [23373]
\end_layout

\begin_layout LyX-Code
- Orobanchaceae broken
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\series bold
Fly:
\series default
 ?ott441413 [441413 Rhodesiella lungliensis/species] <- ott1014022 [1014022
 Rubiaceae] placed under ott571842 [571842 Pavetteae / tribe] <- ott997381
 [997381 Ixoroidea/subfamily] <- ott1014022 [1014022 Rubiaceae/family]
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\series bold
Plant:
\series default
 ?ott31033 [31033] <- ott627035 [627035] placed under ott6019314 [6019314]
 <- ott627035 [627035] 
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\series bold
Bacteria:
\series default
 ?ott4018918 [4018918] <- ott5248084 [5248084] placed under ott167767 [167767]
 <- ott5248084 [5248084] 
\end_layout

\begin_layout LyX-Code

\series bold
Bacteria:
\series default
?ott4792759 [4792759] <- ott5248084 [5248084] placed under ott167767 [167767]
 <- ott5248084 [5248084] 
\end_layout

\begin_layout LyX-Code
- Erysipelotrichaceae broken
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Should we do this? We could say: 
\end_layout

\begin_layout Itemize
there are 331 incertae sedis taxa that are mentioned in input trees.
\end_layout

\begin_deeper
\begin_layout Itemize
what is the kingom / phylum / class / order / genus / species
\end_layout

\end_deeper
\begin_layout Itemize
we placed 14 incertae sedis taxa inside a sister taxon.
 (
\begin_inset Quotes eld
\end_inset

incertae sedis
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

versus 
\begin_inset Quotes eld
\end_inset

unplaced
\begin_inset Quotes erd
\end_inset

?)
\end_layout

\begin_layout Itemize
we placed 
\begin_inset Formula $o$
\end_inset

 incertae sedis taxa 
\emph on
outside
\emph default
 all sister taxa.
\end_layout

\begin_layout Itemize
we confirmed 
\begin_inset Formula $n$
\end_inset

 incertae sedis taxa as being separate from all sister (sampled) taxa??
\end_layout

\begin_layout Itemize
we avoiding breaking 8 taxa that had IS taxa placed inside them.
\end_layout

\begin_layout Itemize
we allowed 
\begin_inset Formula $z_{1}$
\end_inset

 new taxa into the synthesis tree that were incertae sedis.
\end_layout

\begin_layout Itemize
we allowed 
\begin_inset Formula $z_{2}$
\end_inset

 new taxa into the synthesis tree that are marked as extinct.
\end_layout

\begin_layout Itemize
some nodes have as many as 
\begin_inset Formula $w$
\end_inset


\emph on
 incertae sedis
\emph default
 children, making them unbrowseable when incertae sedis children are not
 excluded.
\end_layout

\begin_layout Itemize
\begin_inset Formula $v_{1}$
\end_inset

 input trees were previously excluded 
\emph on
entirely
\emph default
 because they are nested within in an incertae sedis taxon.
\end_layout

\begin_layout Itemize
\begin_inset Formula $v_{2}$
\end_inset

 input trees were previously excluded 
\emph on
partially
\emph default
 because they are nested within in an incertae sedis taxon.
\end_layout

\begin_layout Standard
Currently the numbers 
\begin_inset Formula $z_{1}$
\end_inset

 and 
\begin_inset Formula $z_{2}$
\end_inset

.
 
\end_layout

\begin_layout Section
Discussion
\end_layout

\begin_layout Standard
One thing we could do (perhaps) that we are not currently doing, is to have
 nodes marked as incertae sedis on the synth tree.
 This would be easy enough if such nodes are not affected in any way by
 the input trees.
 Thus, when unpruning nodes we could mark any nodes 
\emph on
incertae sedis
\emph default
 if they were marked 
\emph on
incertae sedis
\emph default
 on the taxonomy.
\end_layout

\begin_layout Standard
Secondly, I think we need to distinguish 
\emph on
incertae sedis
\emph default
 taxa that are 
\begin_inset Quotes eld
\end_inset

unplaced
\begin_inset Quotes erd
\end_inset

 from 
\emph on
incertae sedis
\emph default
 taxa that do not occur in any input tree.
 I think that if 
\begin_inset Formula $A$
\end_inset

 contains child 
\begin_inset Formula $A_{1}$
\end_inset

 that is an input tree, and the taxon 
\begin_inset Formula $A$
\end_inset

 is not broken, then 
\begin_inset Formula $A$
\end_inset

 will be placed, and thus any other children 
\begin_inset Formula $A_{2},A_{3},\ldots,A_{n}$
\end_inset

 will also be placed, since they will be added as children of the (placed)
 node 
\begin_inset Formula $A$
\end_inset

 by the unpruner.
 This could be considered when deciding which nodes to suppress in the tree
 viewer.
\end_layout

\begin_layout Paragraph
Taxonomy merging
\end_layout

\begin_layout Standard
Not all 
\emph on
incertae sedis
\emph default
 taxa in our taxonomy are directly labeled 
\emph on
incertae sedis
\emph default
 by taxonomists.
 
\emph on
Incertae sedis
\emph default
 taxa can also result from automatic merging of taxonomies to create the
 OpenTree taxonomy.
 For example, in Figure 3 of 
\begin_inset CommandInset citation
LatexCommand citet
key "rees2017automated"
literal "true"

\end_inset

, cases #4 and #6 illustrate examples where merging of two taxonomies leads
 to a taxonomy with a taxon of uncertain placement.
 The reason is primarily that if taxonomy 
\begin_inset Formula $\taxonomy_{1}$
\end_inset

 contains more levels of hierarchy than taxonomy 
\begin_inset Formula $\taxonomy_{2}$
\end_inset

, then we must add internal nodes to 
\begin_inset Formula $\taxonomy_{2}$
\end_inset

 to align it to 
\begin_inset Formula $\taxonomy_{1}$
\end_inset

.
 However, if taxonomy 
\begin_inset Formula $\taxonomy_{2}$
\end_inset

 contains more leaves than 
\begin_inset Formula $\taxonomy_{1}$
\end_inset

, then it is unclear if these extra leaves should be nested inside the additiona
l internal nodes, or not.
 Thus, the extra leaves are marked 
\emph on
incertae sedis
\emph default
.
\end_layout

\begin_layout Standard
For example, if 
\begin_inset Formula $\taxonomy_{1}=((a,b)x,(c,d)y)z$
\end_inset

 and 
\begin_inset Formula $\taxonomy_{2}=(a,b,c,d,e)z$
\end_inset

 then 
\begin_inset Formula $a$
\end_inset

 and 
\begin_inset Formula $b$
\end_inset

 in 
\begin_inset Formula $\taxonomy_{2}$
\end_inset

 should be nested within 
\begin_inset Formula $x$
\end_inset

, but we do not know if 
\begin_inset Formula $e$
\end_inset

 should be nested within 
\begin_inset Formula $x$
\end_inset

 or not.
 Thus we obtain 
\begin_inset Formula $((a,b)x,(c,d)y,?e)z$
\end_inset

, where 
\begin_inset Formula $?$
\end_inset

 indicates that taxon 
\begin_inset Formula $e$
\end_inset

 is marked 
\emph on
incertae sedis
\emph default
.
\end_layout

\begin_layout Standard
If incertae sedis taxa are cannot be placed within other incertae sedis
 taxa, then such an approach does not work if 
\begin_inset Formula $y$
\end_inset

 is already incertae sedis.
 However, we take the approach that 
\emph on
incertae sedis
\emph default
 notations are not a general solution to expression of uncertain placement.
\end_layout

\begin_layout Subsubsection
Comparison to operational definition
\end_layout

\begin_layout Standard
The splits-based semantics for incertae sedis taxa has many desirable properties.
 In allows the use of the BUILD algorithm to assess compatibility of split
 sets.
 However, it also has some properties that may not be expected.
 For example, two incertae sedis siblings can be freely interdigitated,
 which might not be the expected outcome.
 The current definition, also ignore ranks.
 Thus if we had two incertae sedis siblings that were genera, but other
 siblings were families, then one might expect that the genus-level incertae
 sedis taxa could be placed within families, but not intermixed.
 Since the current approach ignores ranks, it cannot do that.
\end_layout

\begin_layout Standard
The above definition of incertae sedis taxa does allow two incertae sedis
 sister taxa to be interdigitated.
 It also 
\end_layout

\begin_layout Standard
Also, the splits-based semantics might not completely recover the edit-operation
 semantics.
 The corner cases are ...
 .
\end_layout

\begin_layout Subsubsection
Intrusion into incertae sedis taxa
\end_layout

\begin_layout Standard
In theory it could be possible for an 
\emph on
incertae sedis
\emph default
 taxon 
\begin_inset Formula $A$
\end_inset

 to be placed within an 
\emph on
incertae sedis
\emph default
 sibling 
\begin_inset Formula $B$
\end_inset

.
 We initially implemented this semantics.
 It requires updating the recursion to define 
\begin_inset Formula $I(m,n)$
\end_inset

 as the descendants of 
\begin_inset Formula $m$
\end_inset

 that can be access from 
\begin_inset Formula $n$
\end_inset

 without traversing an 
\emph on
incertae sedis
\emph default
 node.
\end_layout

\begin_layout Standard
With a splits-based semantics, we cannot allow both (i) placing 
\begin_inset Formula $A$
\end_inset

 in 
\begin_inset Formula $B$
\end_inset

 and (ii) placing 
\begin_inset Formula $B$
\end_inset

 in 
\begin_inset Formula $A$
\end_inset

 and also forbid interdigitating 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $B$
\end_inset

.
\end_layout

\begin_layout Standard
However, if we allow this behavior by reducing the exclude sets for 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $B$
\end_inset

, then this has the unfortunate consequence that the members of 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $B$
\end_inset

 may be inter-digitated.
 In many cases, 
\emph on
incertae sedis
\emph default
 genera have siblings that are families, and the expected semantics is that
 genera may be placed within their sibling families, or may remain outside
 existing families.
 In such cases, inter-digitating the genera would not be expected behavior.
 Thus, we choose the semantics that 
\emph on
incertae sedis
\emph default
 taxa exclude their 
\emph on
incertae sedis
\emph default
 siblings.
 This is not because the other semantics is impossible.
 However, we note that use of the interdigitating semantics allows a situation
 where the names for 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $B$
\end_inset

 both apply to the same node.
\end_layout

\begin_layout Standard
This semantics also complicates placement, since it is possible to place
 
\begin_inset Formula $A$
\end_inset

 as a sibling of 
\begin_inset Formula $B$
\end_inset

, and then place 
\begin_inset Formula $B$
\end_inset

 within 
\begin_inset Formula $A$
\end_inset

.
 This violates the current invariant that taxa are only ever placed within
 more tipward taxa.
 This makes the description of placement more complicated, since we can
 no longer simply record all cases where a parent node is not ancestor on
 the taxonomy.
\end_layout

\begin_layout Subsubsection
Usage in the literature
\end_layout

\begin_layout Standard
The term 
\emph on
incertae sedis
\emph default
 can be used in a number of different ways.
 For example,
\emph on
 
\emph default
one author might describe 
\emph on
incertae sedis
\emph default
 genera that are asserted to be monophyletic, whereas another author might
 describe 
\emph on
incertae sedis
\emph default
 genera that may be interdigitated.
 
\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "otcetera"
options "upmplainnat"

\end_inset


\end_layout

\end_body
\end_document

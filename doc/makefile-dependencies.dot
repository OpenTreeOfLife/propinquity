digraph "make" {
graph [ranksep=0.25, fontname=Arial,  nodesep=0.25, ranksep=0.5];
node [fontname=Arial, style=filled, height=0, width=0, shape=box];
edge [style="setlinewidth(2)"];

config -> "cleaned_ott/root_ott_id.txt"
config -> "cleaned_ott/cleaning_flags.txt"
"$OTT_DIR/version.txt" -> "cleaned_ott/version.txt"

"phylo_input/study_tree_pairs.txt" -> "exemplified_phylo/args.txt"

"phylo_input/study_tree_pairs.txt" -> "otc-nonterminalstoexemplars"
"exemplified_phylo/args.txt" -> "otc-nonterminalstoexemplars"
"cleaned_phylo/phylo_inputs_cleaned.txt" -> "otc-nonterminalstoexemplars"
"otc-nonterminalstoexemplars" -> "exemplified_phylo/nonempty_trees.txt"
"otc-nonterminalstoexemplars" -> "exemplified_phylo/taxonomy.tre" [color=green style=dotted]
"otc-nonterminalstoexemplars"  [style=filled, color="#EEBBDD"]

"exemplified_phylo/nonempty_trees.txt" -> "exemplified_phylo/taxonomy.tre"

"$OTT_FILEPATHS" -> "suppress_by_flag.py"
"cleaned_ott/version.txt" ->  "suppress_by_flag.py"
"cleaned_ott/cleaning_flags.txt" ->  "suppress_by_flag.py"
"cleaned_ott/root_ott_id.txt" ->  "suppress_by_flag.py"
"suppress_by_flag.py" [style=filled, color="#EEBBDD"]
"suppress_by_flag.py" -> "cleaned_ott/cleaned_ott.tre"

"$(addsuffix .json, $(addprefix $(COLLECTIONS_ROOT)/shards/collections-1/collections-by-owner/, $(SYNTHESIS_COLLECTIONS)))" -> "phylo_input/rank_collection.json"

"phylo_input/rank_collection.json" -> "collection_export.py --export=studyID"
"collection_export.py --export=studyID" -> "phylo_input/studies.txt"
"collection_export.py --export=studyID" [style=filled, color="#EEBBDD"]

"phylo_input/rank_collection.json" -> "collection_export.py --export=studyID_treeID"
"collection_export.py --export=studyID_treeID" -> "phylo_input/study_tree_pairs.txt"
"collection_export.py --export=studyID_treeID" [style=filled, color="#EEBBDD"]

"phylo_snapshot/git_shas.txt"

"phylo_snapshot/git_shas.txt" ->  "export_studies_from_collection.py"
"phylo_input/rank_collection.json" -> "export_studies_from_collection.py"
"export_studies_from_collection.py" -> "phylo_snapshot/concrete_rank_collection.json"
"export_studies_from_collection.py"  [style=filled, color="#EEBBDD"]

"cleaned_ott/cleaning_flags.txt" -> "bin/write_needs_updating"
"cleaned_ott/root_ott_id.txt" -> "bin/write_needs_updating"
"phylo_input/study_tree_pairs.txt" -> "bin/write_needs_updating"
"phylo_input/study_tree_pairs.txt" -> "bin/write_needs_updating"
"bin/write_needs_updating" -> "cleaned_phylo/needs_updating.txt"
"bin/write_needs_updating" -> "cleaned_phylo/cleaning_flags.txt"  [color=green style=dotted]
"bin/write_needs_updating" -> "cleaned_phylo/root_ott_id.txt"  [color=green style=dotted]
"bin/write_needs_updating"   [style=filled, color="#EEBBDD"]

"cleaned_phylo/needs_updating.txt" -> "prune_to_clean_mapped.py"
"cleaned_ott/cleaning_flags.txt" -> "prune_to_clean_mapped.py"
"cleaned_phylo/root_ott_it.txt" -> "prune_to_clean_mapped.py"
"$OTT_FILEPATHS" -> "prune_to_clean_mapped.py"
"phylo_snapshot/concrete_rank_collection.json" -> "prune_to_clean_mapped.py"
"prune_to_clean_mapped.py"  [style=filled, color="#EEBBDD"]
"prune_to_clean_mapped.py" -> "cleaned_phylo/phylo_inputs_cleaned.txt"


config -> "phylo_input/collections.txt"
"phylo_input/collections.txt" -> "phylo_input/rank_collection.json"
# here is where we need to depend on whether the collections have changed!

"exemplified_phylo/nonempty_trees.txt" -> "subproblems/scratch/args.txt"

"exemplified_phylo/taxonomy.tre" -> "bin/run-subproblem/finder.sh"
"subproblems/scratch/args.txt" -> "bin/run-subproblem/finder.sh"
"exemplified_phylo/nonempty_trees.txt" -> "bin/run-subproblem/finder.sh"
"bin/run-subproblem/finder.sh" [style=filled, color="#EEBBDD"]
"bin/run-subproblem/finder.sh" -> "subproblems/dumped-subproblem-ids.txt"

"subproblems/dumped-subproblem-ids.txt" -> "bin/checksum-tree-files.sh" 
"bin/checksum-tree-files.sh" [style=filled, color="#EEBBDD"]
"bin/checksum-tree-files.sh" -> "subproblems/checksummed-subproblem-ids.txt"


"subproblems/checksummed-subproblem-ids.txt" -> "bin/move-subproblem-if-differing.sh" 
"bin/move-subproblem-if-differing.sh" [style=filled, color="#EEBBDD"]
"bin/move-subproblem-if-differing.sh" -> "subproblems/subproblem-ids.txt"

"subproblems/subproblem-ids.txt" -> "otc-solve-subproblem"
"otc-solve-subproblem" [style=filled, color="#EEBBDD"]
"otc-solve-subproblem" -> "subproblem_solutions/*.tre"
"otc-solve-subproblem" -> "subproblem_solutions/solution-ids.txt"
"subproblem_solutions/solution-ids.txt"

"subproblem_solutions/solution-ids.txt" -> "otc-graft-solutions"
"otc-graft-solutions" [style=filled, color="#EEBBDD"]
"otc-graft-solutions" -> "grafted_solution/grafted_solution.tre"

"grafted_solution/grafted_solution.tre" -> "otc-relabel-tree grafted_solution/grafted_solution.tre"
"otc-relabel-tree grafted_solution/grafted_solution.tre" [style=filled, color="#EEBBDD"]
"otc-relabel-tree grafted_solution/grafted_solution.tre" -> "grafted_solution/grafted_solution_ottnames.tre"

"cleaned_ott/cleaned_ott.tre" -> "otc-unprune-solution"
"grafted_solution/grafted_solution.tre" -> "otc-unprune-solution"
"otc-unprune-solution" [style=filled, color="#EEBBDD"]
"otc-unprune-solution" -> "full_supertree/full_supertree.tre"

"full_supertree/full_supertree.tre" -> "otc-name-unnamed-nodes"
"otc-name-unnamed-nodes" [style=filled, color="#EEBBDD"]
"otc-name-unnamed-nodes" -> "labelled_supertree/labelled_supertree.tre"

"labelled_supertree/labelled_supertree.tre" -> "otc-relabel-tree labelled_supertree/labelled_supertree.tre"
"otc-relabel-tree labelled_supertree/labelled_supertree.tre" [style=filled, color="#EEBBDD"]
"otc-relabel-tree labelled_supertree/labelled_supertree.tre" -> "labelled_supertree/labelled_supertree_ottnames.tre"

"cleaned_ott/cleaned_ott.tre" -> "otc-annotate-synth"
"labelled_supertree/labelled_supertree.tre" -> "otc-annotate-synth"
"exemplified_phylo/nonempty_trees.txt" -> "otc-annotate-synth"
"otc-annotate-synth" [style=filled, color="#EEBBDD"]
"otc-annotate-synth" -> "annotated_supertree/annotations.json"
}
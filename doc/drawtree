#!/usr/bin/Rscript

## Read arguments
args = commandArgs(trailingOnly=T)

## Default setting when no arguments passed
if(length(args) < 1) {
  args <- c("--help")
}
 
## Parse arguments (we expect the form --arg=value)
parseArgs <- function(x) strsplit(sub("^--", "", x), "=")
argsDF <- as.data.frame(do.call("rbind", parseArgs(args)))
argsL <- as.list(as.character(argsDF$V2))
#print("argsL")
#print(argsL)
#print("argsDF$V1")
#print(argsDF$V1)
#print("argsDF$V2")
#print(argsDF$V2)
names(argsL) <- argsDF$V1

## Error conditions
error = FALSE
error = error || !("input" %in% names(argsL))

## Help section
if(("--help" %in% args) || error) {
  cat("The R Script
 
      Input arguments:
      --input=filename         - a newick input file

      Output arguments
      --output=filename        - a PDF output file
      --width=someValue        - width in inches
      --height=someValue       - height in inches
      --format=PDF             - SVG or PDF

      Plotting arguments:
      --type=someValue         - numeric, blah blah
      --edge.width=someValue   - character, blah blah
      --show.node.label=BOOL   - boolean, show internal node labels

      Other arguments:
      --help                   - print this text
 
      Example:
      ./drawtree --input=<newick> --type=cladogram\n\n")
 
  q(save="no")
}


require(ape)
require(phytools)

plot.singletons = function (tree) 
{
    n <- length(tree$tip.label)
    if (is.null(tree$edge.length)) tree<-compute.brlen(tree)
    if (is.null(names(tree$edge.length))) 
        names(tree$edge.length) <- rep(1, length(tree$edge.length))
    colors <- setNames(palette()[1:length(unique(names(tree$edge.length)))], 
        sort(unique(names(tree$edge.length))))
    colors <- colors[names(tree$edge.length)]
    if (attr(tree, "order") == "cladewise") 
        cw <- tree
    else stop("tree must be in \"cladewise\" order.")
    y <- vector(length = n + cw$Nnode)
    y[cw$edge[cw$edge[, 2] <= n, 2]] <- 1:n
    pw <- reorderPhylo(cw, "pruningwise")
    nn <- unique(pw$edge[, 1])
    for (i in 1:length(nn)) {
        yy <- y[pw$edge[which(pw$edge[, 1] == nn[i]), 2]]
        y[nn[i]] <- mean(range(yy))
    }
    X <- nodeHeights(cw)
    plot.new()
    par(mar = c(0.0, 0.0, 0.0, 0.0))
    pp <- par("pin")[1]
    sw <- par("cex") * (max(strwidth(cw$tip.label, units = "inches"))) + 
        1.37 * par("cex") * strwidth("W", units = "inches")
    alp <- optimize(function(a, H, sw, pp) (a * 1.04 * max(H) + 
        sw - pp)^2, H = X, sw = sw, pp = pp, interval = c(0, 
        1e+06))$minimum
    xlim <- c(min(X), max(X) + sw/alp)
    plot.window(xlim = xlim, ylim = c(1, max(y)+sw/alp))
#    axis(1, at = c(0, max(X)), labels = FALSE)
#    axis(2, at = 1:max(y), labels = FALSE)
    for (i in 1:nrow(X)) lines(X[i, ], rep(y[cw$edge[i, 2]], 
        2), lwd = 2, lend = 2, col = colors[i])
    for (i in 1:tree$Nnode + n) {
        xx <- X[which(cw$edge[, 1] == i), 1]
        yy <- y[cw$edge[which(cw$edge[, 1] == i), 2]]
        if (length(xx) > 1) 
            lines(xx, yy, lwd = 2, lend = 2, col = colors[which(cw$edge[, 
                1] == i)])
    }
    for (i in 1:nrow(X)) points(X[i, 2], y[cw$edge[i, 2]],
                                pch = 21, bg = "gray")
    for (i in 1:n) text(X[which(cw$edge[, 2] == i), 2], y[i], 
        tree$tip.label[i], pos = 4, offset = 0.3)
    m <- length(tree$node.label)
    for (i in 1:m)
    {
#        print(tree$node.label[i])
#        print(n+i)
        x = X[which(cw$edge[, 2] == n+i), 2]
        if (length(x) == 0)
        {
            x = 0.0
            points(x, y[n+i], pch=21,bg="gray")
        }
#        print(x)
#        print(y[n+i])
        text(x, y[n+i], tree$node.label[i], pos = 4, offset = 0.3)
    }
}

environment(plot.singletons) = environment(plotTree.singletons)

input = argsL$input
#tree = read.tree(input)
tree = read.newick(input)
plotArgs = list(tree,no.margin=TRUE)

## Set output file if not given
if (!("format" %in% names(argsL)))
    argsL$format = "PDF"

format = tolower(argsL$format)
    
if (!("output" %in% names(argsL)))
   argsL$output = paste0(basename(argsL$input), "." , format)

if ("type" %in% names(argsL))
    plotArgs$type = argsL$type

if ("edge.width" %in% names(argsL))
    plotArgs$edge.width = argsL$edge.width

if ("show.node.label" %in% names(argsL))
    plotArgs$show.node.label = as.logical(argsL$show.node.label)

w = 0.40*max(node.depth(tree)) +2
h = length(tree$tip.label)*0.50
if ("width" %in% names(argsL))
    w = as.numeric(argsL$width)
if ("height" %in% names(argsL))
    h = as.numeric(argsL$height)

print(argsL)
print(plotArgs)

output = argsL$output

#par(oma=c(0,0,0,0))
#par(mar=c(0,0,0,0))
if (format == "pdf") {
    pdf(output,width=w,height=h)
} else if (format == "svg") {
    svg(output,width=w,height=h)
} else {
    stop("Don't recognize format")
}

plot.singletons(tree)
#do.call(plotTree.singletons,plotArgs) #plot(tree,type="cladogram",edge.width=argsL$edge.width)

